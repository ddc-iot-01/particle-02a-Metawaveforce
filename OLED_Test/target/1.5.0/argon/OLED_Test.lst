
/home/brian/Particle/OLED_Test/target/1.5.0/argon/OLED_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000029f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6a10  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000047c  2003df28  000d6a14  0001df28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000044c  2003e3a4  2003e3a4  0002e3a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6e90  000d6e90  00026e90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6eb8  000d6eb8  00026eb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e65e2  00000000  00000000  00026ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011fdc  00000000  00000000  0010d49e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000025b8  00000000  00000000  0011f47a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00037e3d  00000000  00000000  00121a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002bb91  00000000  00000000  0015986f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001082e0  00000000  00000000  00185400  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001eb89  00000000  00000000  0028d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004608  00000000  00000000  002ac269  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ce70  00000000  00000000  002b0874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f843 	bl	d60b8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f848 	bl	d60ce <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003df28 	.word	0x2003df28
   d4048:	000d6a14 	.word	0x000d6a14
   d404c:	2003e3a4 	.word	0x2003e3a4
   d4050:	2003e3a4 	.word	0x2003e3a4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fc41 	bl	d58e0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6a08 	.word	0x000d6a08
   d4080:	000d69c8 	.word	0x000d69c8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b85a 	b.w	d413c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f81c 	bl	d40c6 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bbe7 	b.w	d5864 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bff1 	b.w	d507c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bfef 	b.w	d507c <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 ff5c 	bl	d4f64 <panic_>
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4e45 	.word	0x000d4e45

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c4:	4770      	bx	lr

000d40c6 <loop>:

delay(delayTime);

}

void loop() {   // no loop
   d40c6:	4770      	bx	lr

000d40c8 <_Z10printhellov>:
}


void printhello() {
   d40c8:	b510      	push	{r4, lr}
  display.clearDisplay();
   d40ca:	4c1a      	ldr	r4, [pc, #104]	; (d4134 <_Z10printhellov+0x6c>)
   d40cc:	4620      	mov	r0, r4
   d40ce:	f000 fdaf 	bl	d4c30 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d40d2:	4620      	mov	r0, r4
   d40d4:	f000 fd2e 	bl	d4b34 <_ZN16Adafruit_SSD13067displayEv>

  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d40d8:	2200      	movs	r2, #0
   d40da:	4611      	mov	r1, r2
   d40dc:	4620      	mov	r0, r4
   d40de:	2301      	movs	r3, #1
   d40e0:	f000 fbae 	bl	d4840 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d40e4:	4620      	mov	r0, r4
   d40e6:	2301      	movs	r3, #1
   d40e8:	2200      	movs	r2, #0
   d40ea:	217f      	movs	r1, #127	; 0x7f
   d40ec:	f000 fba8 	bl	d4840 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d40f0:	4620      	mov	r0, r4
   d40f2:	2301      	movs	r3, #1
   d40f4:	223f      	movs	r2, #63	; 0x3f
   d40f6:	2100      	movs	r1, #0
   d40f8:	f000 fba2 	bl	d4840 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d40fc:	2301      	movs	r3, #1
   d40fe:	223f      	movs	r2, #63	; 0x3f
   d4100:	4620      	mov	r0, r4
   d4102:	217f      	movs	r1, #127	; 0x7f
   d4104:	f000 fb9c 	bl	d4840 <_ZN16Adafruit_SSD13069drawPixelEsst>

  // display a line of text
  display.setTextSize(1);
   d4108:	4620      	mov	r0, r4
   d410a:	2101      	movs	r1, #1
   d410c:	f000 fa10 	bl	d4530 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4110:	4620      	mov	r0, r4
   d4112:	2101      	movs	r1, #1
   d4114:	f000 fa11 	bl	d453a <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(27,30);
   d4118:	4620      	mov	r0, r4
   d411a:	221e      	movs	r2, #30
   d411c:	211b      	movs	r1, #27
   d411e:	f000 fa04 	bl	d452a <_ZN12Adafruit_GFX9setCursorEss>
  display.print("Hello, world!");
   d4122:	4620      	mov	r0, r4
   d4124:	4904      	ldr	r1, [pc, #16]	; (d4138 <_Z10printhellov+0x70>)
   d4126:	f001 fc53 	bl	d59d0 <_ZN5Print5printEPKc>

  // update display with all of the above graphics
  display.display();
   d412a:	4620      	mov	r0, r4
   d412c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.setTextColor(WHITE);
  display.setCursor(27,30);
  display.print("Hello, world!");

  // update display with all of the above graphics
  display.display();
   d4130:	f000 bd00 	b.w	d4b34 <_ZN16Adafruit_SSD13067displayEv>
   d4134:	2003e3a8 	.word	0x2003e3a8
   d4138:	000d6154 	.word	0x000d6154

000d413c <setup>:
//   #define SSD1306_128_32     // 128x32 pixel display
//   #define SSD1306_96_16      //  96x16 pixel display

int delayTime=1000;

void setup() {
   d413c:	b510      	push	{r4, lr}

  Serial.begin(9600);
   d413e:	f001 facf 	bl	d56e0 <_Z16_fetch_usbserialv>
  Wire.begin();

   // initialize and clear display
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4142:	4c0e      	ldr	r4, [pc, #56]	; (d417c <setup+0x40>)

int delayTime=1000;

void setup() {

  Serial.begin(9600);
   d4144:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4148:	f001 fabe 	bl	d56c8 <_ZN9USBSerial5beginEl>
  Wire.begin();
   d414c:	f001 fd88 	bl	d5c60 <_Z19__fetch_global_Wirev>
   d4150:	f001 fa4c 	bl	d55ec <_ZN7TwoWire5beginEv>

   // initialize and clear display
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4154:	223c      	movs	r2, #60	; 0x3c
   d4156:	2102      	movs	r1, #2
   d4158:	4620      	mov	r0, r4
   d415a:	f000 fc19 	bl	d4990 <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   d415e:	4620      	mov	r0, r4
   d4160:	f000 fd66 	bl	d4c30 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4164:	4620      	mov	r0, r4
   d4166:	f000 fce5 	bl	d4b34 <_ZN16Adafruit_SSD13067displayEv>

  printhello();
   d416a:	f7ff ffad 	bl	d40c8 <_Z10printhellov>

delay(delayTime);
   d416e:	4b04      	ldr	r3, [pc, #16]	; (d4180 <setup+0x44>)

}
   d4170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.clearDisplay();
  display.display();

  printhello();

delay(delayTime);
   d4174:	6818      	ldr	r0, [r3, #0]
   d4176:	f001 bb54 	b.w	d5822 <delay>
   d417a:	bf00      	nop
   d417c:	2003e3a8 	.word	0x2003e3a8
   d4180:	2003df28 	.word	0x2003df28

000d4184 <_ZN16Adafruit_SSD1306D0Ev>:
   d4184:	b510      	push	{r4, lr}
   d4186:	2124      	movs	r1, #36	; 0x24
   d4188:	4604      	mov	r4, r0
   d418a:	f001 fe2b 	bl	d5de4 <_ZdlPvj>
   d418e:	4620      	mov	r0, r4
   d4190:	bd10      	pop	{r4, pc}
	...

000d4194 <_GLOBAL__sub_I_display>:
  display.setCursor(27,30);
  display.print("Hello, world!");

  // update display with all of the above graphics
  display.display();
   d4194:	b510      	push	{r4, lr}
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

// OLED display TWI address
#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1);
   d4196:	4c07      	ldr	r4, [pc, #28]	; (d41b4 <_GLOBAL__sub_I_display+0x20>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4198:	f000 feb4 	bl	d4f04 <HAL_Pin_Map>
   d419c:	f04f 31ff 	mov.w	r1, #4294967295
   d41a0:	4620      	mov	r0, r4
   d41a2:	f000 fb97 	bl	d48d4 <_ZN16Adafruit_SSD1306C1Ea>
   d41a6:	4620      	mov	r0, r4
   d41a8:	4a03      	ldr	r2, [pc, #12]	; (d41b8 <_GLOBAL__sub_I_display+0x24>)
   d41aa:	4904      	ldr	r1, [pc, #16]	; (d41bc <_GLOBAL__sub_I_display+0x28>)
  display.setCursor(27,30);
  display.print("Hello, world!");

  // update display with all of the above graphics
  display.display();
   d41ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

// OLED display TWI address
#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1);
   d41b0:	f001 be0b 	b.w	d5dca <__aeabi_atexit>
   d41b4:	2003e3a8 	.word	0x2003e3a8
   d41b8:	2003e3a4 	.word	0x2003e3a4
   d41bc:	000d40c5 	.word	0x000d40c5

000d41c0 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d41c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d41c4:	b085      	sub	sp, #20
   d41c6:	461e      	mov	r6, r3
   d41c8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d41cc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d41d0:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d41d2:	1a9a      	subs	r2, r3, r2
   d41d4:	2a00      	cmp	r2, #0
   d41d6:	bfb8      	it	lt
   d41d8:	4252      	neglt	r2, r2
   d41da:	9200      	str	r2, [sp, #0]
   d41dc:	1a72      	subs	r2, r6, r1
   d41de:	2a00      	cmp	r2, #0
   d41e0:	bfb8      	it	lt
   d41e2:	4252      	neglt	r2, r2
   d41e4:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d41e6:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d41e8:	9a00      	ldr	r2, [sp, #0]
   d41ea:	9901      	ldr	r1, [sp, #4]
   d41ec:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d41ee:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d41f0:	dd05      	ble.n	d41fe <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d41f2:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d41f4:	461e      	mov	r6, r3
   d41f6:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d41f8:	4622      	mov	r2, r4
    swap(x0, y0);
   d41fa:	462c      	mov	r4, r5
   d41fc:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d41fe:	42b4      	cmp	r4, r6
   d4200:	dd05      	ble.n	d420e <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d4202:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4204:	461d      	mov	r5, r3
   d4206:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4208:	4622      	mov	r2, r4
   d420a:	4634      	mov	r4, r6
   d420c:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d420e:	1b5a      	subs	r2, r3, r5
   d4210:	2a00      	cmp	r2, #0
   d4212:	bfb8      	it	lt
   d4214:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4216:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d421a:	429d      	cmp	r5, r3
   d421c:	bfb4      	ite	lt
   d421e:	2301      	movlt	r3, #1
   d4220:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4224:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4228:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d422a:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d422c:	fa0f f788 	sxth.w	r7, r8
   d4230:	2202      	movs	r2, #2
   d4232:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4236:	42b4      	cmp	r4, r6
   d4238:	dc1f      	bgt.n	d427a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d423a:	9a01      	ldr	r2, [sp, #4]
   d423c:	9b00      	ldr	r3, [sp, #0]
   d423e:	4293      	cmp	r3, r2
   d4240:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d4244:	bfc8      	it	gt
   d4246:	4622      	movgt	r2, r4
   d4248:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d424c:	bfc8      	it	gt
   d424e:	4629      	movgt	r1, r5
   d4250:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d4252:	bfdc      	itt	le
   d4254:	462a      	movle	r2, r5
   d4256:	4621      	movle	r1, r4
   d4258:	4648      	mov	r0, r9
   d425a:	47d8      	blx	fp
    }
    err -= dy;
   d425c:	9b03      	ldr	r3, [sp, #12]
   d425e:	1aff      	subs	r7, r7, r3
   d4260:	b2bb      	uxth	r3, r7
   d4262:	b21f      	sxth	r7, r3
    if (err < 0) {
   d4264:	2f00      	cmp	r7, #0
   d4266:	da05      	bge.n	d4274 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d4268:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d426a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d426e:	4415      	add	r5, r2
   d4270:	b22d      	sxth	r5, r5
      err += dx;
   d4272:	b23f      	sxth	r7, r7
   d4274:	3401      	adds	r4, #1
   d4276:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4278:	e7dd      	b.n	d4236 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d427a:	b005      	add	sp, #20
   d427c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4280 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4280:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4284:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4288:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d428a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d428e:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4290:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4292:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4294:	4691      	mov	r9, r2
   d4296:	460d      	mov	r5, r1
   d4298:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d429a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d429c:	6823      	ldr	r3, [r4, #0]
   d429e:	9600      	str	r6, [sp, #0]
   d42a0:	f10a 32ff 	add.w	r2, sl, #4294967295
   d42a4:	444a      	add	r2, r9
   d42a6:	69df      	ldr	r7, [r3, #28]
   d42a8:	4629      	mov	r1, r5
   d42aa:	4643      	mov	r3, r8
   d42ac:	4620      	mov	r0, r4
   d42ae:	b212      	sxth	r2, r2
   d42b0:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d42b2:	6823      	ldr	r3, [r4, #0]
   d42b4:	9600      	str	r6, [sp, #0]
   d42b6:	699f      	ldr	r7, [r3, #24]
   d42b8:	464a      	mov	r2, r9
   d42ba:	4653      	mov	r3, sl
   d42bc:	4629      	mov	r1, r5
   d42be:	4620      	mov	r0, r4
   d42c0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d42c2:	6823      	ldr	r3, [r4, #0]
   d42c4:	960a      	str	r6, [sp, #40]	; 0x28
   d42c6:	f108 31ff 	add.w	r1, r8, #4294967295
   d42ca:	4429      	add	r1, r5
   d42cc:	699d      	ldr	r5, [r3, #24]
   d42ce:	464a      	mov	r2, r9
   d42d0:	4653      	mov	r3, sl
   d42d2:	b209      	sxth	r1, r1
   d42d4:	4620      	mov	r0, r4
   d42d6:	46ac      	mov	ip, r5
}
   d42d8:	b002      	add	sp, #8
   d42da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d42de:	4760      	bx	ip

000d42e0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d42e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d42e2:	3b01      	subs	r3, #1
   d42e4:	4413      	add	r3, r2
   d42e6:	6804      	ldr	r4, [r0, #0]
   d42e8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d42ec:	9501      	str	r5, [sp, #4]
   d42ee:	b21b      	sxth	r3, r3
   d42f0:	9300      	str	r3, [sp, #0]
   d42f2:	6964      	ldr	r4, [r4, #20]
   d42f4:	460b      	mov	r3, r1
   d42f6:	47a0      	blx	r4
}
   d42f8:	b003      	add	sp, #12
   d42fa:	bd30      	pop	{r4, r5, pc}

000d42fc <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d42fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d42fe:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4302:	6804      	ldr	r4, [r0, #0]
   d4304:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4308:	3b01      	subs	r3, #1
   d430a:	440b      	add	r3, r1
   d430c:	6964      	ldr	r4, [r4, #20]
   d430e:	b21b      	sxth	r3, r3
   d4310:	47a0      	blx	r4
}
   d4312:	b003      	add	sp, #12
   d4314:	bd30      	pop	{r4, r5, pc}

000d4316 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4316:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d431a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d431e:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4322:	4605      	mov	r5, r0
   d4324:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4326:	460c      	mov	r4, r1
   d4328:	eb01 0a03 	add.w	sl, r1, r3
   d432c:	4554      	cmp	r4, sl
   d432e:	da0b      	bge.n	d4348 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4330:	682b      	ldr	r3, [r5, #0]
   d4332:	f8cd 9000 	str.w	r9, [sp]
   d4336:	699e      	ldr	r6, [r3, #24]
   d4338:	4621      	mov	r1, r4
   d433a:	4643      	mov	r3, r8
   d433c:	463a      	mov	r2, r7
   d433e:	4628      	mov	r0, r5
   d4340:	3401      	adds	r4, #1
   d4342:	47b0      	blx	r6
   d4344:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4346:	e7f1      	b.n	d432c <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4348:	b002      	add	sp, #8
   d434a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d434e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d434e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4350:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4354:	6804      	ldr	r4, [r0, #0]
   d4356:	9101      	str	r1, [sp, #4]
   d4358:	9200      	str	r2, [sp, #0]
   d435a:	2200      	movs	r2, #0
   d435c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4360:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d4362:	4611      	mov	r1, r2
   d4364:	47a0      	blx	r4
}
   d4366:	b002      	add	sp, #8
   d4368:	bd10      	pop	{r4, pc}

000d436a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d436a:	4770      	bx	lr

000d436c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d436c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d436e:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4370:	2400      	movs	r4, #0
   d4372:	4d08      	ldr	r5, [pc, #32]	; (d4394 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4374:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4376:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4378:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d437a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d437e:	2201      	movs	r2, #1
   d4380:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d4382:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4384:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4386:	8204      	strh	r4, [r0, #16]
   d4388:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d438a:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d438c:	82c1      	strh	r1, [r0, #22]
   d438e:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d4390:	7682      	strb	r2, [r0, #26]
}
   d4392:	bd30      	pop	{r4, r5, pc}
   d4394:	000d616c 	.word	0x000d616c

000d4398 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d439c:	b08f      	sub	sp, #60	; 0x3c
   d439e:	4605      	mov	r5, r0
   d43a0:	9106      	str	r1, [sp, #24]
   d43a2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d43a6:	9107      	str	r1, [sp, #28]
   d43a8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d43ac:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d43ae:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d43b2:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d43b4:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d43b8:	4281      	cmp	r1, r0
   d43ba:	dd7c      	ble.n	d44b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d43bc:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d43c0:	4291      	cmp	r1, r2
   d43c2:	dd78      	ble.n	d44b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d43c4:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d43c6:	fb11 0008 	smlabb	r0, r1, r8, r0
   d43ca:	2800      	cmp	r0, #0
   d43cc:	dd73      	ble.n	d44b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d43ce:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d43d2:	2800      	cmp	r0, #0
   d43d4:	dd6f      	ble.n	d44b6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d43d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d43da:	b296      	uxth	r6, r2
   d43dc:	930c      	str	r3, [sp, #48]	; 0x30
   d43de:	f106 0308 	add.w	r3, r6, #8
   d43e2:	b29b      	uxth	r3, r3
   d43e4:	9109      	str	r1, [sp, #36]	; 0x24
   d43e6:	2400      	movs	r4, #0
   d43e8:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d43ea:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d43ec:	bf1c      	itt	ne
   d43ee:	4b33      	ldrne	r3, [pc, #204]	; (d44bc <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d43f0:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d43f2:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d43f4:	bf16      	itet	ne
   d43f6:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d43f8:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d43fc:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4400:	9604      	str	r6, [sp, #16]
   d4402:	fa1f f388 	uxth.w	r3, r8
   d4406:	9303      	str	r3, [sp, #12]
   d4408:	9a03      	ldr	r2, [sp, #12]
   d440a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d440e:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4412:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4416:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4418:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d441a:	920a      	str	r2, [sp, #40]	; 0x28
   d441c:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d441e:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4422:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4424:	f019 0f01 	tst.w	r9, #1
   d4428:	d011      	beq.n	d444e <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d442a:	f1b8 0f01 	cmp.w	r8, #1
   d442e:	682b      	ldr	r3, [r5, #0]
   d4430:	d103      	bne.n	d443a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d4432:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4436:	9b07      	ldr	r3, [sp, #28]
   d4438:	e014      	b.n	d4464 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d443a:	9a07      	ldr	r2, [sp, #28]
   d443c:	9201      	str	r2, [sp, #4]
   d443e:	f8cd a000 	str.w	sl, [sp]
   d4442:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4446:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d444a:	4653      	mov	r3, sl
   d444c:	e018      	b.n	d4480 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d444e:	9b07      	ldr	r3, [sp, #28]
   d4450:	9a08      	ldr	r2, [sp, #32]
   d4452:	4293      	cmp	r3, r2
   d4454:	d017      	beq.n	d4486 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4456:	f1b8 0f01 	cmp.w	r8, #1
   d445a:	682b      	ldr	r3, [r5, #0]
   d445c:	d107      	bne.n	d446e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d445e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4462:	4613      	mov	r3, r2
   d4464:	b23a      	sxth	r2, r7
   d4466:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4468:	4628      	mov	r0, r5
   d446a:	47d8      	blx	fp
   d446c:	e00b      	b.n	d4486 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d446e:	9a08      	ldr	r2, [sp, #32]
   d4470:	9201      	str	r2, [sp, #4]
   d4472:	f8cd a000 	str.w	sl, [sp]
   d4476:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d447a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d447e:	4653      	mov	r3, sl
   d4480:	990a      	ldr	r1, [sp, #40]	; 0x28
   d4482:	4628      	mov	r0, r5
   d4484:	47d8      	blx	fp
   d4486:	9b04      	ldr	r3, [sp, #16]
   d4488:	9a03      	ldr	r2, [sp, #12]
   d448a:	4413      	add	r3, r2
   d448c:	b29b      	uxth	r3, r3
   d448e:	9304      	str	r3, [sp, #16]
   d4490:	9b05      	ldr	r3, [sp, #20]
   d4492:	4413      	add	r3, r2
   d4494:	b29b      	uxth	r3, r3
   d4496:	3701      	adds	r7, #1
   d4498:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d449a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d449c:	b2bf      	uxth	r7, r7
   d449e:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d44a0:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d44a4:	d1be      	bne.n	d4424 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d44a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d44a8:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d44aa:	3401      	adds	r4, #1
   d44ac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d44b0:	b264      	sxtb	r4, r4
   d44b2:	9309      	str	r3, [sp, #36]	; 0x24
   d44b4:	d199      	bne.n	d43ea <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d44b6:	b00f      	add	sp, #60	; 0x3c
   d44b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d44bc:	000d619c 	.word	0x000d619c

000d44c0 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d44c0:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d44c2:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d44c4:	b085      	sub	sp, #20
   d44c6:	4604      	mov	r4, r0
   d44c8:	460b      	mov	r3, r1

  if (c == '\n') {
   d44ca:	d104      	bne.n	d44d6 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d44cc:	7e02      	ldrb	r2, [r0, #24]
   d44ce:	8a43      	ldrh	r3, [r0, #18]
   d44d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d44d4:	e023      	b.n	d451e <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d44d6:	290d      	cmp	r1, #13
   d44d8:	d024      	beq.n	d4524 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d44da:	7e05      	ldrb	r5, [r0, #24]
   d44dc:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d44e0:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d44e4:	9502      	str	r5, [sp, #8]
   d44e6:	8ac5      	ldrh	r5, [r0, #22]
   d44e8:	9501      	str	r5, [sp, #4]
   d44ea:	8a85      	ldrh	r5, [r0, #20]
   d44ec:	9500      	str	r5, [sp, #0]
   d44ee:	f7ff ff53 	bl	d4398 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d44f2:	7e22      	ldrb	r2, [r4, #24]
   d44f4:	8a23      	ldrh	r3, [r4, #16]
   d44f6:	b291      	uxth	r1, r2
   d44f8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d44fc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4500:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d4502:	b21b      	sxth	r3, r3
   d4504:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4506:	b168      	cbz	r0, d4524 <_ZN12Adafruit_GFX5writeEh+0x64>
   d4508:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d450c:	f06f 0505 	mvn.w	r5, #5
   d4510:	fb05 0202 	mla	r2, r5, r2, r0
   d4514:	4293      	cmp	r3, r2
   d4516:	dd05      	ble.n	d4524 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4518:	8a63      	ldrh	r3, [r4, #18]
   d451a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d451e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4520:	2300      	movs	r3, #0
   d4522:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d4524:	2001      	movs	r0, #1
   d4526:	b005      	add	sp, #20
   d4528:	bd30      	pop	{r4, r5, pc}

000d452a <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d452a:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d452c:	8242      	strh	r2, [r0, #18]
   d452e:	4770      	bx	lr

000d4530 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d4530:	2900      	cmp	r1, #0
   d4532:	bf08      	it	eq
   d4534:	2101      	moveq	r1, #1
   d4536:	7601      	strb	r1, [r0, #24]
   d4538:	4770      	bx	lr

000d453a <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d453a:	82c1      	strh	r1, [r0, #22]
   d453c:	8281      	strh	r1, [r0, #20]
   d453e:	4770      	bx	lr

000d4540 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d4540:	7e40      	ldrb	r0, [r0, #25]
   d4542:	4770      	bx	lr

000d4544 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d4544:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4548:	4770      	bx	lr

000d454a <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d454a:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d454e:	4770      	bx	lr

000d4550 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4550:	f000 bcd8 	b.w	d4f04 <HAL_Pin_Map>

000d4554 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4554:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4556:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4558:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d455c:	2c02      	cmp	r4, #2
   d455e:	d008      	beq.n	d4572 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4560:	2c03      	cmp	r4, #3
   d4562:	d00f      	beq.n	d4584 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4564:	2c01      	cmp	r4, #1
   d4566:	d170      	bne.n	d464a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4568:	8904      	ldrh	r4, [r0, #8]
   d456a:	3c01      	subs	r4, #1
   d456c:	1aa2      	subs	r2, r4, r2
   d456e:	b212      	sxth	r2, r2
      break;
   d4570:	e00c      	b.n	d458c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4572:	8944      	ldrh	r4, [r0, #10]
   d4574:	3c01      	subs	r4, #1
   d4576:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4578:	8904      	ldrh	r4, [r0, #8]
   d457a:	1ae4      	subs	r4, r4, r3
   d457c:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d457e:	b212      	sxth	r2, r2
      x -= (w-1);
   d4580:	b209      	sxth	r1, r1
      break;
   d4582:	e062      	b.n	d464a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4584:	8944      	ldrh	r4, [r0, #10]
   d4586:	1ae4      	subs	r4, r4, r3
   d4588:	1a61      	subs	r1, r4, r1
   d458a:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d458c:	2a00      	cmp	r2, #0
   d458e:	db5b      	blt.n	d4648 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4590:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4594:	4294      	cmp	r4, r2
   d4596:	f340 8090 	ble.w	d46ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d459a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d459c:	bfbe      	ittt	lt
   d459e:	185b      	addlt	r3, r3, r1
   d45a0:	b21b      	sxthlt	r3, r3
    __y = 0;
   d45a2:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d45a4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d45a8:	18cc      	adds	r4, r1, r3
   d45aa:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d45ac:	bfc4      	itt	gt
   d45ae:	1a43      	subgt	r3, r0, r1
   d45b0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d45b2:	2b00      	cmp	r3, #0
   d45b4:	f340 8081 	ble.w	d46ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d45b8:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d45ba:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d45bc:	4f3f      	ldr	r7, [pc, #252]	; (d46bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d45be:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d45c2:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d45c6:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d45c8:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d45cc:	d017      	beq.n	d45fe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d45ce:	f1c1 0108 	rsb	r1, r1, #8
   d45d2:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d45d4:	493a      	ldr	r1, [pc, #232]	; (d46c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d45d6:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d45d8:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d45da:	bf3f      	itttt	cc
   d45dc:	ebc3 0e00 	rsbcc	lr, r3, r0
   d45e0:	21ff      	movcc	r1, #255	; 0xff
   d45e2:	fa41 f10e 	asrcc.w	r1, r1, lr
   d45e6:	400e      	andcc	r6, r1
   d45e8:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d45ea:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d45ec:	bf0c      	ite	eq
   d45ee:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d45f0:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d45f2:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d45f4:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d45f6:	d360      	bcc.n	d46ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d45f8:	1a18      	subs	r0, r3, r0
   d45fa:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d45fc:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d45fe:	2b07      	cmp	r3, #7
   d4600:	d917      	bls.n	d4632 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4602:	2d01      	cmp	r5, #1
   d4604:	bf0c      	ite	eq
   d4606:	20ff      	moveq	r0, #255	; 0xff
   d4608:	2000      	movne	r0, #0
   d460a:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d460e:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4610:	3a08      	subs	r2, #8
   d4612:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4614:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4616:	f801 0c80 	strb.w	r0, [r1, #-128]
   d461a:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d461e:	d8f7      	bhi.n	d4610 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4620:	f1a3 0208 	sub.w	r2, r3, #8
   d4624:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4628:	3201      	adds	r2, #1
   d462a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d462e:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4632:	2b00      	cmp	r3, #0
   d4634:	d041      	beq.n	d46ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4636:	4a23      	ldr	r2, [pc, #140]	; (d46c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4638:	5cd2      	ldrb	r2, [r2, r3]
   d463a:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d463c:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d463e:	bf0c      	ite	eq
   d4640:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4642:	4393      	bicne	r3, r2
   d4644:	7023      	strb	r3, [r4, #0]
   d4646:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4648:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d464a:	2a00      	cmp	r2, #0
   d464c:	db35      	blt.n	d46ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d464e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4652:	4294      	cmp	r4, r2
   d4654:	dd31      	ble.n	d46ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4656:	2900      	cmp	r1, #0
    w += x;
   d4658:	bfbc      	itt	lt
   d465a:	18c9      	addlt	r1, r1, r3
   d465c:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d465e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4662:	bfb8      	it	lt
   d4664:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4666:	18ce      	adds	r6, r1, r3
   d4668:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d466a:	bfc4      	itt	gt
   d466c:	1a63      	subgt	r3, r4, r1
   d466e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4670:	2b00      	cmp	r3, #0
   d4672:	dd22      	ble.n	d46ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4674:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4676:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d467a:	4810      	ldr	r0, [pc, #64]	; (d46bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d467c:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4680:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d4682:	2001      	movs	r0, #1
   d4684:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4688:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d468a:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d468c:	d109      	bne.n	d46a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d468e:	3b01      	subs	r3, #1
   d4690:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d4692:	1c5c      	adds	r4, r3, #1
   d4694:	d011      	beq.n	d46ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4696:	f811 0b01 	ldrb.w	r0, [r1], #1
   d469a:	4310      	orrs	r0, r2
   d469c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d46a0:	e7f5      	b.n	d468e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d46a2:	43d2      	mvns	r2, r2
   d46a4:	b2d2      	uxtb	r2, r2
   d46a6:	3b01      	subs	r3, #1
   d46a8:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d46aa:	1c58      	adds	r0, r3, #1
   d46ac:	d005      	beq.n	d46ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d46ae:	f811 0b01 	ldrb.w	r0, [r1], #1
   d46b2:	4010      	ands	r0, r2
   d46b4:	f801 0c01 	strb.w	r0, [r1, #-1]
   d46b8:	e7f5      	b.n	d46a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d46ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46bc:	2003df3c 	.word	0x2003df3c
   d46c0:	2003df34 	.word	0x2003df34
   d46c4:	2003df2c 	.word	0x2003df2c

000d46c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d46c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d46ca:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d46cc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d46d0:	2c02      	cmp	r4, #2
   d46d2:	d008      	beq.n	d46e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d46d4:	2c03      	cmp	r4, #3
   d46d6:	d00f      	beq.n	d46f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d46d8:	2c01      	cmp	r4, #1
   d46da:	d112      	bne.n	d4702 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d46dc:	8904      	ldrh	r4, [r0, #8]
   d46de:	1ae4      	subs	r4, r4, r3
   d46e0:	1aa2      	subs	r2, r4, r2
   d46e2:	b212      	sxth	r2, r2
      break;
   d46e4:	e06d      	b.n	d47c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d46e6:	8904      	ldrh	r4, [r0, #8]
   d46e8:	3c01      	subs	r4, #1
   d46ea:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d46ec:	8944      	ldrh	r4, [r0, #10]
   d46ee:	1ae4      	subs	r4, r4, r3
   d46f0:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d46f2:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d46f4:	b212      	sxth	r2, r2
      break;
   d46f6:	e004      	b.n	d4702 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d46f8:	8944      	ldrh	r4, [r0, #10]
   d46fa:	3c01      	subs	r4, #1
   d46fc:	1a61      	subs	r1, r4, r1
   d46fe:	b209      	sxth	r1, r1
      break;
   d4700:	e05f      	b.n	d47c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4702:	2900      	cmp	r1, #0
   d4704:	db5c      	blt.n	d47c0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4706:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d470a:	428c      	cmp	r4, r1
   d470c:	f340 8091 	ble.w	d4832 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4710:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4712:	bfbc      	itt	lt
   d4714:	18d2      	addlt	r2, r2, r3
   d4716:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4718:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d471c:	bfb8      	it	lt
   d471e:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4720:	18d4      	adds	r4, r2, r3
   d4722:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4724:	bfc4      	itt	gt
   d4726:	1a83      	subgt	r3, r0, r2
   d4728:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d472a:	2b00      	cmp	r3, #0
   d472c:	f340 8081 	ble.w	d4832 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4730:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4732:	4e40      	ldr	r6, [pc, #256]	; (d4834 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4734:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4736:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4738:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d473c:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4740:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4744:	d017      	beq.n	d4776 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4746:	f1c4 0408 	rsb	r4, r4, #8
   d474a:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d474c:	4c3a      	ldr	r4, [pc, #232]	; (d4838 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d474e:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4750:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4752:	bf3f      	itttt	cc
   d4754:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4758:	24ff      	movcc	r4, #255	; 0xff
   d475a:	fa44 f40e 	asrcc.w	r4, r4, lr
   d475e:	4027      	andcc	r7, r4
   d4760:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d4762:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4764:	bf0c      	ite	eq
   d4766:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4768:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d476a:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d476c:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d476e:	d360      	bcc.n	d4832 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4770:	1a10      	subs	r0, r2, r0
   d4772:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4774:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4776:	2a07      	cmp	r2, #7
   d4778:	d917      	bls.n	d47aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d477a:	2d01      	cmp	r5, #1
   d477c:	bf0c      	ite	eq
   d477e:	24ff      	moveq	r4, #255	; 0xff
   d4780:	2400      	movne	r4, #0
   d4782:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d4786:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4788:	3908      	subs	r1, #8
   d478a:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d478c:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d478e:	f800 4c80 	strb.w	r4, [r0, #-128]
   d4792:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4796:	d8f7      	bhi.n	d4788 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4798:	f1a2 0108 	sub.w	r1, r2, #8
   d479c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d47a0:	3101      	adds	r1, #1
   d47a2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d47a6:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d47aa:	2a00      	cmp	r2, #0
   d47ac:	d041      	beq.n	d4832 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d47ae:	4923      	ldr	r1, [pc, #140]	; (d483c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d47b0:	5c89      	ldrb	r1, [r1, r2]
   d47b2:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d47b4:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d47b6:	bf0c      	ite	eq
   d47b8:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d47ba:	438a      	bicne	r2, r1
   d47bc:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d47be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d47c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d47c2:	2900      	cmp	r1, #0
   d47c4:	db35      	blt.n	d4832 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d47c6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d47ca:	428c      	cmp	r4, r1
   d47cc:	dd31      	ble.n	d4832 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d47ce:	2a00      	cmp	r2, #0
    w += x;
   d47d0:	bfbc      	itt	lt
   d47d2:	18d2      	addlt	r2, r2, r3
   d47d4:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d47d6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d47da:	bfb8      	it	lt
   d47dc:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d47de:	18d6      	adds	r6, r2, r3
   d47e0:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d47e2:	bfc4      	itt	gt
   d47e4:	1aa3      	subgt	r3, r4, r2
   d47e6:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d47e8:	2b00      	cmp	r3, #0
   d47ea:	dd22      	ble.n	d4832 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d47ec:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d47ee:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d47f2:	4810      	ldr	r0, [pc, #64]	; (d4834 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d47f4:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d47f8:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d47fa:	2201      	movs	r2, #1
   d47fc:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d4800:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4802:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d4804:	d109      	bne.n	d481a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d4806:	1e5a      	subs	r2, r3, #1
   d4808:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d480a:	1c5c      	adds	r4, r3, #1
   d480c:	d011      	beq.n	d4832 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d480e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4812:	430a      	orrs	r2, r1
   d4814:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4818:	e7f5      	b.n	d4806 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d481a:	43c9      	mvns	r1, r1
   d481c:	b2c9      	uxtb	r1, r1
   d481e:	1e5a      	subs	r2, r3, #1
   d4820:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d4822:	1c5a      	adds	r2, r3, #1
   d4824:	d005      	beq.n	d4832 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4826:	f810 2b01 	ldrb.w	r2, [r0], #1
   d482a:	400a      	ands	r2, r1
   d482c:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4830:	e7f5      	b.n	d481e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d4832:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4834:	2003df3c 	.word	0x2003df3c
   d4838:	2003df34 	.word	0x2003df34
   d483c:	2003df2c 	.word	0x2003df2c

000d4840 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4842:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4844:	4606      	mov	r6, r0
   d4846:	4614      	mov	r4, r2
   d4848:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d484a:	db3f      	blt.n	d48cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d484c:	f7ff fe7a 	bl	d4544 <_ZN12Adafruit_GFX5widthEv>
   d4850:	4285      	cmp	r5, r0
   d4852:	da3b      	bge.n	d48cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4854:	2c00      	cmp	r4, #0
   d4856:	db39      	blt.n	d48cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4858:	4630      	mov	r0, r6
   d485a:	f7ff fe76 	bl	d454a <_ZN12Adafruit_GFX6heightEv>
   d485e:	4284      	cmp	r4, r0
   d4860:	da34      	bge.n	d48cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4862:	4630      	mov	r0, r6
   d4864:	f7ff fe6c 	bl	d4540 <_ZN12Adafruit_GFX11getRotationEv>
   d4868:	2802      	cmp	r0, #2
   d486a:	d127      	bne.n	d48bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d486c:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d486e:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4870:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d4872:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4874:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d4876:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4878:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d487a:	b204      	sxth	r4, r0
   d487c:	e006      	b.n	d488c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d487e:	2801      	cmp	r0, #1
   d4880:	d104      	bne.n	d488c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d4882:	8933      	ldrh	r3, [r6, #8]
   d4884:	3b01      	subs	r3, #1
   d4886:	1b1b      	subs	r3, r3, r4
   d4888:	462c      	mov	r4, r5
   d488a:	b21d      	sxth	r5, r3
   d488c:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d488e:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4890:	fb94 f0f0 	sdiv	r0, r4, r0
   d4894:	b200      	sxth	r0, r0
   d4896:	4b0e      	ldr	r3, [pc, #56]	; (d48d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4898:	f004 0207 	and.w	r2, r4, #7
   d489c:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d48a0:	d104      	bne.n	d48ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d48a2:	4097      	lsls	r7, r2
   d48a4:	5c5a      	ldrb	r2, [r3, r1]
   d48a6:	4317      	orrs	r7, r2
   d48a8:	545f      	strb	r7, [r3, r1]
   d48aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d48ac:	5c58      	ldrb	r0, [r3, r1]
   d48ae:	2701      	movs	r7, #1
   d48b0:	fa07 f202 	lsl.w	r2, r7, r2
   d48b4:	ea20 0202 	bic.w	r2, r0, r2
   d48b8:	545a      	strb	r2, [r3, r1]
   d48ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d48bc:	2803      	cmp	r0, #3
   d48be:	d1de      	bne.n	d487e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d48c0:	8973      	ldrh	r3, [r6, #10]
   d48c2:	3b01      	subs	r3, #1
   d48c4:	1b5b      	subs	r3, r3, r5
   d48c6:	4625      	mov	r5, r4
   d48c8:	b21c      	sxth	r4, r3
   d48ca:	e7df      	b.n	d488c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d48cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d48ce:	bf00      	nop
   d48d0:	2003df3c 	.word	0x2003df3c

000d48d4 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d48d4:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d48d6:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d48d8:	4604      	mov	r4, r0
   d48da:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d48dc:	2180      	movs	r1, #128	; 0x80
   d48de:	f7ff fd45 	bl	d436c <_ZN12Adafruit_GFXC1Ess>
   d48e2:	4b06      	ldr	r3, [pc, #24]	; (d48fc <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d48e4:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d48e6:	23ff      	movs	r3, #255	; 0xff
   d48e8:	7763      	strb	r3, [r4, #29]
   d48ea:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d48ee:	77e3      	strb	r3, [r4, #31]
   d48f0:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d48f2:	f884 5020 	strb.w	r5, [r4, #32]
}
   d48f6:	4620      	mov	r0, r4
   d48f8:	bd38      	pop	{r3, r4, r5, pc}
   d48fa:	bf00      	nop
   d48fc:	000d66a0 	.word	0x000d66a0

000d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4900:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d4902:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4906:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d4908:	4604      	mov	r4, r0
   d490a:	460d      	mov	r5, r1
  if (sid != -1)
   d490c:	d028      	beq.n	d4960 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d490e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d4912:	2101      	movs	r1, #1
   d4914:	b280      	uxth	r0, r0
   d4916:	f001 fa1c 	bl	d5d52 <digitalWrite>
    digitalWrite(dc, LOW);
   d491a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d491e:	2100      	movs	r1, #0
   d4920:	b280      	uxth	r0, r0
   d4922:	f001 fa16 	bl	d5d52 <digitalWrite>
    digitalWrite(cs, LOW);
   d4926:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d492a:	2100      	movs	r1, #0
   d492c:	b280      	uxth	r0, r0
   d492e:	f001 fa10 	bl	d5d52 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4932:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4936:	b12b      	cbz	r3, d4944 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    (void)SPI.transfer(d);
   d4938:	f001 f9b8 	bl	d5cac <_ZN8particle7globals11instanceSpiEv>
   d493c:	4629      	mov	r1, r5
   d493e:	f000 fe01 	bl	d5544 <_ZN8SPIClass8transferEh>
   d4942:	e005      	b.n	d4950 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4944:	462b      	mov	r3, r5
   d4946:	2201      	movs	r2, #1
   d4948:	7fa1      	ldrb	r1, [r4, #30]
   d494a:	7f60      	ldrb	r0, [r4, #29]
   d494c:	f001 fa1a 	bl	d5d84 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4950:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4954:	2101      	movs	r1, #1
   d4956:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d495c:	f001 b9f9 	b.w	d5d52 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d4960:	f001 f97e 	bl	d5c60 <_Z19__fetch_global_Wirev>
   d4964:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4968:	f000 fe4a 	bl	d5600 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d496c:	f001 f978 	bl	d5c60 <_Z19__fetch_global_Wirev>
   d4970:	6803      	ldr	r3, [r0, #0]
   d4972:	2100      	movs	r1, #0
   d4974:	689b      	ldr	r3, [r3, #8]
   d4976:	4798      	blx	r3
    Wire.write(c);
   d4978:	f001 f972 	bl	d5c60 <_Z19__fetch_global_Wirev>
   d497c:	6803      	ldr	r3, [r0, #0]
   d497e:	4629      	mov	r1, r5
   d4980:	689b      	ldr	r3, [r3, #8]
   d4982:	4798      	blx	r3
    Wire.endTransmission();
   d4984:	f001 f96c 	bl	d5c60 <_Z19__fetch_global_Wirev>
  }
}
   d4988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d498c:	f000 be3f 	b.w	d560e <_ZN7TwoWire15endTransmissionEv>

000d4990 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4990:	b538      	push	{r3, r4, r5, lr}
   d4992:	4604      	mov	r4, r0
   d4994:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4996:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4998:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d499c:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d499e:	3301      	adds	r3, #1
   d49a0:	d037      	beq.n	d4a12 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d49a2:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d49a6:	2101      	movs	r1, #1
   d49a8:	b280      	uxth	r0, r0
   d49aa:	f001 f9c1 	bl	d5d30 <pinMode>
    pinMode(cs, OUTPUT);
   d49ae:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d49b2:	2101      	movs	r1, #1
   d49b4:	b280      	uxth	r0, r0
   d49b6:	f001 f9bb 	bl	d5d30 <pinMode>
    if (!hwSPI){
   d49ba:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d49be:	b95b      	cbnz	r3, d49d8 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d49c0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d49c4:	2101      	movs	r1, #1
   d49c6:	b280      	uxth	r0, r0
   d49c8:	f001 f9b2 	bl	d5d30 <pinMode>
    	pinMode(sclk, OUTPUT);
   d49cc:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d49d0:	2101      	movs	r1, #1
   d49d2:	b280      	uxth	r0, r0
   d49d4:	f001 f9ac 	bl	d5d30 <pinMode>
    	}
    if (hwSPI){
   d49d8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d49dc:	b1eb      	cbz	r3, d4a1a <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d49de:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d49e2:	2101      	movs	r1, #1
   d49e4:	b280      	uxth	r0, r0
   d49e6:	f001 f9b4 	bl	d5d52 <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
   d49ea:	f001 f95f 	bl	d5cac <_ZN8particle7globals11instanceSpiEv>
   d49ee:	2101      	movs	r1, #1
   d49f0:	f000 fd19 	bl	d5426 <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
   d49f4:	f001 f95a 	bl	d5cac <_ZN8particle7globals11instanceSpiEv>
   d49f8:	2110      	movs	r1, #16
   d49fa:	f000 fd7f 	bl	d54fc <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
   d49fe:	f001 f955 	bl	d5cac <_ZN8particle7globals11instanceSpiEv>
   d4a02:	2100      	movs	r1, #0
   d4a04:	f000 fd20 	bl	d5448 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
   d4a08:	f001 f950 	bl	d5cac <_ZN8particle7globals11instanceSpiEv>
   d4a0c:	f000 fcfa 	bl	d5404 <_ZN8SPIClass5beginEv>
   d4a10:	e003      	b.n	d4a1a <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d4a12:	f001 f925 	bl	d5c60 <_Z19__fetch_global_Wirev>
   d4a16:	f000 fde9 	bl	d55ec <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4a1a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4a1e:	2101      	movs	r1, #1
   d4a20:	b280      	uxth	r0, r0
   d4a22:	f001 f985 	bl	d5d30 <pinMode>
  digitalWrite(rst, HIGH);
   d4a26:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4a2a:	2101      	movs	r1, #1
   d4a2c:	b280      	uxth	r0, r0
   d4a2e:	f001 f990 	bl	d5d52 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d4a32:	2001      	movs	r0, #1
   d4a34:	f000 fef5 	bl	d5822 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d4a38:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4a3c:	2100      	movs	r1, #0
   d4a3e:	b280      	uxth	r0, r0
   d4a40:	f001 f987 	bl	d5d52 <digitalWrite>
  // wait 10ms
  delay(10);
   d4a44:	200a      	movs	r0, #10
   d4a46:	f000 feec 	bl	d5822 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4a4a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4a4e:	2101      	movs	r1, #1
   d4a50:	b280      	uxth	r0, r0
   d4a52:	f001 f97e 	bl	d5d52 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4a56:	4620      	mov	r0, r4
   d4a58:	21ae      	movs	r1, #174	; 0xae
   d4a5a:	f7ff ff51 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4a5e:	4620      	mov	r0, r4
   d4a60:	21d5      	movs	r1, #213	; 0xd5
   d4a62:	f7ff ff4d 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4a66:	4620      	mov	r0, r4
   d4a68:	2180      	movs	r1, #128	; 0x80
   d4a6a:	f7ff ff49 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4a6e:	4620      	mov	r0, r4
   d4a70:	21a8      	movs	r1, #168	; 0xa8
   d4a72:	f7ff ff45 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4a76:	4620      	mov	r0, r4
   d4a78:	213f      	movs	r1, #63	; 0x3f
   d4a7a:	f7ff ff41 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4a7e:	4620      	mov	r0, r4
   d4a80:	21d3      	movs	r1, #211	; 0xd3
   d4a82:	f7ff ff3d 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4a86:	4620      	mov	r0, r4
   d4a88:	2100      	movs	r1, #0
   d4a8a:	f7ff ff39 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4a8e:	4620      	mov	r0, r4
   d4a90:	2140      	movs	r1, #64	; 0x40
   d4a92:	f7ff ff35 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4a96:	218d      	movs	r1, #141	; 0x8d
   d4a98:	4620      	mov	r0, r4
   d4a9a:	f7ff ff31 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4a9e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4aa0:	bf0c      	ite	eq
   d4aa2:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d4aa4:	2114      	movne	r1, #20
   d4aa6:	4620      	mov	r0, r4
   d4aa8:	f7ff ff2a 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4aac:	4620      	mov	r0, r4
   d4aae:	2120      	movs	r1, #32
   d4ab0:	f7ff ff26 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4ab4:	4620      	mov	r0, r4
   d4ab6:	2100      	movs	r1, #0
   d4ab8:	f7ff ff22 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4abc:	4620      	mov	r0, r4
   d4abe:	21a1      	movs	r1, #161	; 0xa1
   d4ac0:	f7ff ff1e 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	21c8      	movs	r1, #200	; 0xc8
   d4ac8:	f7ff ff1a 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4acc:	4620      	mov	r0, r4
   d4ace:	21da      	movs	r1, #218	; 0xda
   d4ad0:	f7ff ff16 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	2112      	movs	r1, #18
   d4ad8:	f7ff ff12 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d4adc:	2181      	movs	r1, #129	; 0x81
   d4ade:	4620      	mov	r0, r4
   d4ae0:	f7ff ff0e 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4ae4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d4ae6:	bf0c      	ite	eq
   d4ae8:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d4aea:	21cf      	movne	r1, #207	; 0xcf
   d4aec:	4620      	mov	r0, r4
   d4aee:	f7ff ff07 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d4af2:	21d9      	movs	r1, #217	; 0xd9
   d4af4:	4620      	mov	r0, r4
   d4af6:	f7ff ff03 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4afa:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d4afc:	bf0c      	ite	eq
   d4afe:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d4b00:	21f1      	movne	r1, #241	; 0xf1
   d4b02:	4620      	mov	r0, r4
   d4b04:	f7ff fefc 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d4b08:	4620      	mov	r0, r4
   d4b0a:	21db      	movs	r1, #219	; 0xdb
   d4b0c:	f7ff fef8 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d4b10:	4620      	mov	r0, r4
   d4b12:	2140      	movs	r1, #64	; 0x40
   d4b14:	f7ff fef4 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4b18:	4620      	mov	r0, r4
   d4b1a:	21a4      	movs	r1, #164	; 0xa4
   d4b1c:	f7ff fef0 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d4b20:	4620      	mov	r0, r4
   d4b22:	21a6      	movs	r1, #166	; 0xa6
   d4b24:	f7ff feec 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4b28:	4620      	mov	r0, r4
   d4b2a:	21af      	movs	r1, #175	; 0xaf
}
   d4b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4b30:	f7ff bee6 	b.w	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d4b34 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4b38:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4b3a:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4b3c:	f7ff fee0 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4b40:	2100      	movs	r1, #0
   d4b42:	4620      	mov	r0, r4
   d4b44:	f7ff fedc 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4b48:	217f      	movs	r1, #127	; 0x7f
   d4b4a:	4620      	mov	r0, r4
   d4b4c:	f7ff fed8 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d4b50:	2122      	movs	r1, #34	; 0x22
   d4b52:	4620      	mov	r0, r4
   d4b54:	f7ff fed4 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4b58:	2100      	movs	r1, #0
   d4b5a:	4620      	mov	r0, r4
   d4b5c:	f7ff fed0 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4b60:	2107      	movs	r1, #7
   d4b62:	4620      	mov	r0, r4
   d4b64:	f7ff fecc 	bl	d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d4b68:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4b6c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d4c2c <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d4b70:	3301      	adds	r3, #1
   d4b72:	d035      	beq.n	d4be0 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4b74:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4b78:	2101      	movs	r1, #1
   d4b7a:	b280      	uxth	r0, r0
   d4b7c:	f001 f8e9 	bl	d5d52 <digitalWrite>
    digitalWrite(dc, HIGH);
   d4b80:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4b84:	2101      	movs	r1, #1
   d4b86:	b280      	uxth	r0, r0
   d4b88:	f001 f8e3 	bl	d5d52 <digitalWrite>
    digitalWrite(cs, LOW);
   d4b8c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4b90:	2100      	movs	r1, #0
   d4b92:	b280      	uxth	r0, r0
   d4b94:	f001 f8dd 	bl	d5d52 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4b98:	2001      	movs	r0, #1
   d4b9a:	f000 f953 	bl	d4e44 <HAL_Delay_Microseconds>
   d4b9e:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4ba0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d4ba4:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4ba8:	b12b      	cbz	r3, d4bb6 <_ZN16Adafruit_SSD13067displayEv+0x82>
    (void)SPI.transfer(d);
   d4baa:	f001 f87f 	bl	d5cac <_ZN8particle7globals11instanceSpiEv>
   d4bae:	4631      	mov	r1, r6
   d4bb0:	f000 fcc8 	bl	d5544 <_ZN8SPIClass8transferEh>
   d4bb4:	e005      	b.n	d4bc2 <_ZN16Adafruit_SSD13067displayEv+0x8e>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4bb6:	4633      	mov	r3, r6
   d4bb8:	2201      	movs	r2, #1
   d4bba:	7fa1      	ldrb	r1, [r4, #30]
   d4bbc:	7f60      	ldrb	r0, [r4, #29]
   d4bbe:	f001 f8e1 	bl	d5d84 <shiftOut>
   d4bc2:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4bc4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4bc8:	d1ea      	bne.n	d4ba0 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d4bca:	2001      	movs	r0, #1
   d4bcc:	f000 f93a 	bl	d4e44 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4bd0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4bd4:	2101      	movs	r1, #1
   d4bd6:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4bdc:	f001 b8b9 	b.w	d5d52 <digitalWrite>
   d4be0:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d4be2:	f001 f83d 	bl	d5c60 <_Z19__fetch_global_Wirev>
   d4be6:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4bea:	f000 fd09 	bl	d5600 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4bee:	f001 f837 	bl	d5c60 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4bf2:	6803      	ldr	r3, [r0, #0]
   d4bf4:	2140      	movs	r1, #64	; 0x40
   d4bf6:	689b      	ldr	r3, [r3, #8]
   d4bf8:	4798      	blx	r3
   d4bfa:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d4bfc:	f001 f830 	bl	d5c60 <_Z19__fetch_global_Wirev>
   d4c00:	19af      	adds	r7, r5, r6
   d4c02:	6803      	ldr	r3, [r0, #0]
   d4c04:	b2bf      	uxth	r7, r7
   d4c06:	689b      	ldr	r3, [r3, #8]
   d4c08:	f818 1007 	ldrb.w	r1, [r8, r7]
   d4c0c:	3601      	adds	r6, #1
   d4c0e:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d4c10:	2e10      	cmp	r6, #16
   d4c12:	d1f3      	bne.n	d4bfc <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d4c14:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d4c16:	f001 f823 	bl	d5c60 <_Z19__fetch_global_Wirev>
   d4c1a:	b2ad      	uxth	r5, r5
   d4c1c:	f000 fcf7 	bl	d560e <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4c20:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4c24:	d1dd      	bne.n	d4be2 <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4c2a:	bf00      	nop
   d4c2c:	2003df3c 	.word	0x2003df3c

000d4c30 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4c34:	2100      	movs	r1, #0
   d4c36:	4801      	ldr	r0, [pc, #4]	; (d4c3c <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4c38:	f001 ba49 	b.w	d60ce <memset>
   d4c3c:	2003df3c 	.word	0x2003df3c

000d4c40 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4c40:	f000 b960 	b.w	d4f04 <HAL_Pin_Map>

000d4c44 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b02      	ldr	r3, [pc, #8]	; (d4c50 <HAL_USB_USART_Init+0xc>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	681b      	ldr	r3, [r3, #0]
   d4c4c:	9301      	str	r3, [sp, #4]
   d4c4e:	bd08      	pop	{r3, pc}
   d4c50:	0003024c 	.word	0x0003024c

000d4c54 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4c54:	b508      	push	{r3, lr}
   d4c56:	4b02      	ldr	r3, [pc, #8]	; (d4c60 <HAL_USB_USART_Begin+0xc>)
   d4c58:	681b      	ldr	r3, [r3, #0]
   d4c5a:	685b      	ldr	r3, [r3, #4]
   d4c5c:	9301      	str	r3, [sp, #4]
   d4c5e:	bd08      	pop	{r3, pc}
   d4c60:	0003024c 	.word	0x0003024c

000d4c64 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4c64:	b508      	push	{r3, lr}
   d4c66:	4b02      	ldr	r3, [pc, #8]	; (d4c70 <HAL_USB_USART_Available_Data+0xc>)
   d4c68:	681b      	ldr	r3, [r3, #0]
   d4c6a:	691b      	ldr	r3, [r3, #16]
   d4c6c:	9301      	str	r3, [sp, #4]
   d4c6e:	bd08      	pop	{r3, pc}
   d4c70:	0003024c 	.word	0x0003024c

000d4c74 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4c74:	b508      	push	{r3, lr}
   d4c76:	4b02      	ldr	r3, [pc, #8]	; (d4c80 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4c78:	681b      	ldr	r3, [r3, #0]
   d4c7a:	695b      	ldr	r3, [r3, #20]
   d4c7c:	9301      	str	r3, [sp, #4]
   d4c7e:	bd08      	pop	{r3, pc}
   d4c80:	0003024c 	.word	0x0003024c

000d4c84 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c84:	b508      	push	{r3, lr}
   d4c86:	4b02      	ldr	r3, [pc, #8]	; (d4c90 <HAL_USB_USART_Receive_Data+0xc>)
   d4c88:	681b      	ldr	r3, [r3, #0]
   d4c8a:	699b      	ldr	r3, [r3, #24]
   d4c8c:	9301      	str	r3, [sp, #4]
   d4c8e:	bd08      	pop	{r3, pc}
   d4c90:	0003024c 	.word	0x0003024c

000d4c94 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b02      	ldr	r3, [pc, #8]	; (d4ca0 <HAL_USB_USART_Send_Data+0xc>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	69db      	ldr	r3, [r3, #28]
   d4c9c:	9301      	str	r3, [sp, #4]
   d4c9e:	bd08      	pop	{r3, pc}
   d4ca0:	0003024c 	.word	0x0003024c

000d4ca4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ca4:	b508      	push	{r3, lr}
   d4ca6:	4b02      	ldr	r3, [pc, #8]	; (d4cb0 <HAL_USB_USART_Flush_Data+0xc>)
   d4ca8:	681b      	ldr	r3, [r3, #0]
   d4caa:	6a1b      	ldr	r3, [r3, #32]
   d4cac:	9301      	str	r3, [sp, #4]
   d4cae:	bd08      	pop	{r3, pc}
   d4cb0:	0003024c 	.word	0x0003024c

000d4cb4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4cb4:	b508      	push	{r3, lr}
   d4cb6:	4b02      	ldr	r3, [pc, #8]	; (d4cc0 <HAL_I2C_Begin+0xc>)
   d4cb8:	681b      	ldr	r3, [r3, #0]
   d4cba:	68db      	ldr	r3, [r3, #12]
   d4cbc:	9301      	str	r3, [sp, #4]
   d4cbe:	bd08      	pop	{r3, pc}
   d4cc0:	00030228 	.word	0x00030228

000d4cc4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <HAL_I2C_Begin_Transmission+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	699b      	ldr	r3, [r3, #24]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030228 	.word	0x00030228

000d4cd4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <HAL_I2C_End_Transmission+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	69db      	ldr	r3, [r3, #28]
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030228 	.word	0x00030228

000d4ce4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <HAL_I2C_Write_Data+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	6a1b      	ldr	r3, [r3, #32]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030228 	.word	0x00030228

000d4cf4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <HAL_I2C_Available_Data+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030228 	.word	0x00030228

000d4d04 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_I2C_Read_Data+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030228 	.word	0x00030228

000d4d14 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <HAL_I2C_Peek_Data+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030228 	.word	0x00030228

000d4d24 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <HAL_I2C_Flush_Data+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030228 	.word	0x00030228

000d4d34 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <HAL_I2C_Is_Enabled+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030228 	.word	0x00030228

000d4d44 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <HAL_I2C_Init+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030228 	.word	0x00030228

000d4d54 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <HAL_USART_Init+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	681b      	ldr	r3, [r3, #0]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	0003023c 	.word	0x0003023c

000d4d64 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <HAL_USART_Write_Data+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	68db      	ldr	r3, [r3, #12]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	0003023c 	.word	0x0003023c

000d4d74 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <HAL_USART_Available_Data+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	691b      	ldr	r3, [r3, #16]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	0003023c 	.word	0x0003023c

000d4d84 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <HAL_USART_Read_Data+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	695b      	ldr	r3, [r3, #20]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003023c 	.word	0x0003023c

000d4d94 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <HAL_USART_Peek_Data+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	699b      	ldr	r3, [r3, #24]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003023c 	.word	0x0003023c

000d4da4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <HAL_USART_Flush_Data+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	69db      	ldr	r3, [r3, #28]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	0003023c 	.word	0x0003023c

000d4db4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <HAL_USART_Is_Enabled+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	6a1b      	ldr	r3, [r3, #32]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	0003023c 	.word	0x0003023c

000d4dc4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <HAL_USART_Available_Data_For_Write+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	0003023c 	.word	0x0003023c

000d4dd4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <inet_inet_ntop+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	695b      	ldr	r3, [r3, #20]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030264 	.word	0x00030264

000d4de4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <os_thread_is_current+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	689b      	ldr	r3, [r3, #8]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030248 	.word	0x00030248

000d4df4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <os_thread_join+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	691b      	ldr	r3, [r3, #16]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030248 	.word	0x00030248

000d4e04 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <os_thread_cleanup+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	695b      	ldr	r3, [r3, #20]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030248 	.word	0x00030248

000d4e14 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <os_mutex_recursive_create+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030248 	.word	0x00030248

000d4e24 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <os_mutex_recursive_destroy+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030248 	.word	0x00030248

000d4e34 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_RNG_GetRandomNumber+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	685b      	ldr	r3, [r3, #4]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030218 	.word	0x00030218

000d4e44 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_Delay_Microseconds+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	68db      	ldr	r3, [r3, #12]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030218 	.word	0x00030218

000d4e54 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	695b      	ldr	r3, [r3, #20]
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030218 	.word	0x00030218

000d4e64 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_SPI_Begin+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	681b      	ldr	r3, [r3, #0]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030230 	.word	0x00030230

000d4e74 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <HAL_SPI_Set_Bit_Order+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	689b      	ldr	r3, [r3, #8]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030230 	.word	0x00030230

000d4e84 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_SPI_Set_Data_Mode+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	68db      	ldr	r3, [r3, #12]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030230 	.word	0x00030230

000d4e94 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <HAL_SPI_Set_Clock_Divider+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	691b      	ldr	r3, [r3, #16]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030230 	.word	0x00030230

000d4ea4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_SPI_Send_Receive_Data+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	695b      	ldr	r3, [r3, #20]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030230 	.word	0x00030230

000d4eb4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <HAL_SPI_Init+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	69db      	ldr	r3, [r3, #28]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030230 	.word	0x00030230

000d4ec4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <HAL_SPI_Is_Enabled+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	6a1b      	ldr	r3, [r3, #32]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030230 	.word	0x00030230

000d4ed4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <HAL_SPI_Info+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030230 	.word	0x00030230

000d4ee4 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <HAL_SPI_Acquire+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030230 	.word	0x00030230

000d4ef4 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <HAL_SPI_Release+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030230 	.word	0x00030230

000d4f04 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <HAL_Pin_Map+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	681b      	ldr	r3, [r3, #0]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	0003022c 	.word	0x0003022c

000d4f14 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <HAL_Pin_Mode+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	689b      	ldr	r3, [r3, #8]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	0003022c 	.word	0x0003022c

000d4f24 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <HAL_Get_Pin_Mode+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	68db      	ldr	r3, [r3, #12]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	0003022c 	.word	0x0003022c

000d4f34 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <HAL_GPIO_Write+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	691b      	ldr	r3, [r3, #16]
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	0003022c 	.word	0x0003022c

000d4f44 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <netdb_freeaddrinfo+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	689b      	ldr	r3, [r3, #8]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030268 	.word	0x00030268

000d4f54 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <netdb_getaddrinfo+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	68db      	ldr	r3, [r3, #12]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030268 	.word	0x00030268

000d4f64 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <panic_+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030260 	.word	0x00030260

000d4f74 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030244 	.word	0x00030244

000d4f84 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <network_connect+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	685b      	ldr	r3, [r3, #4]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030240 	.word	0x00030240

000d4f94 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <network_connecting+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	689b      	ldr	r3, [r3, #8]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030240 	.word	0x00030240

000d4fa4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <network_disconnect+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	68db      	ldr	r3, [r3, #12]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030240 	.word	0x00030240

000d4fb4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <network_ready+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	691b      	ldr	r3, [r3, #16]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030240 	.word	0x00030240

000d4fc4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <network_on+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	695b      	ldr	r3, [r3, #20]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030240 	.word	0x00030240

000d4fd4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <network_off+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	699b      	ldr	r3, [r3, #24]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030240 	.word	0x00030240

000d4fe4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <network_listen+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	69db      	ldr	r3, [r3, #28]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030240 	.word	0x00030240

000d4ff4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <network_listening+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	6a1b      	ldr	r3, [r3, #32]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030240 	.word	0x00030240

000d5004 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <network_set_listen_timeout+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030240 	.word	0x00030240

000d5014 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <network_get_listen_timeout+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030240 	.word	0x00030240

000d5024 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <set_system_mode+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	685b      	ldr	r3, [r3, #4]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030220 	.word	0x00030220

000d5034 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <system_delay_ms+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	695b      	ldr	r3, [r3, #20]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030220 	.word	0x00030220

000d5044 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b03      	ldr	r3, [pc, #12]	; (d5054 <system_ctrl_set_app_request_handler+0x10>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d504e:	9301      	str	r3, [sp, #4]
   d5050:	bd08      	pop	{r3, pc}
   d5052:	0000      	.short	0x0000
   d5054:	00030220 	.word	0x00030220

000d5058 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5058:	b508      	push	{r3, lr}
   d505a:	4b03      	ldr	r3, [pc, #12]	; (d5068 <system_ctrl_set_result+0x10>)
   d505c:	681b      	ldr	r3, [r3, #0]
   d505e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5062:	9301      	str	r3, [sp, #4]
   d5064:	bd08      	pop	{r3, pc}
   d5066:	0000      	.short	0x0000
   d5068:	00030220 	.word	0x00030220

000d506c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <malloc+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	681b      	ldr	r3, [r3, #0]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	0003021c 	.word	0x0003021c

000d507c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <free+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	685b      	ldr	r3, [r3, #4]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	0003021c 	.word	0x0003021c

000d508c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d508c:	2300      	movs	r3, #0
   d508e:	461a      	mov	r2, r3
   d5090:	6840      	ldr	r0, [r0, #4]
   d5092:	f7ff bf77 	b.w	d4f84 <network_connect>

000d5096 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5096:	2200      	movs	r2, #0
   d5098:	2102      	movs	r1, #2
   d509a:	6840      	ldr	r0, [r0, #4]
   d509c:	f7ff bf82 	b.w	d4fa4 <network_disconnect>

000d50a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d50a0:	2200      	movs	r2, #0
   d50a2:	4611      	mov	r1, r2
   d50a4:	6840      	ldr	r0, [r0, #4]
   d50a6:	f7ff bf75 	b.w	d4f94 <network_connecting>

000d50aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d50aa:	2200      	movs	r2, #0
   d50ac:	4611      	mov	r1, r2
   d50ae:	6840      	ldr	r0, [r0, #4]
   d50b0:	f7ff bf80 	b.w	d4fb4 <network_ready>

000d50b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d50b4:	2300      	movs	r3, #0
   d50b6:	461a      	mov	r2, r3
   d50b8:	4619      	mov	r1, r3
   d50ba:	6840      	ldr	r0, [r0, #4]
   d50bc:	f7ff bf82 	b.w	d4fc4 <network_on>

000d50c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d50c0:	2300      	movs	r3, #0
   d50c2:	461a      	mov	r2, r3
   d50c4:	4619      	mov	r1, r3
   d50c6:	6840      	ldr	r0, [r0, #4]
   d50c8:	f7ff bf84 	b.w	d4fd4 <network_off>

000d50cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d50cc:	2200      	movs	r2, #0
   d50ce:	f081 0101 	eor.w	r1, r1, #1
   d50d2:	6840      	ldr	r0, [r0, #4]
   d50d4:	f7ff bf86 	b.w	d4fe4 <network_listen>

000d50d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d50d8:	2200      	movs	r2, #0
   d50da:	6840      	ldr	r0, [r0, #4]
   d50dc:	f7ff bf92 	b.w	d5004 <network_set_listen_timeout>

000d50e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d50e0:	2200      	movs	r2, #0
   d50e2:	4611      	mov	r1, r2
   d50e4:	6840      	ldr	r0, [r0, #4]
   d50e6:	f7ff bf95 	b.w	d5014 <network_get_listen_timeout>

000d50ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d50ea:	2200      	movs	r2, #0
   d50ec:	4611      	mov	r1, r2
   d50ee:	6840      	ldr	r0, [r0, #4]
   d50f0:	f7ff bf80 	b.w	d4ff4 <network_listening>

000d50f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d50f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d50f8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d50fa:	b095      	sub	sp, #84	; 0x54
   d50fc:	4616      	mov	r6, r2
   d50fe:	460d      	mov	r5, r1
   d5100:	4607      	mov	r7, r0
    IPAddress addr;
   d5102:	f000 fb4d 	bl	d57a0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5106:	4621      	mov	r1, r4
   d5108:	2220      	movs	r2, #32
   d510a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d510c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d510e:	f000 ffde 	bl	d60ce <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5112:	2340      	movs	r3, #64	; 0x40
   d5114:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5116:	4621      	mov	r1, r4
   d5118:	466b      	mov	r3, sp
   d511a:	aa0c      	add	r2, sp, #48	; 0x30
   d511c:	4630      	mov	r0, r6
   d511e:	f7ff ff19 	bl	d4f54 <netdb_getaddrinfo>
    if (!r) {
   d5122:	4604      	mov	r4, r0
   d5124:	2800      	cmp	r0, #0
   d5126:	d144      	bne.n	d51b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5128:	4602      	mov	r2, r0
   d512a:	2101      	movs	r1, #1
   d512c:	6868      	ldr	r0, [r5, #4]
   d512e:	f7ff ff41 	bl	d4fb4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5132:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5134:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5136:	4622      	mov	r2, r4
   d5138:	6868      	ldr	r0, [r5, #4]
   d513a:	f7ff ff3b 	bl	d4fb4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d513e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5140:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5142:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5144:	2e00      	cmp	r6, #0
   d5146:	d034      	beq.n	d51b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5148:	2900      	cmp	r1, #0
   d514a:	d132      	bne.n	d51b2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d514c:	6873      	ldr	r3, [r6, #4]
   d514e:	2b02      	cmp	r3, #2
   d5150:	d002      	beq.n	d5158 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5152:	2b0a      	cmp	r3, #10
   d5154:	d009      	beq.n	d516a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5156:	e02a      	b.n	d51ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5158:	f1b8 0f00 	cmp.w	r8, #0
   d515c:	d027      	beq.n	d51ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d515e:	6971      	ldr	r1, [r6, #20]
   d5160:	4638      	mov	r0, r7
   d5162:	3104      	adds	r1, #4
   d5164:	f000 fb49 	bl	d57fa <_ZN9IPAddressaSEPKh>
   d5168:	e020      	b.n	d51ac <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d516a:	f1b9 0f00 	cmp.w	r9, #0
   d516e:	d01e      	beq.n	d51ae <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5170:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5172:	2211      	movs	r2, #17
   d5174:	a801      	add	r0, sp, #4
   d5176:	f000 ffaa 	bl	d60ce <memset>
                    a.v = 6;
   d517a:	2306      	movs	r3, #6
   d517c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5180:	ad01      	add	r5, sp, #4
   d5182:	f104 0308 	add.w	r3, r4, #8
   d5186:	3418      	adds	r4, #24
   d5188:	6818      	ldr	r0, [r3, #0]
   d518a:	6859      	ldr	r1, [r3, #4]
   d518c:	462a      	mov	r2, r5
   d518e:	c203      	stmia	r2!, {r0, r1}
   d5190:	3308      	adds	r3, #8
   d5192:	42a3      	cmp	r3, r4
   d5194:	4615      	mov	r5, r2
   d5196:	d1f7      	bne.n	d5188 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5198:	a901      	add	r1, sp, #4
   d519a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d519c:	ad07      	add	r5, sp, #28
   d519e:	f000 fb0d 	bl	d57bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d51a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d51a4:	1d3c      	adds	r4, r7, #4
   d51a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d51a8:	682b      	ldr	r3, [r5, #0]
   d51aa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d51ac:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d51ae:	69f6      	ldr	r6, [r6, #28]
   d51b0:	e7c8      	b.n	d5144 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d51b2:	9800      	ldr	r0, [sp, #0]
   d51b4:	f7ff fec6 	bl	d4f44 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d51b8:	4638      	mov	r0, r7
   d51ba:	b015      	add	sp, #84	; 0x54
   d51bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d51c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d51c0:	4b02      	ldr	r3, [pc, #8]	; (d51cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d51c2:	4a03      	ldr	r2, [pc, #12]	; (d51d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d51c4:	601a      	str	r2, [r3, #0]
   d51c6:	2200      	movs	r2, #0
   d51c8:	605a      	str	r2, [r3, #4]
   d51ca:	4770      	bx	lr
   d51cc:	2003e3cc 	.word	0x2003e3cc
   d51d0:	000d66d8 	.word	0x000d66d8

000d51d4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d51d4:	2200      	movs	r2, #0
   d51d6:	4611      	mov	r1, r2
   d51d8:	6840      	ldr	r0, [r0, #4]
   d51da:	f7ff beeb 	b.w	d4fb4 <network_ready>

000d51de <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d51de:	2200      	movs	r2, #0
   d51e0:	4611      	mov	r1, r2
   d51e2:	6840      	ldr	r0, [r0, #4]
   d51e4:	f7ff bf06 	b.w	d4ff4 <network_listening>

000d51e8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d51e8:	2200      	movs	r2, #0
   d51ea:	4611      	mov	r1, r2
   d51ec:	6840      	ldr	r0, [r0, #4]
   d51ee:	f7ff bf11 	b.w	d5014 <network_get_listen_timeout>

000d51f2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d51f2:	2200      	movs	r2, #0
   d51f4:	6840      	ldr	r0, [r0, #4]
   d51f6:	f7ff bf05 	b.w	d5004 <network_set_listen_timeout>

000d51fa <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d51fa:	2200      	movs	r2, #0
   d51fc:	f081 0101 	eor.w	r1, r1, #1
   d5200:	6840      	ldr	r0, [r0, #4]
   d5202:	f7ff beef 	b.w	d4fe4 <network_listen>

000d5206 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5206:	2300      	movs	r3, #0
   d5208:	461a      	mov	r2, r3
   d520a:	4619      	mov	r1, r3
   d520c:	6840      	ldr	r0, [r0, #4]
   d520e:	f7ff bee1 	b.w	d4fd4 <network_off>

000d5212 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5212:	2300      	movs	r3, #0
   d5214:	461a      	mov	r2, r3
   d5216:	4619      	mov	r1, r3
   d5218:	6840      	ldr	r0, [r0, #4]
   d521a:	f7ff bed3 	b.w	d4fc4 <network_on>

000d521e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d521e:	2200      	movs	r2, #0
   d5220:	4611      	mov	r1, r2
   d5222:	6840      	ldr	r0, [r0, #4]
   d5224:	f7ff beb6 	b.w	d4f94 <network_connecting>

000d5228 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5228:	2200      	movs	r2, #0
   d522a:	2102      	movs	r1, #2
   d522c:	6840      	ldr	r0, [r0, #4]
   d522e:	f7ff beb9 	b.w	d4fa4 <network_disconnect>

000d5232 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5232:	2300      	movs	r3, #0
   d5234:	461a      	mov	r2, r3
   d5236:	6840      	ldr	r0, [r0, #4]
   d5238:	f7ff bea4 	b.w	d4f84 <network_connect>

000d523c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d523c:	4b02      	ldr	r3, [pc, #8]	; (d5248 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d523e:	2204      	movs	r2, #4
   d5240:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5242:	4a02      	ldr	r2, [pc, #8]	; (d524c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5244:	601a      	str	r2, [r3, #0]
   d5246:	4770      	bx	lr
   d5248:	2003e3d4 	.word	0x2003e3d4
   d524c:	000d670c 	.word	0x000d670c

000d5250 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5250:	2200      	movs	r2, #0
   d5252:	4611      	mov	r1, r2
   d5254:	6840      	ldr	r0, [r0, #4]
   d5256:	f7ff becd 	b.w	d4ff4 <network_listening>

000d525a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d525a:	2200      	movs	r2, #0
   d525c:	4611      	mov	r1, r2
   d525e:	6840      	ldr	r0, [r0, #4]
   d5260:	f7ff bed8 	b.w	d5014 <network_get_listen_timeout>

000d5264 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5264:	2200      	movs	r2, #0
   d5266:	6840      	ldr	r0, [r0, #4]
   d5268:	f7ff becc 	b.w	d5004 <network_set_listen_timeout>

000d526c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d526c:	2200      	movs	r2, #0
   d526e:	f081 0101 	eor.w	r1, r1, #1
   d5272:	6840      	ldr	r0, [r0, #4]
   d5274:	f7ff beb6 	b.w	d4fe4 <network_listen>

000d5278 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5278:	2300      	movs	r3, #0
   d527a:	461a      	mov	r2, r3
   d527c:	2101      	movs	r1, #1
   d527e:	6840      	ldr	r0, [r0, #4]
   d5280:	f7ff bea8 	b.w	d4fd4 <network_off>

000d5284 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5284:	2300      	movs	r3, #0
   d5286:	461a      	mov	r2, r3
   d5288:	4619      	mov	r1, r3
   d528a:	6840      	ldr	r0, [r0, #4]
   d528c:	f7ff be9a 	b.w	d4fc4 <network_on>

000d5290 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5290:	2200      	movs	r2, #0
   d5292:	4611      	mov	r1, r2
   d5294:	6840      	ldr	r0, [r0, #4]
   d5296:	f7ff be8d 	b.w	d4fb4 <network_ready>

000d529a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d529a:	2200      	movs	r2, #0
   d529c:	4611      	mov	r1, r2
   d529e:	6840      	ldr	r0, [r0, #4]
   d52a0:	f7ff be78 	b.w	d4f94 <network_connecting>

000d52a4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d52a4:	2200      	movs	r2, #0
   d52a6:	2102      	movs	r1, #2
   d52a8:	6840      	ldr	r0, [r0, #4]
   d52aa:	f7ff be7b 	b.w	d4fa4 <network_disconnect>

000d52ae <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d52ae:	2300      	movs	r3, #0
   d52b0:	461a      	mov	r2, r3
   d52b2:	6840      	ldr	r0, [r0, #4]
   d52b4:	f7ff be66 	b.w	d4f84 <network_connect>

000d52b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d52b8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52ba:	4605      	mov	r5, r0
   d52bc:	b188      	cbz	r0, d52e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d52be:	6804      	ldr	r4, [r0, #0]
   d52c0:	b14c      	cbz	r4, d52d6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d52c2:	68a3      	ldr	r3, [r4, #8]
   d52c4:	b11b      	cbz	r3, d52ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d52c6:	2203      	movs	r2, #3
   d52c8:	4621      	mov	r1, r4
   d52ca:	4620      	mov	r0, r4
   d52cc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52ce:	2110      	movs	r1, #16
   d52d0:	4620      	mov	r0, r4
   d52d2:	f000 fd87 	bl	d5de4 <_ZdlPvj>
   d52d6:	4628      	mov	r0, r5
   d52d8:	2114      	movs	r1, #20
      }
   d52da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d52de:	f000 bd81 	b.w	d5de4 <_ZdlPvj>
   d52e2:	bd38      	pop	{r3, r4, r5, pc}

000d52e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d52e4:	b110      	cbz	r0, d52ec <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d52e6:	6803      	ldr	r3, [r0, #0]
   d52e8:	685b      	ldr	r3, [r3, #4]
   d52ea:	4718      	bx	r3
   d52ec:	4770      	bx	lr

000d52ee <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d52ee:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d52f0:	6803      	ldr	r3, [r0, #0]
   d52f2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d52f4:	b1bb      	cbz	r3, d5326 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d52f6:	6858      	ldr	r0, [r3, #4]
   d52f8:	f7ff fd74 	bl	d4de4 <os_thread_is_current>
   d52fc:	b978      	cbnz	r0, d531e <_ZN6ThreadD1Ev+0x30>
   d52fe:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5300:	7c5a      	ldrb	r2, [r3, #17]
   d5302:	b912      	cbnz	r2, d530a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5304:	6858      	ldr	r0, [r3, #4]
   d5306:	f7ff fd75 	bl	d4df4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d530a:	6823      	ldr	r3, [r4, #0]
   d530c:	6858      	ldr	r0, [r3, #4]
   d530e:	f7ff fd79 	bl	d4e04 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5312:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5314:	2300      	movs	r3, #0
   d5316:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5318:	b128      	cbz	r0, d5326 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d531a:	f7ff ffcd 	bl	d52b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d531e:	6820      	ldr	r0, [r4, #0]
   d5320:	b108      	cbz	r0, d5326 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5322:	f7ff ffc9 	bl	d52b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5326:	4620      	mov	r0, r4
   d5328:	bd10      	pop	{r4, pc}

000d532a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d532a:	b538      	push	{r3, r4, r5, lr}
   d532c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d532e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5332:	b108      	cbz	r0, d5338 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5334:	f7fe feb1 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5338:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d533c:	b108      	cbz	r0, d5342 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d533e:	f7ff fd71 	bl	d4e24 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5342:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5346:	b135      	cbz	r5, d5356 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5348:	4628      	mov	r0, r5
   d534a:	f7ff ffd0 	bl	d52ee <_ZN6ThreadD1Ev>
   d534e:	2104      	movs	r1, #4
   d5350:	4628      	mov	r0, r5
   d5352:	f000 fd47 	bl	d5de4 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5356:	6820      	ldr	r0, [r4, #0]
   d5358:	b108      	cbz	r0, d535e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d535a:	f7ff ffc3 	bl	d52e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d535e:	4620      	mov	r0, r4
   d5360:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5364 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5364:	b510      	push	{r4, lr}
   d5366:	4b04      	ldr	r3, [pc, #16]	; (d5378 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5368:	4604      	mov	r4, r0
   d536a:	f840 3b08 	str.w	r3, [r0], #8
   d536e:	f7ff ffdc 	bl	d532a <_ZN5spark11MeshPublishD1Ev>
   d5372:	4620      	mov	r0, r4
   d5374:	bd10      	pop	{r4, pc}
   d5376:	bf00      	nop
   d5378:	000d6740 	.word	0x000d6740

000d537c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d537c:	b538      	push	{r3, r4, r5, lr}
   d537e:	4c0e      	ldr	r4, [pc, #56]	; (d53b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5380:	4b0e      	ldr	r3, [pc, #56]	; (d53bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5382:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5384:	2500      	movs	r5, #0
   d5386:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5388:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d538c:	6063      	str	r3, [r4, #4]
   d538e:	60a5      	str	r5, [r4, #8]
   d5390:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5394:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5398:	f7ff fd3c 	bl	d4e14 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d539c:	4b08      	ldr	r3, [pc, #32]	; (d53c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d539e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d53a2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d53a6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d53a8:	4620      	mov	r0, r4
   d53aa:	4a06      	ldr	r2, [pc, #24]	; (d53c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d53ac:	4906      	ldr	r1, [pc, #24]	; (d53c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d53ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d53b2:	f000 bd0a 	b.w	d5dca <__aeabi_atexit>
   d53b6:	bf00      	nop
   d53b8:	2003e3dc 	.word	0x2003e3dc
   d53bc:	000d66d8 	.word	0x000d66d8
   d53c0:	000d6740 	.word	0x000d6740
   d53c4:	2003e3a4 	.word	0x2003e3a4
   d53c8:	000d5365 	.word	0x000d5365

000d53cc <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d53cc:	4770      	bx	lr

000d53ce <_ZN8SPIClassD0Ev>:
   d53ce:	b510      	push	{r4, lr}
   d53d0:	210c      	movs	r1, #12
   d53d2:	4604      	mov	r4, r0
   d53d4:	f000 fd06 	bl	d5de4 <_ZdlPvj>
   d53d8:	4620      	mov	r0, r4
   d53da:	bd10      	pop	{r4, pc}

000d53dc <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d53dc:	2100      	movs	r1, #0
   d53de:	f7ff bd81 	b.w	d4ee4 <HAL_SPI_Acquire>

000d53e2 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d53e2:	2100      	movs	r1, #0
   d53e4:	f7ff bd86 	b.w	d4ef4 <HAL_SPI_Release>

000d53e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d53e8:	b510      	push	{r4, lr}
   d53ea:	4b05      	ldr	r3, [pc, #20]	; (d5400 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d53ec:	6003      	str	r3, [r0, #0]
   d53ee:	4604      	mov	r4, r0
{
    _spi = spi;
   d53f0:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d53f2:	4608      	mov	r0, r1
   d53f4:	f7ff fd5e 	bl	d4eb4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d53f8:	2300      	movs	r3, #0
   d53fa:	60a3      	str	r3, [r4, #8]
}
   d53fc:	4620      	mov	r0, r4
   d53fe:	bd10      	pop	{r4, pc}
   d5400:	000d6774 	.word	0x000d6774

000d5404 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5404:	b510      	push	{r4, lr}
   d5406:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5408:	7900      	ldrb	r0, [r0, #4]
   d540a:	f7ff ffe7 	bl	d53dc <_ZN8SPIClass4lockEv.isra.0>
   d540e:	b948      	cbnz	r0, d5424 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5410:	7920      	ldrb	r0, [r4, #4]
   d5412:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5416:	f7ff fd25 	bl	d4e64 <HAL_SPI_Begin>
        unlock();
   d541a:	7920      	ldrb	r0, [r4, #4]
    }
}
   d541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5420:	f7ff bfdf 	b.w	d53e2 <_ZN8SPIClass6unlockEv.isra.1>
   d5424:	bd10      	pop	{r4, pc}

000d5426 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5426:	b538      	push	{r3, r4, r5, lr}
   d5428:	4604      	mov	r4, r0
    if (!lock())
   d542a:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d542c:	460d      	mov	r5, r1
    if (!lock())
   d542e:	f7ff ffd5 	bl	d53dc <_ZN8SPIClass4lockEv.isra.0>
   d5432:	b940      	cbnz	r0, d5446 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5434:	7920      	ldrb	r0, [r4, #4]
   d5436:	4629      	mov	r1, r5
   d5438:	f7ff fd1c 	bl	d4e74 <HAL_SPI_Set_Bit_Order>
        unlock();
   d543c:	7920      	ldrb	r0, [r4, #4]
    }
}
   d543e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d5442:	f7ff bfce 	b.w	d53e2 <_ZN8SPIClass6unlockEv.isra.1>
   d5446:	bd38      	pop	{r3, r4, r5, pc}

000d5448 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5448:	b538      	push	{r3, r4, r5, lr}
   d544a:	4604      	mov	r4, r0
    if (!lock())
   d544c:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d544e:	460d      	mov	r5, r1
    if (!lock())
   d5450:	f7ff ffc4 	bl	d53dc <_ZN8SPIClass4lockEv.isra.0>
   d5454:	b940      	cbnz	r0, d5468 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5456:	7920      	ldrb	r0, [r4, #4]
   d5458:	4629      	mov	r1, r5
   d545a:	f7ff fd13 	bl	d4e84 <HAL_SPI_Set_Data_Mode>
        unlock();
   d545e:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5464:	f7ff bfbd 	b.w	d53e2 <_ZN8SPIClass6unlockEv.isra.1>
   d5468:	bd38      	pop	{r3, r4, r5, pc}
	...

000d546c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d546c:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d546e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5470:	6018      	str	r0, [r3, #0]
   d5472:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5474:	6818      	ldr	r0, [r3, #0]
   d5476:	4288      	cmp	r0, r1
   d5478:	b2e5      	uxtb	r5, r4
   d547a:	d906      	bls.n	d548a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d547c:	3401      	adds	r4, #1
   d547e:	2c08      	cmp	r4, #8
   d5480:	d002      	beq.n	d5488 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5482:	0840      	lsrs	r0, r0, #1
   d5484:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5486:	e7f5      	b.n	d5474 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5488:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d548c:	5d5b      	ldrb	r3, [r3, r5]
   d548e:	7013      	strb	r3, [r2, #0]
   d5490:	bd30      	pop	{r4, r5, pc}
   d5492:	bf00      	nop
   d5494:	000d677c 	.word	0x000d677c

000d5498 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d549c:	b088      	sub	sp, #32
    unsigned clock = 0;
   d549e:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d54a0:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d54a2:	7900      	ldrb	r0, [r0, #4]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d54a4:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d54a6:	460e      	mov	r6, r1
   d54a8:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d54aa:	f7ff ff97 	bl	d53dc <_ZN8SPIClass4lockEv.isra.0>
   d54ae:	4605      	mov	r5, r0
   d54b0:	bb00      	cbnz	r0, d54f4 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d54b2:	f894 8004 	ldrb.w	r8, [r4, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d54b6:	4601      	mov	r1, r0
   d54b8:	2214      	movs	r2, #20
   d54ba:	a803      	add	r0, sp, #12
   d54bc:	f000 fe07 	bl	d60ce <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d54c0:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d54c2:	462a      	mov	r2, r5
   d54c4:	a903      	add	r1, sp, #12
   d54c6:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d54c8:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d54cc:	f7ff fd02 	bl	d4ed4 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d54d0:	ab02      	add	r3, sp, #8
   d54d2:	f10d 0207 	add.w	r2, sp, #7
   d54d6:	fb07 f106 	mul.w	r1, r7, r6
   d54da:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d54dc:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d54e0:	f7ff ffc4 	bl	d546c <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d54e4:	7920      	ldrb	r0, [r4, #4]
   d54e6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d54ea:	f7ff fcd3 	bl	d4e94 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d54ee:	7920      	ldrb	r0, [r4, #4]
   d54f0:	f7ff ff77 	bl	d53e2 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d54f4:	9802      	ldr	r0, [sp, #8]
   d54f6:	b008      	add	sp, #32
   d54f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d54fc <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d54fc:	b538      	push	{r3, r4, r5, lr}
   d54fe:	4604      	mov	r4, r0
    if (!lock())
   d5500:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5502:	460d      	mov	r5, r1
    if (!lock())
   d5504:	f7ff ff6a 	bl	d53dc <_ZN8SPIClass4lockEv.isra.0>
   d5508:	b9c8      	cbnz	r0, d553e <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d550a:	68a1      	ldr	r1, [r4, #8]
   d550c:	b171      	cbz	r1, d552c <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d550e:	4b0c      	ldr	r3, [pc, #48]	; (d5540 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d5510:	5cc2      	ldrb	r2, [r0, r3]
   d5512:	42aa      	cmp	r2, r5
   d5514:	d002      	beq.n	d551c <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d5516:	3001      	adds	r0, #1
   d5518:	2808      	cmp	r0, #8
   d551a:	d1f9      	bne.n	d5510 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d551c:	3001      	adds	r0, #1
   d551e:	b2c0      	uxtb	r0, r0
   d5520:	40c1      	lsrs	r1, r0
   d5522:	2201      	movs	r2, #1
   d5524:	4620      	mov	r0, r4
   d5526:	f7ff ffb7 	bl	d5498 <_ZN8SPIClass13setClockSpeedEjj>
   d552a:	e003      	b.n	d5534 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d552c:	4629      	mov	r1, r5
   d552e:	7920      	ldrb	r0, [r4, #4]
   d5530:	f7ff fcb0 	bl	d4e94 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d5534:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d553a:	f7ff bf52 	b.w	d53e2 <_ZN8SPIClass6unlockEv.isra.1>
   d553e:	bd38      	pop	{r3, r4, r5, pc}
   d5540:	000d677c 	.word	0x000d677c

000d5544 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5544:	b538      	push	{r3, r4, r5, lr}
   d5546:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d5548:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d554a:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d554c:	f7ff ff46 	bl	d53dc <_ZN8SPIClass4lockEv.isra.0>
   d5550:	b940      	cbnz	r0, d5564 <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d5552:	4629      	mov	r1, r5
   d5554:	7920      	ldrb	r0, [r4, #4]
   d5556:	f7ff fca5 	bl	d4ea4 <HAL_SPI_Send_Receive_Data>
   d555a:	4605      	mov	r5, r0
        unlock();
   d555c:	7920      	ldrb	r0, [r4, #4]
   d555e:	f7ff ff40 	bl	d53e2 <_ZN8SPIClass6unlockEv.isra.1>
   d5562:	e000      	b.n	d5566 <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d5564:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d5566:	b2e8      	uxtb	r0, r5
   d5568:	bd38      	pop	{r3, r4, r5, pc}

000d556a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d556a:	7900      	ldrb	r0, [r0, #4]
   d556c:	f7ff bcaa 	b.w	d4ec4 <HAL_SPI_Is_Enabled>

000d5570 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5570:	4770      	bx	lr

000d5572 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5574:	4606      	mov	r6, r0
   d5576:	4615      	mov	r5, r2
   d5578:	460c      	mov	r4, r1
   d557a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d557c:	42bc      	cmp	r4, r7
   d557e:	d006      	beq.n	d558e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5580:	6833      	ldr	r3, [r6, #0]
   d5582:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5586:	689b      	ldr	r3, [r3, #8]
   d5588:	4630      	mov	r0, r6
   d558a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d558c:	e7f6      	b.n	d557c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d558e:	4628      	mov	r0, r5
   d5590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5592 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5592:	2200      	movs	r2, #0
   d5594:	7c00      	ldrb	r0, [r0, #16]
   d5596:	f7ff bba5 	b.w	d4ce4 <HAL_I2C_Write_Data>

000d559a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d559a:	2100      	movs	r1, #0
   d559c:	7c00      	ldrb	r0, [r0, #16]
   d559e:	f7ff bba9 	b.w	d4cf4 <HAL_I2C_Available_Data>

000d55a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d55a2:	2100      	movs	r1, #0
   d55a4:	7c00      	ldrb	r0, [r0, #16]
   d55a6:	f7ff bbad 	b.w	d4d04 <HAL_I2C_Read_Data>

000d55aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d55aa:	2100      	movs	r1, #0
   d55ac:	7c00      	ldrb	r0, [r0, #16]
   d55ae:	f7ff bbb1 	b.w	d4d14 <HAL_I2C_Peek_Data>

000d55b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d55b2:	2100      	movs	r1, #0
   d55b4:	7c00      	ldrb	r0, [r0, #16]
   d55b6:	f7ff bbb5 	b.w	d4d24 <HAL_I2C_Flush_Data>

000d55ba <_ZN7TwoWireD0Ev>:
   d55ba:	b510      	push	{r4, lr}
   d55bc:	2114      	movs	r1, #20
   d55be:	4604      	mov	r4, r0
   d55c0:	f000 fc10 	bl	d5de4 <_ZdlPvj>
   d55c4:	4620      	mov	r0, r4
   d55c6:	bd10      	pop	{r4, pc}

000d55c8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d55c8:	b510      	push	{r4, lr}
   d55ca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d55cc:	2300      	movs	r3, #0
   d55ce:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55d4:	60a3      	str	r3, [r4, #8]
   d55d6:	4b04      	ldr	r3, [pc, #16]	; (d55e8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d55d8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d55da:	4608      	mov	r0, r1
   d55dc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d55de:	4611      	mov	r1, r2
   d55e0:	f7ff fbb0 	bl	d4d44 <HAL_I2C_Init>
}
   d55e4:	4620      	mov	r0, r4
   d55e6:	bd10      	pop	{r4, pc}
   d55e8:	000d678c 	.word	0x000d678c

000d55ec <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d55ec:	2300      	movs	r3, #0
   d55ee:	461a      	mov	r2, r3
   d55f0:	4619      	mov	r1, r3
   d55f2:	7c00      	ldrb	r0, [r0, #16]
   d55f4:	f7ff bb5e 	b.w	d4cb4 <HAL_I2C_Begin>

000d55f8 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d55f8:	2200      	movs	r2, #0
   d55fa:	7c00      	ldrb	r0, [r0, #16]
   d55fc:	f7ff bb62 	b.w	d4cc4 <HAL_I2C_Begin_Transmission>

000d5600 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5600:	b2c9      	uxtb	r1, r1
   d5602:	f7ff bff9 	b.w	d55f8 <_ZN7TwoWire17beginTransmissionEh>

000d5606 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5606:	2200      	movs	r2, #0
   d5608:	7c00      	ldrb	r0, [r0, #16]
   d560a:	f7ff bb63 	b.w	d4cd4 <HAL_I2C_End_Transmission>

000d560e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d560e:	2101      	movs	r1, #1
   d5610:	f7ff bff9 	b.w	d5606 <_ZN7TwoWire15endTransmissionEh>

000d5614 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5614:	2100      	movs	r1, #0
   d5616:	7c00      	ldrb	r0, [r0, #16]
   d5618:	f7ff bb8c 	b.w	d4d34 <HAL_I2C_Is_Enabled>

000d561c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d561c:	7441      	strb	r1, [r0, #17]
   d561e:	4770      	bx	lr

000d5620 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5620:	4770      	bx	lr

000d5622 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5622:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5624:	2100      	movs	r1, #0
   d5626:	7c00      	ldrb	r0, [r0, #16]
   d5628:	f7ff fb2c 	bl	d4c84 <HAL_USB_USART_Receive_Data>
}
   d562c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5630:	bf28      	it	cs
   d5632:	f04f 30ff 	movcs.w	r0, #4294967295
   d5636:	bd08      	pop	{r3, pc}

000d5638 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5638:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d563a:	2101      	movs	r1, #1
   d563c:	7c00      	ldrb	r0, [r0, #16]
   d563e:	f7ff fb21 	bl	d4c84 <HAL_USB_USART_Receive_Data>
}
   d5642:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5646:	bf28      	it	cs
   d5648:	f04f 30ff 	movcs.w	r0, #4294967295
   d564c:	bd08      	pop	{r3, pc}

000d564e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d564e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5650:	7c00      	ldrb	r0, [r0, #16]
   d5652:	f7ff fb0f 	bl	d4c74 <HAL_USB_USART_Available_Data_For_Write>
}
   d5656:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d565a:	bd08      	pop	{r3, pc}

000d565c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d565c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d565e:	7c00      	ldrb	r0, [r0, #16]
   d5660:	f7ff fb00 	bl	d4c64 <HAL_USB_USART_Available_Data>
}
   d5664:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5668:	bd08      	pop	{r3, pc}

000d566a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d566a:	7c00      	ldrb	r0, [r0, #16]
   d566c:	f7ff bb1a 	b.w	d4ca4 <HAL_USB_USART_Flush_Data>

000d5670 <_ZN9USBSerialD0Ev>:
   d5670:	b510      	push	{r4, lr}
   d5672:	2114      	movs	r1, #20
   d5674:	4604      	mov	r4, r0
   d5676:	f000 fbb5 	bl	d5de4 <_ZdlPvj>
   d567a:	4620      	mov	r0, r4
   d567c:	bd10      	pop	{r4, pc}

000d567e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d567e:	b538      	push	{r3, r4, r5, lr}
   d5680:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5682:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5684:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5686:	f7ff faf5 	bl	d4c74 <HAL_USB_USART_Available_Data_For_Write>
   d568a:	2800      	cmp	r0, #0
   d568c:	dc01      	bgt.n	d5692 <_ZN9USBSerial5writeEh+0x14>
   d568e:	7c60      	ldrb	r0, [r4, #17]
   d5690:	b128      	cbz	r0, d569e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5692:	4629      	mov	r1, r5
   d5694:	7c20      	ldrb	r0, [r4, #16]
   d5696:	f7ff fafd 	bl	d4c94 <HAL_USB_USART_Send_Data>
   d569a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d569e:	bd38      	pop	{r3, r4, r5, pc}

000d56a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d56a0:	b510      	push	{r4, lr}
   d56a2:	4604      	mov	r4, r0
   d56a4:	2300      	movs	r3, #0
   d56a6:	6063      	str	r3, [r4, #4]
   d56a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d56ac:	60a3      	str	r3, [r4, #8]
   d56ae:	4b05      	ldr	r3, [pc, #20]	; (d56c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d56b0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d56b2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d56b4:	4608      	mov	r0, r1
{
  _serial = serial;
   d56b6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d56b8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d56ba:	4611      	mov	r1, r2
   d56bc:	f7ff fac2 	bl	d4c44 <HAL_USB_USART_Init>
}
   d56c0:	4620      	mov	r0, r4
   d56c2:	bd10      	pop	{r4, pc}
   d56c4:	000d67b4 	.word	0x000d67b4

000d56c8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d56c8:	2200      	movs	r2, #0
   d56ca:	7c00      	ldrb	r0, [r0, #16]
   d56cc:	f7ff bac2 	b.w	d4c54 <HAL_USB_USART_Begin>

000d56d0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d56d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d56d2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d56d4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d56d6:	2100      	movs	r1, #0
   d56d8:	f000 fcf9 	bl	d60ce <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d56dc:	4620      	mov	r0, r4
   d56de:	bd10      	pop	{r4, pc}

000d56e0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d56e0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56e2:	4d0e      	ldr	r5, [pc, #56]	; (d571c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d56e4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d56e6:	a801      	add	r0, sp, #4
   d56e8:	f7ff fff2 	bl	d56d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56ec:	6829      	ldr	r1, [r5, #0]
   d56ee:	f011 0401 	ands.w	r4, r1, #1
   d56f2:	d110      	bne.n	d5716 <_Z16_fetch_usbserialv+0x36>
   d56f4:	4628      	mov	r0, r5
   d56f6:	f7fe fcdd 	bl	d40b4 <__cxa_guard_acquire>
   d56fa:	b160      	cbz	r0, d5716 <_Z16_fetch_usbserialv+0x36>
   d56fc:	aa01      	add	r2, sp, #4
   d56fe:	4621      	mov	r1, r4
   d5700:	4807      	ldr	r0, [pc, #28]	; (d5720 <_Z16_fetch_usbserialv+0x40>)
   d5702:	f7ff ffcd 	bl	d56a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5706:	4628      	mov	r0, r5
   d5708:	f7fe fcd9 	bl	d40be <__cxa_guard_release>
   d570c:	4a05      	ldr	r2, [pc, #20]	; (d5724 <_Z16_fetch_usbserialv+0x44>)
   d570e:	4906      	ldr	r1, [pc, #24]	; (d5728 <_Z16_fetch_usbserialv+0x48>)
   d5710:	4803      	ldr	r0, [pc, #12]	; (d5720 <_Z16_fetch_usbserialv+0x40>)
   d5712:	f000 fb5a 	bl	d5dca <__aeabi_atexit>
	return _usbserial;
}
   d5716:	4802      	ldr	r0, [pc, #8]	; (d5720 <_Z16_fetch_usbserialv+0x40>)
   d5718:	b007      	add	sp, #28
   d571a:	bd30      	pop	{r4, r5, pc}
   d571c:	2003e5b0 	.word	0x2003e5b0
   d5720:	2003e5b4 	.word	0x2003e5b4
   d5724:	2003e3a4 	.word	0x2003e3a4
   d5728:	000d5621 	.word	0x000d5621

000d572c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d572c:	4770      	bx	lr

000d572e <_ZN9IPAddressD0Ev>:
   d572e:	b510      	push	{r4, lr}
   d5730:	2118      	movs	r1, #24
   d5732:	4604      	mov	r4, r0
   d5734:	f000 fb56 	bl	d5de4 <_ZdlPvj>
   d5738:	4620      	mov	r0, r4
   d573a:	bd10      	pop	{r4, pc}

000d573c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d573c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d573e:	7d03      	ldrb	r3, [r0, #20]
   d5740:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5742:	b08d      	sub	sp, #52	; 0x34
   d5744:	460e      	mov	r6, r1
   d5746:	f100 0704 	add.w	r7, r0, #4
   d574a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d574e:	d002      	beq.n	d5756 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5750:	f100 0508 	add.w	r5, r0, #8
   d5754:	e018      	b.n	d5788 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5756:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5758:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d575a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d575e:	232f      	movs	r3, #47	; 0x2f
   d5760:	462a      	mov	r2, r5
   d5762:	200a      	movs	r0, #10
   d5764:	f7ff fb36 	bl	d4dd4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5768:	4628      	mov	r0, r5
   d576a:	f000 fce1 	bl	d6130 <strlen>
   d576e:	6833      	ldr	r3, [r6, #0]
   d5770:	4602      	mov	r2, r0
   d5772:	68db      	ldr	r3, [r3, #12]
   d5774:	4629      	mov	r1, r5
   d5776:	4630      	mov	r0, r6
   d5778:	4798      	blx	r3
   d577a:	e00f      	b.n	d579c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d577c:	b124      	cbz	r4, d5788 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d577e:	212e      	movs	r1, #46	; 0x2e
   d5780:	4630      	mov	r0, r6
   d5782:	f000 f929 	bl	d59d8 <_ZN5Print5printEc>
   d5786:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5788:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d578c:	220a      	movs	r2, #10
   d578e:	4630      	mov	r0, r6
   d5790:	f000 f925 	bl	d59de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5794:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5796:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5798:	d1f0      	bne.n	d577c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d579a:	4620      	mov	r0, r4
    }
    return n;
}
   d579c:	b00d      	add	sp, #52	; 0x34
   d579e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d57a0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d57a0:	b510      	push	{r4, lr}
   d57a2:	4b05      	ldr	r3, [pc, #20]	; (d57b8 <_ZN9IPAddressC1Ev+0x18>)
   d57a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d57a6:	2211      	movs	r2, #17
   d57a8:	f840 3b04 	str.w	r3, [r0], #4
   d57ac:	2100      	movs	r1, #0
   d57ae:	f000 fc8e 	bl	d60ce <memset>
{
    clear();
}
   d57b2:	4620      	mov	r0, r4
   d57b4:	bd10      	pop	{r4, pc}
   d57b6:	bf00      	nop
   d57b8:	000d67e4 	.word	0x000d67e4

000d57bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d57bc:	4603      	mov	r3, r0
   d57be:	4a07      	ldr	r2, [pc, #28]	; (d57dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d57c0:	b510      	push	{r4, lr}
   d57c2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d57c6:	f101 0210 	add.w	r2, r1, #16
   d57ca:	f851 4b04 	ldr.w	r4, [r1], #4
   d57ce:	f843 4b04 	str.w	r4, [r3], #4
   d57d2:	4291      	cmp	r1, r2
   d57d4:	d1f9      	bne.n	d57ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d57d6:	780a      	ldrb	r2, [r1, #0]
   d57d8:	701a      	strb	r2, [r3, #0]
}
   d57da:	bd10      	pop	{r4, pc}
   d57dc:	000d67e4 	.word	0x000d67e4

000d57e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d57e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d57e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d57e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d57ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d57ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d57f2:	2304      	movs	r3, #4
   d57f4:	6041      	str	r1, [r0, #4]
   d57f6:	7503      	strb	r3, [r0, #20]
   d57f8:	bd10      	pop	{r4, pc}

000d57fa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d57fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d57fc:	780d      	ldrb	r5, [r1, #0]
   d57fe:	788b      	ldrb	r3, [r1, #2]
   d5800:	784a      	ldrb	r2, [r1, #1]
   d5802:	78c9      	ldrb	r1, [r1, #3]
   d5804:	9100      	str	r1, [sp, #0]
   d5806:	4629      	mov	r1, r5
   d5808:	f7ff ffea 	bl	d57e0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d580c:	b003      	add	sp, #12
   d580e:	bd30      	pop	{r4, r5, pc}

000d5810 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5810:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5812:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5814:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5816:	b113      	cbz	r3, d581e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5818:	2203      	movs	r2, #3
   d581a:	4601      	mov	r1, r0
   d581c:	4798      	blx	r3
    }
   d581e:	4620      	mov	r0, r4
   d5820:	bd10      	pop	{r4, pc}

000d5822 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5822:	2100      	movs	r1, #0
   d5824:	f7ff bc06 	b.w	d5034 <system_delay_ms>

000d5828 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5828:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d582a:	4b0c      	ldr	r3, [pc, #48]	; (d585c <serialEventRun+0x34>)
   d582c:	b133      	cbz	r3, d583c <serialEventRun+0x14>
   d582e:	f7ff ff57 	bl	d56e0 <_Z16_fetch_usbserialv>
   d5832:	6803      	ldr	r3, [r0, #0]
   d5834:	691b      	ldr	r3, [r3, #16]
   d5836:	4798      	blx	r3
   d5838:	2800      	cmp	r0, #0
   d583a:	dc09      	bgt.n	d5850 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d583c:	4b08      	ldr	r3, [pc, #32]	; (d5860 <serialEventRun+0x38>)
   d583e:	b163      	cbz	r3, d585a <serialEventRun+0x32>
   d5840:	f000 f966 	bl	d5b10 <_Z22__fetch_global_Serial1v>
   d5844:	6803      	ldr	r3, [r0, #0]
   d5846:	691b      	ldr	r3, [r3, #16]
   d5848:	4798      	blx	r3
   d584a:	2800      	cmp	r0, #0
   d584c:	dc03      	bgt.n	d5856 <serialEventRun+0x2e>
   d584e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5850:	f3af 8000 	nop.w
   d5854:	e7f2      	b.n	d583c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5856:	f3af 8000 	nop.w
   d585a:	bd08      	pop	{r3, pc}
	...

000d5864 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5864:	b508      	push	{r3, lr}
	serialEventRun();
   d5866:	f7ff ffdf 	bl	d5828 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d586a:	f7ff faf3 	bl	d4e54 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d586e:	4b01      	ldr	r3, [pc, #4]	; (d5874 <_post_loop+0x10>)
   d5870:	6018      	str	r0, [r3, #0]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	2003e738 	.word	0x2003e738

000d5878 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5878:	4802      	ldr	r0, [pc, #8]	; (d5884 <_Z33system_initialize_user_backup_ramv+0xc>)
   d587a:	4a03      	ldr	r2, [pc, #12]	; (d5888 <_Z33system_initialize_user_backup_ramv+0x10>)
   d587c:	4903      	ldr	r1, [pc, #12]	; (d588c <_Z33system_initialize_user_backup_ramv+0x14>)
   d587e:	1a12      	subs	r2, r2, r0
   d5880:	f000 bc1a 	b.w	d60b8 <memcpy>
   d5884:	2003f400 	.word	0x2003f400
   d5888:	2003f404 	.word	0x2003f404
   d588c:	000d6a10 	.word	0x000d6a10

000d5890 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5890:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5892:	2300      	movs	r3, #0
   d5894:	9300      	str	r3, [sp, #0]
   d5896:	461a      	mov	r2, r3
   d5898:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d589c:	f7ff fbdc 	bl	d5058 <system_ctrl_set_result>
}
   d58a0:	b003      	add	sp, #12
   d58a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d58a8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d58a8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d58aa:	8843      	ldrh	r3, [r0, #2]
   d58ac:	2b0a      	cmp	r3, #10
   d58ae:	d008      	beq.n	d58c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d58b0:	2b50      	cmp	r3, #80	; 0x50
   d58b2:	d109      	bne.n	d58c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d58b4:	4b09      	ldr	r3, [pc, #36]	; (d58dc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d58b6:	681b      	ldr	r3, [r3, #0]
   d58b8:	b13b      	cbz	r3, d58ca <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d58ba:	b003      	add	sp, #12
   d58bc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d58c0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d58c2:	f7ff ffe5 	bl	d5890 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d58c6:	e006      	b.n	d58d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d58c8:	2300      	movs	r3, #0
   d58ca:	9300      	str	r3, [sp, #0]
   d58cc:	461a      	mov	r2, r3
   d58ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d58d2:	f7ff fbc1 	bl	d5058 <system_ctrl_set_result>
        break;
    }
}
   d58d6:	b003      	add	sp, #12
   d58d8:	f85d fb04 	ldr.w	pc, [sp], #4
   d58dc:	2003e5c8 	.word	0x2003e5c8

000d58e0 <module_user_init_hook>:

void module_user_init_hook()
{
   d58e0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d58e2:	4c10      	ldr	r4, [pc, #64]	; (d5924 <module_user_init_hook+0x44>)
   d58e4:	4d10      	ldr	r5, [pc, #64]	; (d5928 <module_user_init_hook+0x48>)
   d58e6:	6823      	ldr	r3, [r4, #0]
   d58e8:	42ab      	cmp	r3, r5
   d58ea:	4b10      	ldr	r3, [pc, #64]	; (d592c <module_user_init_hook+0x4c>)
   d58ec:	bf0c      	ite	eq
   d58ee:	2201      	moveq	r2, #1
   d58f0:	2200      	movne	r2, #0
   d58f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d58f4:	d002      	beq.n	d58fc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d58f6:	f7ff ffbf 	bl	d5878 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d58fa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d58fc:	f7ff fa9a 	bl	d4e34 <HAL_RNG_GetRandomNumber>
   d5900:	4604      	mov	r4, r0
    srand(seed);
   d5902:	f000 fbed 	bl	d60e0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5906:	4b0a      	ldr	r3, [pc, #40]	; (d5930 <module_user_init_hook+0x50>)
   d5908:	b113      	cbz	r3, d5910 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d590a:	4620      	mov	r0, r4
   d590c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5910:	2100      	movs	r1, #0
   d5912:	4807      	ldr	r0, [pc, #28]	; (d5930 <module_user_init_hook+0x50>)
   d5914:	f7ff fb2e 	bl	d4f74 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5918:	2100      	movs	r1, #0
   d591a:	4806      	ldr	r0, [pc, #24]	; (d5934 <module_user_init_hook+0x54>)
}
   d591c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5920:	f7ff bb90 	b.w	d5044 <system_ctrl_set_app_request_handler>
   d5924:	2003f400 	.word	0x2003f400
   d5928:	9a271c1e 	.word	0x9a271c1e
   d592c:	2003e5cc 	.word	0x2003e5cc
   d5930:	00000000 	.word	0x00000000
   d5934:	000d58a9 	.word	0x000d58a9

000d5938 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5938:	b510      	push	{r4, lr}
   d593a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d593c:	f7ff ff68 	bl	d5810 <_ZNSt14_Function_baseD1Ev>
   d5940:	4620      	mov	r0, r4
   d5942:	bd10      	pop	{r4, pc}

000d5944 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5944:	4803      	ldr	r0, [pc, #12]	; (d5954 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5946:	4a04      	ldr	r2, [pc, #16]	; (d5958 <_GLOBAL__sub_I_RGB+0x14>)
   d5948:	4904      	ldr	r1, [pc, #16]	; (d595c <_GLOBAL__sub_I_RGB+0x18>)
   d594a:	2300      	movs	r3, #0
   d594c:	6083      	str	r3, [r0, #8]
   d594e:	f000 ba3c 	b.w	d5dca <__aeabi_atexit>
   d5952:	bf00      	nop
   d5954:	2003e5d0 	.word	0x2003e5d0
   d5958:	2003e3a4 	.word	0x2003e3a4
   d595c:	000d5939 	.word	0x000d5939

000d5960 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5960:	4b02      	ldr	r3, [pc, #8]	; (d596c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5962:	681a      	ldr	r2, [r3, #0]
   d5964:	4b02      	ldr	r3, [pc, #8]	; (d5970 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5966:	601a      	str	r2, [r3, #0]
   d5968:	4770      	bx	lr
   d596a:	bf00      	nop
   d596c:	2003e33c 	.word	0x2003e33c
   d5970:	2003e5e0 	.word	0x2003e5e0

000d5974 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5974:	4b01      	ldr	r3, [pc, #4]	; (d597c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5976:	4a02      	ldr	r2, [pc, #8]	; (d5980 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5978:	601a      	str	r2, [r3, #0]
   d597a:	4770      	bx	lr
   d597c:	2003e5e4 	.word	0x2003e5e4
   d5980:	000d688c 	.word	0x000d688c

000d5984 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5986:	4606      	mov	r6, r0
   d5988:	460d      	mov	r5, r1
   d598a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d598c:	2400      	movs	r4, #0
  while (size--) {
   d598e:	42bd      	cmp	r5, r7
   d5990:	d00c      	beq.n	d59ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5992:	6833      	ldr	r3, [r6, #0]
   d5994:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5998:	689b      	ldr	r3, [r3, #8]
   d599a:	4630      	mov	r0, r6
   d599c:	4798      	blx	r3
     if (chunk>=0)
   d599e:	2800      	cmp	r0, #0
   d59a0:	db01      	blt.n	d59a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d59a2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d59a4:	e7f3      	b.n	d598e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d59a6:	2c00      	cmp	r4, #0
   d59a8:	bf08      	it	eq
   d59aa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d59ac:	4620      	mov	r0, r4
   d59ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59b0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d59b0:	b570      	push	{r4, r5, r6, lr}
   d59b2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d59b4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d59b6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d59b8:	b149      	cbz	r1, d59ce <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d59ba:	f000 fbb9 	bl	d6130 <strlen>
   d59be:	682b      	ldr	r3, [r5, #0]
   d59c0:	4602      	mov	r2, r0
   d59c2:	4621      	mov	r1, r4
   d59c4:	4628      	mov	r0, r5
   d59c6:	68db      	ldr	r3, [r3, #12]
    }
   d59c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d59cc:	4718      	bx	r3
    }
   d59ce:	bd70      	pop	{r4, r5, r6, pc}

000d59d0 <_ZN5Print5printEPKc>:
   d59d0:	b508      	push	{r3, lr}
   d59d2:	f7ff ffed 	bl	d59b0 <_ZN5Print5writeEPKc>
   d59d6:	bd08      	pop	{r3, pc}

000d59d8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d59d8:	6803      	ldr	r3, [r0, #0]
   d59da:	689b      	ldr	r3, [r3, #8]
   d59dc:	4718      	bx	r3

000d59de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d59de:	b530      	push	{r4, r5, lr}
   d59e0:	b08b      	sub	sp, #44	; 0x2c
   d59e2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d59e4:	2100      	movs	r1, #0
   d59e6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d59ea:	2a01      	cmp	r2, #1
   d59ec:	bf98      	it	ls
   d59ee:	220a      	movls	r2, #10
   d59f0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d59f4:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d59f8:	fb05 3312 	mls	r3, r5, r2, r3
   d59fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5a00:	2b09      	cmp	r3, #9
   d5a02:	bf94      	ite	ls
   d5a04:	3330      	addls	r3, #48	; 0x30
   d5a06:	3337      	addhi	r3, #55	; 0x37
   d5a08:	b2db      	uxtb	r3, r3
   d5a0a:	4621      	mov	r1, r4
   d5a0c:	f804 3901 	strb.w	r3, [r4], #-1
   d5a10:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5a12:	2d00      	cmp	r5, #0
   d5a14:	d1ee      	bne.n	d59f4 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5a16:	f7ff ffcb 	bl	d59b0 <_ZN5Print5writeEPKc>
}
   d5a1a:	b00b      	add	sp, #44	; 0x2c
   d5a1c:	bd30      	pop	{r4, r5, pc}

000d5a1e <_ZN14RecursiveMutexD1Ev>:
    }

    ~RecursiveMutex() {
   d5a1e:	b510      	push	{r4, lr}
   d5a20:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5a22:	6800      	ldr	r0, [r0, #0]
   d5a24:	b108      	cbz	r0, d5a2a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5a26:	f7ff f9fd 	bl	d4e24 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5a2a:	4620      	mov	r0, r4
   d5a2c:	bd10      	pop	{r4, pc}
	...

000d5a30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5a30:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5a32:	4c06      	ldr	r4, [pc, #24]	; (d5a4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5a34:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5a36:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5a38:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5a3a:	f7ff f9eb 	bl	d4e14 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5a3e:	4620      	mov	r0, r4
   d5a40:	4a03      	ldr	r2, [pc, #12]	; (d5a50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5a42:	4904      	ldr	r1, [pc, #16]	; (d5a54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5a48:	f000 b9bf 	b.w	d5dca <__aeabi_atexit>
   d5a4c:	2003e5e8 	.word	0x2003e5e8
   d5a50:	2003e3a4 	.word	0x2003e3a4
   d5a54:	000d5a1f 	.word	0x000d5a1f

000d5a58 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5a58:	4770      	bx	lr

000d5a5a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a5a:	7441      	strb	r1, [r0, #17]
   d5a5c:	4770      	bx	lr

000d5a5e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5a5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5a60:	7c00      	ldrb	r0, [r0, #16]
   d5a62:	f7ff f9af 	bl	d4dc4 <HAL_USART_Available_Data_For_Write>
}
   d5a66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a6a:	bd08      	pop	{r3, pc}

000d5a6c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5a6c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5a6e:	7c00      	ldrb	r0, [r0, #16]
   d5a70:	f7ff f980 	bl	d4d74 <HAL_USART_Available_Data>
}
   d5a74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a78:	bd08      	pop	{r3, pc}

000d5a7a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5a7a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5a7c:	7c00      	ldrb	r0, [r0, #16]
   d5a7e:	f7ff f989 	bl	d4d94 <HAL_USART_Peek_Data>
}
   d5a82:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a86:	bf28      	it	cs
   d5a88:	f04f 30ff 	movcs.w	r0, #4294967295
   d5a8c:	bd08      	pop	{r3, pc}

000d5a8e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5a8e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5a90:	7c00      	ldrb	r0, [r0, #16]
   d5a92:	f7ff f977 	bl	d4d84 <HAL_USART_Read_Data>
}
   d5a96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a9a:	bf28      	it	cs
   d5a9c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5aa0:	bd08      	pop	{r3, pc}

000d5aa2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5aa2:	7c00      	ldrb	r0, [r0, #16]
   d5aa4:	f7ff b97e 	b.w	d4da4 <HAL_USART_Flush_Data>

000d5aa8 <_ZN11USARTSerialD0Ev>:
   d5aa8:	b510      	push	{r4, lr}
   d5aaa:	2114      	movs	r1, #20
   d5aac:	4604      	mov	r4, r0
   d5aae:	f000 f999 	bl	d5de4 <_ZdlPvj>
   d5ab2:	4620      	mov	r0, r4
   d5ab4:	bd10      	pop	{r4, pc}

000d5ab6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5ab6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5ab8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5aba:	4604      	mov	r4, r0
   d5abc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5abe:	b925      	cbnz	r5, d5aca <_ZN11USARTSerial5writeEh+0x14>
   d5ac0:	7c00      	ldrb	r0, [r0, #16]
   d5ac2:	f7ff f97f 	bl	d4dc4 <HAL_USART_Available_Data_For_Write>
   d5ac6:	2800      	cmp	r0, #0
   d5ac8:	dd05      	ble.n	d5ad6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5aca:	4631      	mov	r1, r6
   d5acc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5ad2:	f7ff b947 	b.w	d4d64 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5ad6:	4628      	mov	r0, r5
   d5ad8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5adc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5adc:	b510      	push	{r4, lr}
   d5ade:	4604      	mov	r4, r0
   d5ae0:	4608      	mov	r0, r1
   d5ae2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5ae4:	2200      	movs	r2, #0
   d5ae6:	6062      	str	r2, [r4, #4]
   d5ae8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5aec:	60a2      	str	r2, [r4, #8]
   d5aee:	4a05      	ldr	r2, [pc, #20]	; (d5b04 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5af0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5af2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5af4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5af6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5af8:	461a      	mov	r2, r3
   d5afa:	f7ff f92b 	bl	d4d54 <HAL_USART_Init>
}
   d5afe:	4620      	mov	r0, r4
   d5b00:	bd10      	pop	{r4, pc}
   d5b02:	bf00      	nop
   d5b04:	000d6904 	.word	0x000d6904

000d5b08 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5b08:	7c00      	ldrb	r0, [r0, #16]
   d5b0a:	f7ff b953 	b.w	d4db4 <HAL_USART_Is_Enabled>
	...

000d5b10 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5b10:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5b12:	4d0c      	ldr	r5, [pc, #48]	; (d5b44 <_Z22__fetch_global_Serial1v+0x34>)
   d5b14:	6829      	ldr	r1, [r5, #0]
   d5b16:	f011 0401 	ands.w	r4, r1, #1
   d5b1a:	d111      	bne.n	d5b40 <_Z22__fetch_global_Serial1v+0x30>
   d5b1c:	4628      	mov	r0, r5
   d5b1e:	f7fe fac9 	bl	d40b4 <__cxa_guard_acquire>
   d5b22:	b168      	cbz	r0, d5b40 <_Z22__fetch_global_Serial1v+0x30>
   d5b24:	4a08      	ldr	r2, [pc, #32]	; (d5b48 <_Z22__fetch_global_Serial1v+0x38>)
   d5b26:	4b09      	ldr	r3, [pc, #36]	; (d5b4c <_Z22__fetch_global_Serial1v+0x3c>)
   d5b28:	4809      	ldr	r0, [pc, #36]	; (d5b50 <_Z22__fetch_global_Serial1v+0x40>)
   d5b2a:	4621      	mov	r1, r4
   d5b2c:	f7ff ffd6 	bl	d5adc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5b30:	4628      	mov	r0, r5
   d5b32:	f7fe fac4 	bl	d40be <__cxa_guard_release>
   d5b36:	4a07      	ldr	r2, [pc, #28]	; (d5b54 <_Z22__fetch_global_Serial1v+0x44>)
   d5b38:	4907      	ldr	r1, [pc, #28]	; (d5b58 <_Z22__fetch_global_Serial1v+0x48>)
   d5b3a:	4805      	ldr	r0, [pc, #20]	; (d5b50 <_Z22__fetch_global_Serial1v+0x40>)
   d5b3c:	f000 f945 	bl	d5dca <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5b40:	4803      	ldr	r0, [pc, #12]	; (d5b50 <_Z22__fetch_global_Serial1v+0x40>)
   d5b42:	bd38      	pop	{r3, r4, r5, pc}
   d5b44:	2003e684 	.word	0x2003e684
   d5b48:	2003e688 	.word	0x2003e688
   d5b4c:	2003e600 	.word	0x2003e600
   d5b50:	2003e5ec 	.word	0x2003e5ec
   d5b54:	2003e3a4 	.word	0x2003e3a4
   d5b58:	000d5a59 	.word	0x000d5a59

000d5b5c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5b5c:	b510      	push	{r4, lr}
   d5b5e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5b60:	6800      	ldr	r0, [r0, #0]
   d5b62:	b118      	cbz	r0, d5b6c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5b64:	f7ff fa8a 	bl	d507c <free>
            wakeupSource_ = nullptr;
   d5b68:	2300      	movs	r3, #0
   d5b6a:	6023      	str	r3, [r4, #0]
   d5b6c:	bd10      	pop	{r4, pc}

000d5b6e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5b6e:	b510      	push	{r4, lr}
   d5b70:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5b72:	f7ff fff3 	bl	d5b5c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5b76:	4620      	mov	r0, r4
   d5b78:	bd10      	pop	{r4, pc}
	...

000d5b7c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b7c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b7e:	4c09      	ldr	r4, [pc, #36]	; (d5ba4 <_GLOBAL__sub_I_System+0x28>)
   d5b80:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b82:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b86:	6020      	str	r0, [r4, #0]
   d5b88:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b8a:	71a0      	strb	r0, [r4, #6]
   d5b8c:	8120      	strh	r0, [r4, #8]
   d5b8e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b90:	f7ff fa48 	bl	d5024 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5b94:	4620      	mov	r0, r4
   d5b96:	4a04      	ldr	r2, [pc, #16]	; (d5ba8 <_GLOBAL__sub_I_System+0x2c>)
   d5b98:	4904      	ldr	r1, [pc, #16]	; (d5bac <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5b9e:	f000 b914 	b.w	d5dca <__aeabi_atexit>
   d5ba2:	bf00      	nop
   d5ba4:	2003e70c 	.word	0x2003e70c
   d5ba8:	2003e3a4 	.word	0x2003e3a4
   d5bac:	000d5b6f 	.word	0x000d5b6f

000d5bb0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5bb0:	2200      	movs	r2, #0
   d5bb2:	4611      	mov	r1, r2
   d5bb4:	6840      	ldr	r0, [r0, #4]
   d5bb6:	f7ff ba1d 	b.w	d4ff4 <network_listening>

000d5bba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5bba:	2200      	movs	r2, #0
   d5bbc:	4611      	mov	r1, r2
   d5bbe:	6840      	ldr	r0, [r0, #4]
   d5bc0:	f7ff ba28 	b.w	d5014 <network_get_listen_timeout>

000d5bc4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5bc4:	2200      	movs	r2, #0
   d5bc6:	6840      	ldr	r0, [r0, #4]
   d5bc8:	f7ff ba1c 	b.w	d5004 <network_set_listen_timeout>

000d5bcc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5bcc:	2200      	movs	r2, #0
   d5bce:	f081 0101 	eor.w	r1, r1, #1
   d5bd2:	6840      	ldr	r0, [r0, #4]
   d5bd4:	f7ff ba06 	b.w	d4fe4 <network_listen>

000d5bd8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5bd8:	2300      	movs	r3, #0
   d5bda:	461a      	mov	r2, r3
   d5bdc:	4619      	mov	r1, r3
   d5bde:	6840      	ldr	r0, [r0, #4]
   d5be0:	f7ff b9f8 	b.w	d4fd4 <network_off>

000d5be4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5be4:	2300      	movs	r3, #0
   d5be6:	461a      	mov	r2, r3
   d5be8:	4619      	mov	r1, r3
   d5bea:	6840      	ldr	r0, [r0, #4]
   d5bec:	f7ff b9ea 	b.w	d4fc4 <network_on>

000d5bf0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5bf0:	2200      	movs	r2, #0
   d5bf2:	4611      	mov	r1, r2
   d5bf4:	6840      	ldr	r0, [r0, #4]
   d5bf6:	f7ff b9dd 	b.w	d4fb4 <network_ready>

000d5bfa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5bfa:	2200      	movs	r2, #0
   d5bfc:	4611      	mov	r1, r2
   d5bfe:	6840      	ldr	r0, [r0, #4]
   d5c00:	f7ff b9c8 	b.w	d4f94 <network_connecting>

000d5c04 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c04:	2200      	movs	r2, #0
   d5c06:	2102      	movs	r1, #2
   d5c08:	6840      	ldr	r0, [r0, #4]
   d5c0a:	f7ff b9cb 	b.w	d4fa4 <network_disconnect>

000d5c0e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5c0e:	2300      	movs	r3, #0
   d5c10:	461a      	mov	r2, r3
   d5c12:	6840      	ldr	r0, [r0, #4]
   d5c14:	f7ff b9b6 	b.w	d4f84 <network_connect>

000d5c18 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5c18:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5c1a:	2203      	movs	r2, #3
   d5c1c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5c1e:	4a02      	ldr	r2, [pc, #8]	; (d5c28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5c20:	601a      	str	r2, [r3, #0]
   d5c22:	4770      	bx	lr
   d5c24:	2003e718 	.word	0x2003e718
   d5c28:	000d6934 	.word	0x000d6934

000d5c2c <_Z17acquireWireBufferv>:
   d5c2c:	b570      	push	{r4, r5, r6, lr}
   d5c2e:	4604      	mov	r4, r0
   d5c30:	2514      	movs	r5, #20
   d5c32:	462a      	mov	r2, r5
   d5c34:	4e09      	ldr	r6, [pc, #36]	; (d5c5c <_Z17acquireWireBufferv+0x30>)
   d5c36:	2100      	movs	r1, #0
   d5c38:	f000 fa49 	bl	d60ce <memset>
   d5c3c:	8025      	strh	r5, [r4, #0]
   d5c3e:	2520      	movs	r5, #32
   d5c40:	4631      	mov	r1, r6
   d5c42:	60a5      	str	r5, [r4, #8]
   d5c44:	6125      	str	r5, [r4, #16]
   d5c46:	4628      	mov	r0, r5
   d5c48:	f000 f8ce 	bl	d5de8 <_ZnajRKSt9nothrow_t>
   d5c4c:	4631      	mov	r1, r6
   d5c4e:	6060      	str	r0, [r4, #4]
   d5c50:	4628      	mov	r0, r5
   d5c52:	f000 f8c9 	bl	d5de8 <_ZnajRKSt9nothrow_t>
   d5c56:	60e0      	str	r0, [r4, #12]
   d5c58:	4620      	mov	r0, r4
   d5c5a:	bd70      	pop	{r4, r5, r6, pc}
   d5c5c:	000d6960 	.word	0x000d6960

000d5c60 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5c60:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c62:	4d0e      	ldr	r5, [pc, #56]	; (d5c9c <_Z19__fetch_global_Wirev+0x3c>)
   d5c64:	6829      	ldr	r1, [r5, #0]
   d5c66:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5c6a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c6c:	d113      	bne.n	d5c96 <_Z19__fetch_global_Wirev+0x36>
   d5c6e:	4628      	mov	r0, r5
   d5c70:	f7fe fa20 	bl	d40b4 <__cxa_guard_acquire>
   d5c74:	b178      	cbz	r0, d5c96 <_Z19__fetch_global_Wirev+0x36>
   d5c76:	a801      	add	r0, sp, #4
   d5c78:	f7ff ffd8 	bl	d5c2c <_Z17acquireWireBufferv>
   d5c7c:	aa01      	add	r2, sp, #4
   d5c7e:	4621      	mov	r1, r4
   d5c80:	4807      	ldr	r0, [pc, #28]	; (d5ca0 <_Z19__fetch_global_Wirev+0x40>)
   d5c82:	f7ff fca1 	bl	d55c8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5c86:	4628      	mov	r0, r5
   d5c88:	f7fe fa19 	bl	d40be <__cxa_guard_release>
   d5c8c:	4a05      	ldr	r2, [pc, #20]	; (d5ca4 <_Z19__fetch_global_Wirev+0x44>)
   d5c8e:	4906      	ldr	r1, [pc, #24]	; (d5ca8 <_Z19__fetch_global_Wirev+0x48>)
   d5c90:	4803      	ldr	r0, [pc, #12]	; (d5ca0 <_Z19__fetch_global_Wirev+0x40>)
   d5c92:	f000 f89a 	bl	d5dca <__aeabi_atexit>
	return wire;
}
   d5c96:	4802      	ldr	r0, [pc, #8]	; (d5ca0 <_Z19__fetch_global_Wirev+0x40>)
   d5c98:	b007      	add	sp, #28
   d5c9a:	bd30      	pop	{r4, r5, pc}
   d5c9c:	2003e720 	.word	0x2003e720
   d5ca0:	2003e724 	.word	0x2003e724
   d5ca4:	2003e3a4 	.word	0x2003e3a4
   d5ca8:	000d5571 	.word	0x000d5571

000d5cac <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d5cac:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d5cae:	4d0b      	ldr	r5, [pc, #44]	; (d5cdc <_ZN8particle7globals11instanceSpiEv+0x30>)
   d5cb0:	6829      	ldr	r1, [r5, #0]
   d5cb2:	f011 0401 	ands.w	r4, r1, #1
   d5cb6:	d10f      	bne.n	d5cd8 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5cb8:	4628      	mov	r0, r5
   d5cba:	f7fe f9fb 	bl	d40b4 <__cxa_guard_acquire>
   d5cbe:	b158      	cbz	r0, d5cd8 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d5cc0:	4621      	mov	r1, r4
   d5cc2:	4807      	ldr	r0, [pc, #28]	; (d5ce0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5cc4:	f7ff fb90 	bl	d53e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5cc8:	4628      	mov	r0, r5
   d5cca:	f7fe f9f8 	bl	d40be <__cxa_guard_release>
   d5cce:	4a05      	ldr	r2, [pc, #20]	; (d5ce4 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d5cd0:	4905      	ldr	r1, [pc, #20]	; (d5ce8 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d5cd2:	4803      	ldr	r0, [pc, #12]	; (d5ce0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5cd4:	f000 f879 	bl	d5dca <__aeabi_atexit>
    return instance;
}
   d5cd8:	4801      	ldr	r0, [pc, #4]	; (d5ce0 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d5cda:	bd38      	pop	{r3, r4, r5, pc}
   d5cdc:	2003e748 	.word	0x2003e748
   d5ce0:	2003e73c 	.word	0x2003e73c
   d5ce4:	2003e3a4 	.word	0x2003e3a4
   d5ce8:	000d53cd 	.word	0x000d53cd

000d5cec <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5cec:	b510      	push	{r4, lr}
   d5cee:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5cf0:	f7ff ffdc 	bl	d5cac <_ZN8particle7globals11instanceSpiEv>
   d5cf4:	f7ff fc39 	bl	d556a <_ZN8SPIClass9isEnabledEv>
   d5cf8:	b128      	cbz	r0, d5d06 <pinAvailable+0x1a>
   d5cfa:	f1a4 030b 	sub.w	r3, r4, #11
   d5cfe:	2b02      	cmp	r3, #2
   d5d00:	d801      	bhi.n	d5d06 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d5d02:	2000      	movs	r0, #0
   d5d04:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5d06:	f7ff ffab 	bl	d5c60 <_Z19__fetch_global_Wirev>
   d5d0a:	f7ff fc83 	bl	d5614 <_ZN7TwoWire9isEnabledEv>
   d5d0e:	b108      	cbz	r0, d5d14 <pinAvailable+0x28>
   d5d10:	2c01      	cmp	r4, #1
   d5d12:	d9f6      	bls.n	d5d02 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5d14:	f7ff fefc 	bl	d5b10 <_Z22__fetch_global_Serial1v>
   d5d18:	f7ff fef6 	bl	d5b08 <_ZN11USARTSerial9isEnabledEv>
   d5d1c:	b118      	cbz	r0, d5d26 <pinAvailable+0x3a>
   d5d1e:	f1a4 0309 	sub.w	r3, r4, #9
   d5d22:	2b01      	cmp	r3, #1
   d5d24:	d9ed      	bls.n	d5d02 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5d26:	2c23      	cmp	r4, #35	; 0x23
   d5d28:	bf8c      	ite	hi
   d5d2a:	2000      	movhi	r0, #0
   d5d2c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5d2e:	bd10      	pop	{r4, pc}

000d5d30 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5d30:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5d32:	b538      	push	{r3, r4, r5, lr}
   d5d34:	4604      	mov	r4, r0
   d5d36:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5d38:	d80a      	bhi.n	d5d50 <pinMode+0x20>
   d5d3a:	29ff      	cmp	r1, #255	; 0xff
   d5d3c:	d008      	beq.n	d5d50 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5d3e:	f7ff ffd5 	bl	d5cec <pinAvailable>
   d5d42:	b128      	cbz	r0, d5d50 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5d44:	4629      	mov	r1, r5
   d5d46:	4620      	mov	r0, r4
}
   d5d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5d4c:	f7ff b8e2 	b.w	d4f14 <HAL_Pin_Mode>
   d5d50:	bd38      	pop	{r3, r4, r5, pc}

000d5d52 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5d52:	b538      	push	{r3, r4, r5, lr}
   d5d54:	4604      	mov	r4, r0
   d5d56:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5d58:	f7ff f8e4 	bl	d4f24 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5d5c:	28ff      	cmp	r0, #255	; 0xff
   d5d5e:	d010      	beq.n	d5d82 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5d60:	2806      	cmp	r0, #6
   d5d62:	d804      	bhi.n	d5d6e <digitalWrite+0x1c>
   d5d64:	234d      	movs	r3, #77	; 0x4d
   d5d66:	fa23 f000 	lsr.w	r0, r3, r0
   d5d6a:	07c3      	lsls	r3, r0, #31
   d5d6c:	d409      	bmi.n	d5d82 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5d6e:	4620      	mov	r0, r4
   d5d70:	f7ff ffbc 	bl	d5cec <pinAvailable>
   d5d74:	b128      	cbz	r0, d5d82 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5d76:	4629      	mov	r1, r5
   d5d78:	4620      	mov	r0, r4
}
   d5d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5d7e:	f7ff b8d9 	b.w	d4f34 <HAL_GPIO_Write>
   d5d82:	bd38      	pop	{r3, r4, r5, pc}

000d5d84 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d5d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d88:	4690      	mov	r8, r2
   d5d8a:	461e      	mov	r6, r3
   d5d8c:	2407      	movs	r4, #7
   d5d8e:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d5d90:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d5d92:	f1b8 0f00 	cmp.w	r8, #0
   d5d96:	d104      	bne.n	d5da2 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d5d98:	f1c4 0107 	rsb	r1, r4, #7
   d5d9c:	fa46 f101 	asr.w	r1, r6, r1
   d5da0:	e001      	b.n	d5da6 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d5da2:	fa46 f104 	asr.w	r1, r6, r4
   d5da6:	f001 0101 	and.w	r1, r1, #1
   d5daa:	4638      	mov	r0, r7
   d5dac:	f7ff ffd1 	bl	d5d52 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d5db0:	2101      	movs	r1, #1
   d5db2:	4628      	mov	r0, r5
   d5db4:	f7ff ffcd 	bl	d5d52 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d5db8:	2100      	movs	r1, #0
   d5dba:	4628      	mov	r0, r5
   d5dbc:	f7ff ffc9 	bl	d5d52 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d5dc0:	f114 34ff 	adds.w	r4, r4, #4294967295
   d5dc4:	d2e5      	bcs.n	d5d92 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d5dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5dca <__aeabi_atexit>:
   d5dca:	460b      	mov	r3, r1
   d5dcc:	4601      	mov	r1, r0
   d5dce:	4618      	mov	r0, r3
   d5dd0:	f000 b964 	b.w	d609c <__cxa_atexit>

000d5dd4 <_ZSt15get_new_handlerv>:
   d5dd4:	4b02      	ldr	r3, [pc, #8]	; (d5de0 <_ZSt15get_new_handlerv+0xc>)
   d5dd6:	6818      	ldr	r0, [r3, #0]
   d5dd8:	f3bf 8f5f 	dmb	sy
   d5ddc:	4770      	bx	lr
   d5dde:	bf00      	nop
   d5de0:	2003e74c 	.word	0x2003e74c

000d5de4 <_ZdlPvj>:
   d5de4:	f7fe b957 	b.w	d4096 <_ZdlPv>

000d5de8 <_ZnajRKSt9nothrow_t>:
   d5de8:	f000 b800 	b.w	d5dec <_ZnwjRKSt9nothrow_t>

000d5dec <_ZnwjRKSt9nothrow_t>:
   d5dec:	b510      	push	{r4, lr}
   d5dee:	2800      	cmp	r0, #0
   d5df0:	bf14      	ite	ne
   d5df2:	4604      	movne	r4, r0
   d5df4:	2401      	moveq	r4, #1
   d5df6:	4620      	mov	r0, r4
   d5df8:	f7ff f938 	bl	d506c <malloc>
   d5dfc:	b920      	cbnz	r0, d5e08 <_ZnwjRKSt9nothrow_t+0x1c>
   d5dfe:	f7ff ffe9 	bl	d5dd4 <_ZSt15get_new_handlerv>
   d5e02:	b108      	cbz	r0, d5e08 <_ZnwjRKSt9nothrow_t+0x1c>
   d5e04:	4780      	blx	r0
   d5e06:	e7f6      	b.n	d5df6 <_ZnwjRKSt9nothrow_t+0xa>
   d5e08:	bd10      	pop	{r4, pc}
	...

000d5e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5e0c:	4b18      	ldr	r3, [pc, #96]	; (d5e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5e0e:	681a      	ldr	r2, [r3, #0]
   d5e10:	07d1      	lsls	r1, r2, #31
   d5e12:	bf5c      	itt	pl
   d5e14:	2201      	movpl	r2, #1
   d5e16:	601a      	strpl	r2, [r3, #0]
   d5e18:	4b16      	ldr	r3, [pc, #88]	; (d5e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5e1a:	681a      	ldr	r2, [r3, #0]
   d5e1c:	07d2      	lsls	r2, r2, #31
   d5e1e:	bf5c      	itt	pl
   d5e20:	2201      	movpl	r2, #1
   d5e22:	601a      	strpl	r2, [r3, #0]
   d5e24:	4b14      	ldr	r3, [pc, #80]	; (d5e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5e26:	681a      	ldr	r2, [r3, #0]
   d5e28:	07d0      	lsls	r0, r2, #31
   d5e2a:	bf5c      	itt	pl
   d5e2c:	2201      	movpl	r2, #1
   d5e2e:	601a      	strpl	r2, [r3, #0]
   d5e30:	4b12      	ldr	r3, [pc, #72]	; (d5e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5e32:	681a      	ldr	r2, [r3, #0]
   d5e34:	07d1      	lsls	r1, r2, #31
   d5e36:	bf5c      	itt	pl
   d5e38:	2201      	movpl	r2, #1
   d5e3a:	601a      	strpl	r2, [r3, #0]
   d5e3c:	4b10      	ldr	r3, [pc, #64]	; (d5e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5e3e:	681a      	ldr	r2, [r3, #0]
   d5e40:	07d2      	lsls	r2, r2, #31
   d5e42:	bf5c      	itt	pl
   d5e44:	2201      	movpl	r2, #1
   d5e46:	601a      	strpl	r2, [r3, #0]
   d5e48:	4b0e      	ldr	r3, [pc, #56]	; (d5e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5e4a:	681a      	ldr	r2, [r3, #0]
   d5e4c:	07d0      	lsls	r0, r2, #31
   d5e4e:	bf5c      	itt	pl
   d5e50:	2201      	movpl	r2, #1
   d5e52:	601a      	strpl	r2, [r3, #0]
   d5e54:	4b0c      	ldr	r3, [pc, #48]	; (d5e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5e56:	681a      	ldr	r2, [r3, #0]
   d5e58:	07d1      	lsls	r1, r2, #31
   d5e5a:	bf5c      	itt	pl
   d5e5c:	2201      	movpl	r2, #1
   d5e5e:	601a      	strpl	r2, [r3, #0]
   d5e60:	4b0a      	ldr	r3, [pc, #40]	; (d5e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5e62:	681a      	ldr	r2, [r3, #0]
   d5e64:	07d2      	lsls	r2, r2, #31
   d5e66:	bf5c      	itt	pl
   d5e68:	2201      	movpl	r2, #1
   d5e6a:	601a      	strpl	r2, [r3, #0]
   d5e6c:	4770      	bx	lr
   d5e6e:	bf00      	nop
   d5e70:	2003e76c 	.word	0x2003e76c
   d5e74:	2003e768 	.word	0x2003e768
   d5e78:	2003e764 	.word	0x2003e764
   d5e7c:	2003e760 	.word	0x2003e760
   d5e80:	2003e75c 	.word	0x2003e75c
   d5e84:	2003e758 	.word	0x2003e758
   d5e88:	2003e754 	.word	0x2003e754
   d5e8c:	2003e750 	.word	0x2003e750

000d5e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5e90:	4b24      	ldr	r3, [pc, #144]	; (d5f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5e92:	681a      	ldr	r2, [r3, #0]
   d5e94:	07d0      	lsls	r0, r2, #31
   d5e96:	bf5c      	itt	pl
   d5e98:	2201      	movpl	r2, #1
   d5e9a:	601a      	strpl	r2, [r3, #0]
   d5e9c:	4b22      	ldr	r3, [pc, #136]	; (d5f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5e9e:	681a      	ldr	r2, [r3, #0]
   d5ea0:	07d1      	lsls	r1, r2, #31
   d5ea2:	bf5c      	itt	pl
   d5ea4:	2201      	movpl	r2, #1
   d5ea6:	601a      	strpl	r2, [r3, #0]
   d5ea8:	4b20      	ldr	r3, [pc, #128]	; (d5f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5eaa:	681a      	ldr	r2, [r3, #0]
   d5eac:	07d2      	lsls	r2, r2, #31
   d5eae:	bf5c      	itt	pl
   d5eb0:	2201      	movpl	r2, #1
   d5eb2:	601a      	strpl	r2, [r3, #0]
   d5eb4:	4b1e      	ldr	r3, [pc, #120]	; (d5f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5eb6:	681a      	ldr	r2, [r3, #0]
   d5eb8:	07d0      	lsls	r0, r2, #31
   d5eba:	bf5c      	itt	pl
   d5ebc:	2201      	movpl	r2, #1
   d5ebe:	601a      	strpl	r2, [r3, #0]
   d5ec0:	4b1c      	ldr	r3, [pc, #112]	; (d5f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5ec2:	681a      	ldr	r2, [r3, #0]
   d5ec4:	07d1      	lsls	r1, r2, #31
   d5ec6:	bf5c      	itt	pl
   d5ec8:	2201      	movpl	r2, #1
   d5eca:	601a      	strpl	r2, [r3, #0]
   d5ecc:	4b1a      	ldr	r3, [pc, #104]	; (d5f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5ece:	681a      	ldr	r2, [r3, #0]
   d5ed0:	07d2      	lsls	r2, r2, #31
   d5ed2:	bf5c      	itt	pl
   d5ed4:	2201      	movpl	r2, #1
   d5ed6:	601a      	strpl	r2, [r3, #0]
   d5ed8:	4b18      	ldr	r3, [pc, #96]	; (d5f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5eda:	681a      	ldr	r2, [r3, #0]
   d5edc:	07d0      	lsls	r0, r2, #31
   d5ede:	bf5c      	itt	pl
   d5ee0:	2201      	movpl	r2, #1
   d5ee2:	601a      	strpl	r2, [r3, #0]
   d5ee4:	4b16      	ldr	r3, [pc, #88]	; (d5f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5ee6:	681a      	ldr	r2, [r3, #0]
   d5ee8:	07d1      	lsls	r1, r2, #31
   d5eea:	bf5c      	itt	pl
   d5eec:	2201      	movpl	r2, #1
   d5eee:	601a      	strpl	r2, [r3, #0]
   d5ef0:	4b14      	ldr	r3, [pc, #80]	; (d5f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5ef2:	681a      	ldr	r2, [r3, #0]
   d5ef4:	07d2      	lsls	r2, r2, #31
   d5ef6:	bf5c      	itt	pl
   d5ef8:	2201      	movpl	r2, #1
   d5efa:	601a      	strpl	r2, [r3, #0]
   d5efc:	4b12      	ldr	r3, [pc, #72]	; (d5f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5efe:	681a      	ldr	r2, [r3, #0]
   d5f00:	07d0      	lsls	r0, r2, #31
   d5f02:	bf5c      	itt	pl
   d5f04:	2201      	movpl	r2, #1
   d5f06:	601a      	strpl	r2, [r3, #0]
   d5f08:	4b10      	ldr	r3, [pc, #64]	; (d5f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5f0a:	681a      	ldr	r2, [r3, #0]
   d5f0c:	07d1      	lsls	r1, r2, #31
   d5f0e:	bf5c      	itt	pl
   d5f10:	2201      	movpl	r2, #1
   d5f12:	601a      	strpl	r2, [r3, #0]
   d5f14:	4b0e      	ldr	r3, [pc, #56]	; (d5f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5f16:	681a      	ldr	r2, [r3, #0]
   d5f18:	07d2      	lsls	r2, r2, #31
   d5f1a:	bf5c      	itt	pl
   d5f1c:	2201      	movpl	r2, #1
   d5f1e:	601a      	strpl	r2, [r3, #0]
   d5f20:	4770      	bx	lr
   d5f22:	bf00      	nop
   d5f24:	2003e79c 	.word	0x2003e79c
   d5f28:	2003e798 	.word	0x2003e798
   d5f2c:	2003e794 	.word	0x2003e794
   d5f30:	2003e790 	.word	0x2003e790
   d5f34:	2003e78c 	.word	0x2003e78c
   d5f38:	2003e788 	.word	0x2003e788
   d5f3c:	2003e784 	.word	0x2003e784
   d5f40:	2003e780 	.word	0x2003e780
   d5f44:	2003e77c 	.word	0x2003e77c
   d5f48:	2003e778 	.word	0x2003e778
   d5f4c:	2003e774 	.word	0x2003e774
   d5f50:	2003e770 	.word	0x2003e770

000d5f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5f54:	4b24      	ldr	r3, [pc, #144]	; (d5fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5f56:	681a      	ldr	r2, [r3, #0]
   d5f58:	07d0      	lsls	r0, r2, #31
   d5f5a:	bf5c      	itt	pl
   d5f5c:	2201      	movpl	r2, #1
   d5f5e:	601a      	strpl	r2, [r3, #0]
   d5f60:	4b22      	ldr	r3, [pc, #136]	; (d5fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5f62:	681a      	ldr	r2, [r3, #0]
   d5f64:	07d1      	lsls	r1, r2, #31
   d5f66:	bf5c      	itt	pl
   d5f68:	2201      	movpl	r2, #1
   d5f6a:	601a      	strpl	r2, [r3, #0]
   d5f6c:	4b20      	ldr	r3, [pc, #128]	; (d5ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5f6e:	681a      	ldr	r2, [r3, #0]
   d5f70:	07d2      	lsls	r2, r2, #31
   d5f72:	bf5c      	itt	pl
   d5f74:	2201      	movpl	r2, #1
   d5f76:	601a      	strpl	r2, [r3, #0]
   d5f78:	4b1e      	ldr	r3, [pc, #120]	; (d5ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5f7a:	681a      	ldr	r2, [r3, #0]
   d5f7c:	07d0      	lsls	r0, r2, #31
   d5f7e:	bf5c      	itt	pl
   d5f80:	2201      	movpl	r2, #1
   d5f82:	601a      	strpl	r2, [r3, #0]
   d5f84:	4b1c      	ldr	r3, [pc, #112]	; (d5ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5f86:	681a      	ldr	r2, [r3, #0]
   d5f88:	07d1      	lsls	r1, r2, #31
   d5f8a:	bf5c      	itt	pl
   d5f8c:	2201      	movpl	r2, #1
   d5f8e:	601a      	strpl	r2, [r3, #0]
   d5f90:	4b1a      	ldr	r3, [pc, #104]	; (d5ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5f92:	681a      	ldr	r2, [r3, #0]
   d5f94:	07d2      	lsls	r2, r2, #31
   d5f96:	bf5c      	itt	pl
   d5f98:	2201      	movpl	r2, #1
   d5f9a:	601a      	strpl	r2, [r3, #0]
   d5f9c:	4b18      	ldr	r3, [pc, #96]	; (d6000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5f9e:	681a      	ldr	r2, [r3, #0]
   d5fa0:	07d0      	lsls	r0, r2, #31
   d5fa2:	bf5c      	itt	pl
   d5fa4:	2201      	movpl	r2, #1
   d5fa6:	601a      	strpl	r2, [r3, #0]
   d5fa8:	4b16      	ldr	r3, [pc, #88]	; (d6004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5faa:	681a      	ldr	r2, [r3, #0]
   d5fac:	07d1      	lsls	r1, r2, #31
   d5fae:	bf5c      	itt	pl
   d5fb0:	2201      	movpl	r2, #1
   d5fb2:	601a      	strpl	r2, [r3, #0]
   d5fb4:	4b14      	ldr	r3, [pc, #80]	; (d6008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5fb6:	681a      	ldr	r2, [r3, #0]
   d5fb8:	07d2      	lsls	r2, r2, #31
   d5fba:	bf5c      	itt	pl
   d5fbc:	2201      	movpl	r2, #1
   d5fbe:	601a      	strpl	r2, [r3, #0]
   d5fc0:	4b12      	ldr	r3, [pc, #72]	; (d600c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5fc2:	681a      	ldr	r2, [r3, #0]
   d5fc4:	07d0      	lsls	r0, r2, #31
   d5fc6:	bf5c      	itt	pl
   d5fc8:	2201      	movpl	r2, #1
   d5fca:	601a      	strpl	r2, [r3, #0]
   d5fcc:	4b10      	ldr	r3, [pc, #64]	; (d6010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5fce:	681a      	ldr	r2, [r3, #0]
   d5fd0:	07d1      	lsls	r1, r2, #31
   d5fd2:	bf5c      	itt	pl
   d5fd4:	2201      	movpl	r2, #1
   d5fd6:	601a      	strpl	r2, [r3, #0]
   d5fd8:	4b0e      	ldr	r3, [pc, #56]	; (d6014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5fda:	681a      	ldr	r2, [r3, #0]
   d5fdc:	07d2      	lsls	r2, r2, #31
   d5fde:	bf5c      	itt	pl
   d5fe0:	2201      	movpl	r2, #1
   d5fe2:	601a      	strpl	r2, [r3, #0]
   d5fe4:	4770      	bx	lr
   d5fe6:	bf00      	nop
   d5fe8:	2003e7cc 	.word	0x2003e7cc
   d5fec:	2003e7c8 	.word	0x2003e7c8
   d5ff0:	2003e7c4 	.word	0x2003e7c4
   d5ff4:	2003e7c0 	.word	0x2003e7c0
   d5ff8:	2003e7bc 	.word	0x2003e7bc
   d5ffc:	2003e7b8 	.word	0x2003e7b8
   d6000:	2003e7b4 	.word	0x2003e7b4
   d6004:	2003e7b0 	.word	0x2003e7b0
   d6008:	2003e7ac 	.word	0x2003e7ac
   d600c:	2003e7a8 	.word	0x2003e7a8
   d6010:	2003e7a4 	.word	0x2003e7a4
   d6014:	2003e7a0 	.word	0x2003e7a0

000d6018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6018:	4b18      	ldr	r3, [pc, #96]	; (d607c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d601a:	681a      	ldr	r2, [r3, #0]
   d601c:	07d1      	lsls	r1, r2, #31
   d601e:	bf5c      	itt	pl
   d6020:	2201      	movpl	r2, #1
   d6022:	601a      	strpl	r2, [r3, #0]
   d6024:	4b16      	ldr	r3, [pc, #88]	; (d6080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6026:	681a      	ldr	r2, [r3, #0]
   d6028:	07d2      	lsls	r2, r2, #31
   d602a:	bf5c      	itt	pl
   d602c:	2201      	movpl	r2, #1
   d602e:	601a      	strpl	r2, [r3, #0]
   d6030:	4b14      	ldr	r3, [pc, #80]	; (d6084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6032:	681a      	ldr	r2, [r3, #0]
   d6034:	07d0      	lsls	r0, r2, #31
   d6036:	bf5c      	itt	pl
   d6038:	2201      	movpl	r2, #1
   d603a:	601a      	strpl	r2, [r3, #0]
   d603c:	4b12      	ldr	r3, [pc, #72]	; (d6088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d603e:	681a      	ldr	r2, [r3, #0]
   d6040:	07d1      	lsls	r1, r2, #31
   d6042:	bf5c      	itt	pl
   d6044:	2201      	movpl	r2, #1
   d6046:	601a      	strpl	r2, [r3, #0]
   d6048:	4b10      	ldr	r3, [pc, #64]	; (d608c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d604a:	681a      	ldr	r2, [r3, #0]
   d604c:	07d2      	lsls	r2, r2, #31
   d604e:	bf5c      	itt	pl
   d6050:	2201      	movpl	r2, #1
   d6052:	601a      	strpl	r2, [r3, #0]
   d6054:	4b0e      	ldr	r3, [pc, #56]	; (d6090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6056:	681a      	ldr	r2, [r3, #0]
   d6058:	07d0      	lsls	r0, r2, #31
   d605a:	bf5c      	itt	pl
   d605c:	2201      	movpl	r2, #1
   d605e:	601a      	strpl	r2, [r3, #0]
   d6060:	4b0c      	ldr	r3, [pc, #48]	; (d6094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6062:	681a      	ldr	r2, [r3, #0]
   d6064:	07d1      	lsls	r1, r2, #31
   d6066:	bf5c      	itt	pl
   d6068:	2201      	movpl	r2, #1
   d606a:	601a      	strpl	r2, [r3, #0]
   d606c:	4b0a      	ldr	r3, [pc, #40]	; (d6098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d606e:	681a      	ldr	r2, [r3, #0]
   d6070:	07d2      	lsls	r2, r2, #31
   d6072:	bf5c      	itt	pl
   d6074:	2201      	movpl	r2, #1
   d6076:	601a      	strpl	r2, [r3, #0]
   d6078:	4770      	bx	lr
   d607a:	bf00      	nop
   d607c:	2003e7ec 	.word	0x2003e7ec
   d6080:	2003e7e8 	.word	0x2003e7e8
   d6084:	2003e7e4 	.word	0x2003e7e4
   d6088:	2003e7e0 	.word	0x2003e7e0
   d608c:	2003e7dc 	.word	0x2003e7dc
   d6090:	2003e7d8 	.word	0x2003e7d8
   d6094:	2003e7d4 	.word	0x2003e7d4
   d6098:	2003e7d0 	.word	0x2003e7d0

000d609c <__cxa_atexit>:
   d609c:	b510      	push	{r4, lr}
   d609e:	4c05      	ldr	r4, [pc, #20]	; (d60b4 <__cxa_atexit+0x18>)
   d60a0:	4613      	mov	r3, r2
   d60a2:	b12c      	cbz	r4, d60b0 <__cxa_atexit+0x14>
   d60a4:	460a      	mov	r2, r1
   d60a6:	4601      	mov	r1, r0
   d60a8:	2002      	movs	r0, #2
   d60aa:	f3af 8000 	nop.w
   d60ae:	bd10      	pop	{r4, pc}
   d60b0:	4620      	mov	r0, r4
   d60b2:	bd10      	pop	{r4, pc}
   d60b4:	00000000 	.word	0x00000000

000d60b8 <memcpy>:
   d60b8:	b510      	push	{r4, lr}
   d60ba:	1e43      	subs	r3, r0, #1
   d60bc:	440a      	add	r2, r1
   d60be:	4291      	cmp	r1, r2
   d60c0:	d004      	beq.n	d60cc <memcpy+0x14>
   d60c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d60c6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d60ca:	e7f8      	b.n	d60be <memcpy+0x6>
   d60cc:	bd10      	pop	{r4, pc}

000d60ce <memset>:
   d60ce:	4402      	add	r2, r0
   d60d0:	4603      	mov	r3, r0
   d60d2:	4293      	cmp	r3, r2
   d60d4:	d002      	beq.n	d60dc <memset+0xe>
   d60d6:	f803 1b01 	strb.w	r1, [r3], #1
   d60da:	e7fa      	b.n	d60d2 <memset+0x4>
   d60dc:	4770      	bx	lr
	...

000d60e0 <srand>:
   d60e0:	b538      	push	{r3, r4, r5, lr}
   d60e2:	4b12      	ldr	r3, [pc, #72]	; (d612c <srand+0x4c>)
   d60e4:	681c      	ldr	r4, [r3, #0]
   d60e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d60e8:	4605      	mov	r5, r0
   d60ea:	b9d3      	cbnz	r3, d6122 <srand+0x42>
   d60ec:	2018      	movs	r0, #24
   d60ee:	f7fe ffbd 	bl	d506c <malloc>
   d60f2:	f243 330e 	movw	r3, #13070	; 0x330e
   d60f6:	63a0      	str	r0, [r4, #56]	; 0x38
   d60f8:	8003      	strh	r3, [r0, #0]
   d60fa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d60fe:	8043      	strh	r3, [r0, #2]
   d6100:	f241 2334 	movw	r3, #4660	; 0x1234
   d6104:	8083      	strh	r3, [r0, #4]
   d6106:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d610a:	80c3      	strh	r3, [r0, #6]
   d610c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6110:	8103      	strh	r3, [r0, #8]
   d6112:	2305      	movs	r3, #5
   d6114:	8143      	strh	r3, [r0, #10]
   d6116:	230b      	movs	r3, #11
   d6118:	8183      	strh	r3, [r0, #12]
   d611a:	2201      	movs	r2, #1
   d611c:	2300      	movs	r3, #0
   d611e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6122:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6124:	2200      	movs	r2, #0
   d6126:	611d      	str	r5, [r3, #16]
   d6128:	615a      	str	r2, [r3, #20]
   d612a:	bd38      	pop	{r3, r4, r5, pc}
   d612c:	2003e3a0 	.word	0x2003e3a0

000d6130 <strlen>:
   d6130:	4603      	mov	r3, r0
   d6132:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6136:	2a00      	cmp	r2, #0
   d6138:	d1fb      	bne.n	d6132 <strlen+0x2>
   d613a:	1a18      	subs	r0, r3, r0
   d613c:	3801      	subs	r0, #1
   d613e:	4770      	bx	lr

000d6140 <dynalib_user>:
   d6140:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6150:	0000 0000 6548 6c6c 2c6f 7720 726f 646c     ....Hello, world
   d6160:	0021 0000                                   !...

000d6164 <_ZTV12Adafruit_GFX>:
	...
   d6174:	44c1 000d 5985 000d 40a1 000d 41c1 000d     .D...Y...@...A..
   d6184:	42e1 000d 42fd 000d 4281 000d 4317 000d     .B...B...B...C..
   d6194:	434f 000d 436b 000d                         OC..kC..

000d619c <_ZL4font>:
   d619c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d61ac:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d61bc:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d61cc:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d61dc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d61ec:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d61fc:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d620c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d621c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d622c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d623c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d624c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d625c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d626c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d627c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d628c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d629c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d62ac:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d62bc:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d62cc:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d62dc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d62ec:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d62fc:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d630c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d631c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d632c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d633c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d634c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d635c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d636c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d637c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d638c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d639c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d63ac:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d63bc:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d63cc:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d63dc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d63ec:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d63fc:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d640c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d641c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d642c:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d643c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d644c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d645c:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d646c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d647c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d648c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d649c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d64ac:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d64bc:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d64cc:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d64dc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d64ec:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d64fc:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d650c:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d651c:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d652c:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d653c:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d654c:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d655c:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d656c:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d657c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d658c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d659c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d65ac:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d65bc:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d65cc:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d65dc:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d65ec:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d65fc:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d660c:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d661c:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d662c:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d663c:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d664c:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d665c:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d666c:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d667c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d668c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d6698 <_ZTV16Adafruit_SSD1306>:
	...
   d66a0:	40c5 000d 4185 000d 44c1 000d 5985 000d     .@...A...D...Y..
   d66b0:	4841 000d 41c1 000d 46c9 000d 4555 000d     AH...A...F..UE..
   d66c0:	4281 000d 4317 000d 434f 000d 436b 000d     .B...C..OC..kC..

000d66d0 <_ZTVN5spark12NetworkClassE>:
	...
   d66d8:	508d 000d 5097 000d 50a1 000d 50ab 000d     .P...P...P...P..
   d66e8:	50b5 000d 50c1 000d 50cd 000d 50d9 000d     .P...P...P...P..
   d66f8:	50e1 000d 50eb 000d 50f5 000d               .P...P...P..

000d6704 <_ZTVN5spark9WiFiClassE>:
	...
   d670c:	5233 000d 5229 000d 521f 000d 51d5 000d     3R..)R...R...Q..
   d671c:	5213 000d 5207 000d 51fb 000d 51f3 000d     .R...R...Q...Q..
   d672c:	51e9 000d 51df 000d 50f5 000d               .Q...Q...P..

000d6738 <_ZTVN5spark9MeshClassE>:
	...
   d6740:	52af 000d 52a5 000d 529b 000d 5291 000d     .R...R...R...R..
   d6750:	5285 000d 5279 000d 526d 000d 5265 000d     .R..yR..mR..eR..
   d6760:	525b 000d 5251 000d 50f5 000d               [R..QR...P..

000d676c <_ZTV8SPIClass>:
	...
   d6774:	53cd 000d 53cf 000d                         .S...S..

000d677c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d677c:	0800 1810 2820 3830                         .... (08

000d6784 <_ZTV7TwoWire>:
	...
   d678c:	5571 000d 55bb 000d 5593 000d 5573 000d     qU...U...U..sU..
   d679c:	559b 000d 55a3 000d 55ab 000d 55b3 000d     .U...U...U...U..

000d67ac <_ZTV9USBSerial>:
	...
   d67b4:	5621 000d 5671 000d 567f 000d 5985 000d     !V..qV...V...Y..
   d67c4:	565d 000d 5623 000d 5639 000d 566b 000d     ]V..#V..9V..kV..
   d67d4:	564f 000d 561d 000d                         OV...V..

000d67dc <_ZTV9IPAddress>:
	...
   d67e4:	573d 000d 572d 000d 572f 000d 005a 2b25     =W..-W../W..Z.%+
   d67f4:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d6804:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d6814:	6974 656d 6200 7561 0064 6553 6972 6c61     time.baud.Serial
   d6824:	5300 7265 6169 316c 7400 7079 0065 6170     .Serial1.type.pa
   d6834:	6172 006d 6d63 0064 6469 6800 646e 7300     ram.cmd.id.hnd.s
   d6844:	7274 006d 6966 746c 6c00 6c76 6100 6464     trm.filt.lvl.add
   d6854:	6148 646e 656c 0072 6572 6f6d 6576 6148     Handler.removeHa
   d6864:	646e 656c 0072 6e65 6d75 6148 646e 656c     ndler.enumHandle
   d6874:	7372 4a00 4f53 534e 7274 6165 4c6d 676f     rs.JSONStreamLog
   d6884:	6148 646e 656c 0072 7061 0070 3025 3031     Handler.app.%010
   d6894:	2075 5d00 0020 6425 2c00 0020 2928 203a     u .] .%d., .(): 
   d68a4:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d68b4:	7465 6961 736c 3d20 0020 0a0d 6600 6c00     etails = ....f.l
   d68c4:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
   d68d4:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d68e4:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d68f4:	0063 6c61 006c 0000                         c.all...

000d68fc <_ZTV11USARTSerial>:
	...
   d6904:	5a59 000d 5aa9 000d 5ab7 000d 5985 000d     YZ...Z...Z...Y..
   d6914:	5a6d 000d 5a8f 000d 5a7b 000d 5aa3 000d     mZ...Z..{Z...Z..
   d6924:	5a5b 000d 5a5f 000d                         [Z.._Z..

000d692c <_ZTVN5spark13EthernetClassE>:
	...
   d6934:	5c0f 000d 5c05 000d 5bfb 000d 5bf1 000d     .\...\...[...[..
   d6944:	5be5 000d 5bd9 000d 5bcd 000d 5bc5 000d     .[...[...[...[..
   d6954:	5bbb 000d 5bb1 000d 50f5 000d               .[...[...P..

000d6960 <_ZSt7nothrow>:
   d6960:	0000 0000                                   ....

000d6964 <__sf_fake_stdin>:
	...

000d6984 <__sf_fake_stdout>:
	...

000d69a4 <__sf_fake_stderr>:
	...
   d69c4:	0043                                        C.

000d69c6 <link_const_variable_data_end>:
	...

000d69c8 <link_constructors_location>:
   d69c8:	000d4195 	.word	0x000d4195
   d69cc:	000d4551 	.word	0x000d4551
   d69d0:	000d4c41 	.word	0x000d4c41
   d69d4:	000d51c1 	.word	0x000d51c1
   d69d8:	000d523d 	.word	0x000d523d
   d69dc:	000d537d 	.word	0x000d537d
   d69e0:	000d5945 	.word	0x000d5945
   d69e4:	000d5961 	.word	0x000d5961
   d69e8:	000d5975 	.word	0x000d5975
   d69ec:	000d5a31 	.word	0x000d5a31
   d69f0:	000d5b7d 	.word	0x000d5b7d
   d69f4:	000d5c19 	.word	0x000d5c19
   d69f8:	000d5e0d 	.word	0x000d5e0d
   d69fc:	000d5e91 	.word	0x000d5e91
   d6a00:	000d5f55 	.word	0x000d5f55
   d6a04:	000d6019 	.word	0x000d6019

000d6a08 <link_constructors_end>:
	...
