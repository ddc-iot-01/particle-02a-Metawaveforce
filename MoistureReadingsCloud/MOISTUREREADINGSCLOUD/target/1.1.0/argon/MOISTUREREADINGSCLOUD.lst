
c:/Users/217fa/Documents/IoT/particle-02a-Metawaveforce/MoistureReadingsCloud/MOISTUREREADINGSCLOUD/target/1.1.0/argon/MOISTUREREADINGSCLOUD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003448  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00017908  2**0
                  CONTENTS
  3 .data         0000047c  2003df2c  000d7460  0000df2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000448  2003e3a8  2003e3a8  0001e3a8  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d78dc  000d78dc  000178dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d7904  000d7904  00017904  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000a27de  00000000  00000000  00017908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000f13e  00000000  00000000  000ba0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00011eb8  00000000  00000000  000c9224  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001cd0  00000000  00000000  000db0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002b78  00000000  00000000  000dcdac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000345f7  00000000  00000000  000df924  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00025081  00000000  00000000  00113f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d6023  00000000  00000000  00138f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000afb8  00000000  00000000  0020efc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	90 6b 0d 00                                         .k..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fd6b 	bl	d6b08 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fd70 	bl	d6b1e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003df2c 	.word	0x2003df2c
   d4048:	000d7460 	.word	0x000d7460
   d404c:	2003e3a8 	.word	0x2003e3a8
   d4050:	2003e3a8 	.word	0x2003e3a8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fae5 	bl	d5628 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7460 	.word	0x000d7460
   d4080:	000d7420 	.word	0x000d7420

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b820 	b.w	d40c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f885 	bl	d4198 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 ba97 	b.w	d55c4 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 b81f 	b.w	d50d8 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 b81d 	b.w	d50d8 <free>
	...

000d40a0 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 ff8a 	bl	d4fc0 <panic_>
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4db1 	.word	0x000d4db1

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c4:	4770      	bx	lr
	...

000d40c8 <setup>:

int sensorValue = A5;
int delayTime=1000;
//int printsenorVaule = sensorValue;
// setup() runs once, when the device is first turned on.
void setup() {
   d40c8:	b510      	push	{r4, lr}
   Serial.begin(9600);
   d40ca:	f001 fb83 	bl	d57d4 <_Z16_fetch_usbserialv>
   Wire.begin();
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d40ce:	4c0d      	ldr	r4, [pc, #52]	; (d4104 <setup+0x3c>)
int sensorValue = A5;
int delayTime=1000;
//int printsenorVaule = sensorValue;
// setup() runs once, when the device is first turned on.
void setup() {
   Serial.begin(9600);
   d40d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d4:	f001 fb72 	bl	d57bc <_ZN9USBSerial5beginEl>
   Wire.begin();
   d40d8:	f001 fe9a 	bl	d5e10 <_Z19__fetch_global_Wirev>
   d40dc:	f001 fc48 	bl	d5970 <_ZN7TwoWire5beginEv>
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d40e0:	223c      	movs	r2, #60	; 0x3c
   d40e2:	2102      	movs	r1, #2
   d40e4:	4620      	mov	r0, r4
   d40e6:	f000 fac1 	bl	d466c <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay( );
   d40ea:	4620      	mov	r0, r4
   d40ec:	f000 fc04 	bl	d48f8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d40f0:	4620      	mov	r0, r4
   d40f2:	f000 fb8b 	bl	d480c <_ZN16Adafruit_SSD13067displayEv>
 //printsensorValue(sensorValue);
 
delay(delayTime);
   d40f6:	4b04      	ldr	r3, [pc, #16]	; (d4108 <setup+0x40>)

}
   d40f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
  display.clearDisplay( );
  display.display();
 //printsensorValue(sensorValue);
 
delay(delayTime);
   d40fc:	6818      	ldr	r0, [r3, #0]
   d40fe:	f001 ba23 	b.w	d5548 <delay>
   d4102:	bf00      	nop
   d4104:	2003e3ac 	.word	0x2003e3ac
   d4108:	2003df2c 	.word	0x2003df2c

000d410c <_Z21printThehomeschooldevv>:
 printThehomeschooldev();


 }

 void printThehomeschooldev() {
   d410c:	b510      	push	{r4, lr}
  display.clearDisplay();
   d410e:	4c20      	ldr	r4, [pc, #128]	; (d4190 <_Z21printThehomeschooldevv+0x84>)
   d4110:	4620      	mov	r0, r4
   d4112:	f000 fbf1 	bl	d48f8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4116:	4620      	mov	r0, r4
   d4118:	f000 fb78 	bl	d480c <_ZN16Adafruit_SSD13067displayEv>
  // display a pixel in each corner of the screen
  display.drawPixel(0, 0, WHITE);
   d411c:	2200      	movs	r2, #0
   d411e:	4611      	mov	r1, r2
   d4120:	4620      	mov	r0, r4
   d4122:	2301      	movs	r3, #1
   d4124:	f000 fa00 	bl	d4528 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 0, WHITE);
   d4128:	4620      	mov	r0, r4
   d412a:	2301      	movs	r3, #1
   d412c:	2200      	movs	r2, #0
   d412e:	217f      	movs	r1, #127	; 0x7f
   d4130:	f000 f9fa 	bl	d4528 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(0, 63, WHITE);
   d4134:	4620      	mov	r0, r4
   d4136:	2301      	movs	r3, #1
   d4138:	223f      	movs	r2, #63	; 0x3f
   d413a:	2100      	movs	r1, #0
   d413c:	f000 f9f4 	bl	d4528 <_ZN16Adafruit_SSD13069drawPixelEsst>
  display.drawPixel(127, 63, WHITE);
   d4140:	2301      	movs	r3, #1
   d4142:	223f      	movs	r2, #63	; 0x3f
   d4144:	4620      	mov	r0, r4
   d4146:	217f      	movs	r1, #127	; 0x7f
   d4148:	f000 f9ee 	bl	d4528 <_ZN16Adafruit_SSD13069drawPixelEsst>
 display.setTextSize(1);
   d414c:	4620      	mov	r0, r4
   d414e:	2101      	movs	r1, #1
   d4150:	f000 fd94 	bl	d4c7c <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4154:	4620      	mov	r0, r4
   d4156:	2101      	movs	r1, #1
   d4158:	f000 fd95 	bl	d4c86 <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(27,30);
   d415c:	221e      	movs	r2, #30
   d415e:	4620      	mov	r0, r4
   d4160:	211b      	movs	r1, #27
   d4162:	f000 fd88 	bl	d4c76 <_ZN12Adafruit_GFX9setCursorEss>
  display.print("Thomeschooldev");
   d4166:	490b      	ldr	r1, [pc, #44]	; (d4194 <_Z21printThehomeschooldevv+0x88>)
   d4168:	4620      	mov	r0, r4
   d416a:	f001 f8b9 	bl	d52e0 <_ZN5Print5printEPKc>
   delay(1000);
   d416e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4172:	f001 f9e9 	bl	d5548 <delay>
   display.display();
   d4176:	4620      	mov	r0, r4
   d4178:	f000 fb48 	bl	d480c <_ZN16Adafruit_SSD13067displayEv>
   delay(1000);
   d417c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4180:	f001 f9e2 	bl	d5548 <delay>
   display.display();
   d4184:	4620      	mov	r0, r4


 }
   d4186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.setCursor(27,30);
  display.print("Thomeschooldev");
   delay(1000);
   display.display();
   delay(1000);
   display.display();
   d418a:	f000 bb3f 	b.w	d480c <_ZN16Adafruit_SSD13067displayEv>
   d418e:	bf00      	nop
   d4190:	2003e3ac 	.word	0x2003e3ac
   d4194:	000d6ba4 	.word	0x000d6ba4

000d4198 <loop>:
delay(delayTime);

}
 // Put initialization like pinMode and begin functions here.
  // loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4198:	b538      	push	{r3, r4, r5, lr}
  int sensorValue = analogRead(A5);
   d419a:	200e      	movs	r0, #14
   d419c:	f001 fddc 	bl	d5d58 <analogRead>
   d41a0:	4605      	mov	r5, r0
  float voltage = sensorValue*(5.0 / 1023.0);
 Serial.println(voltage);
   d41a2:	f001 fb17 	bl	d57d4 <_Z16_fetch_usbserialv>
   d41a6:	4604      	mov	r4, r0
   d41a8:	4628      	mov	r0, r5
   d41aa:	f002 f8f1 	bl	d6390 <__aeabi_i2d>
   d41ae:	a30a      	add	r3, pc, #40	; (adr r3, d41d8 <loop+0x40>)
   d41b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41b4:	f002 f952 	bl	d645c <__aeabi_dmul>
   d41b8:	f002 fc48 	bl	d6a4c <__aeabi_d2f>
   d41bc:	f002 f8fa 	bl	d63b4 <__aeabi_f2d>
   d41c0:	ec41 0b10 	vmov	d0, r0, r1
   d41c4:	4620      	mov	r0, r4
   d41c6:	2102      	movs	r1, #2
   d41c8:	f001 f9a0 	bl	d550c <_ZN5Print7printlnEdi>
 printThehomeschooldev();


 }
   d41cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // loop() runs over and over again, as quickly as it can execute.
void loop() {
  int sensorValue = analogRead(A5);
  float voltage = sensorValue*(5.0 / 1023.0);
 Serial.println(voltage);
 printThehomeschooldev();
   d41d0:	f7ff bf9c 	b.w	d410c <_Z21printThehomeschooldevv>
   d41d4:	f3af 8000 	nop.w
   d41d8:	40501405 	.word	0x40501405
   d41dc:	3f740501 	.word	0x3f740501

000d41e0 <_ZN16Adafruit_SSD1306D0Ev>:
   d41e0:	b510      	push	{r4, lr}
   d41e2:	4604      	mov	r4, r0
   d41e4:	f7ff ff57 	bl	d4096 <_ZdlPv>
   d41e8:	4620      	mov	r0, r4
   d41ea:	bd10      	pop	{r4, pc}

000d41ec <_GLOBAL__sub_I_display>:
   display.display();
   delay(1000);
   display.display();


 }
   d41ec:	b510      	push	{r4, lr}
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include "Particle.h"
#include <wire.h>
#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1);
   d41ee:	4c07      	ldr	r4, [pc, #28]	; (d420c <_GLOBAL__sub_I_display+0x20>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41f0:	f000 fd66 	bl	d4cc0 <HAL_Pin_Map>
   d41f4:	f04f 31ff 	mov.w	r1, #4294967295
   d41f8:	4620      	mov	r0, r4
   d41fa:	f000 f9df 	bl	d45bc <_ZN16Adafruit_SSD1306C1Ea>
   d41fe:	4620      	mov	r0, r4
   d4200:	4a03      	ldr	r2, [pc, #12]	; (d4210 <_GLOBAL__sub_I_display+0x24>)
   d4202:	4904      	ldr	r1, [pc, #16]	; (d4214 <_GLOBAL__sub_I_display+0x28>)
   display.display();
   delay(1000);
   display.display();


 }
   d4204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include "Particle.h"
#include <wire.h>
#define OLED_ADDR   0x3C
Adafruit_SSD1306 display(-1);
   d4208:	f001 be22 	b.w	d5e50 <__aeabi_atexit>
   d420c:	2003e3ac 	.word	0x2003e3ac
   d4210:	2003e3a8 	.word	0x2003e3a8
   d4214:	000d40c5 	.word	0x000d40c5

000d4218 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4218:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d421a:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d421c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4220:	2c02      	cmp	r4, #2
   d4222:	d008      	beq.n	d4236 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4224:	2c03      	cmp	r4, #3
   d4226:	d00f      	beq.n	d4248 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4228:	2c01      	cmp	r4, #1
   d422a:	d170      	bne.n	d430e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d422c:	8904      	ldrh	r4, [r0, #8]
   d422e:	3c01      	subs	r4, #1
   d4230:	1aa2      	subs	r2, r4, r2
   d4232:	b212      	sxth	r2, r2
      break;
   d4234:	e00c      	b.n	d4250 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4236:	8944      	ldrh	r4, [r0, #10]
   d4238:	3c01      	subs	r4, #1
   d423a:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d423c:	8904      	ldrh	r4, [r0, #8]
   d423e:	1ae4      	subs	r4, r4, r3
   d4240:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4242:	b212      	sxth	r2, r2
      x -= (w-1);
   d4244:	b209      	sxth	r1, r1
      break;
   d4246:	e062      	b.n	d430e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4248:	8944      	ldrh	r4, [r0, #10]
   d424a:	1ae4      	subs	r4, r4, r3
   d424c:	1a61      	subs	r1, r4, r1
   d424e:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4250:	2a00      	cmp	r2, #0
   d4252:	db5b      	blt.n	d430c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4254:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4258:	4294      	cmp	r4, r2
   d425a:	f340 8090 	ble.w	d437e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d425e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4260:	bfbe      	ittt	lt
   d4262:	185b      	addlt	r3, r3, r1
   d4264:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4266:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4268:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d426c:	18cc      	adds	r4, r1, r3
   d426e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4270:	bfc4      	itt	gt
   d4272:	1a43      	subgt	r3, r0, r1
   d4274:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4276:	2b00      	cmp	r3, #0
   d4278:	f340 8081 	ble.w	d437e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d427c:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d427e:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4280:	4f3f      	ldr	r7, [pc, #252]	; (d4380 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4282:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4286:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d428a:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d428c:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4290:	d017      	beq.n	d42c2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4292:	f1c1 0108 	rsb	r1, r1, #8
   d4296:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4298:	493a      	ldr	r1, [pc, #232]	; (d4384 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d429a:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d429c:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d429e:	bf3f      	itttt	cc
   d42a0:	ebc3 0e00 	rsbcc	lr, r3, r0
   d42a4:	21ff      	movcc	r1, #255	; 0xff
   d42a6:	fa41 f10e 	asrcc.w	r1, r1, lr
   d42aa:	400e      	andcc	r6, r1
   d42ac:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d42ae:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d42b0:	bf0c      	ite	eq
   d42b2:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d42b4:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d42b6:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d42b8:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d42ba:	d360      	bcc.n	d437e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d42bc:	1a18      	subs	r0, r3, r0
   d42be:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d42c0:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d42c2:	2b07      	cmp	r3, #7
   d42c4:	d917      	bls.n	d42f6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d42c6:	2d01      	cmp	r5, #1
   d42c8:	bf0c      	ite	eq
   d42ca:	20ff      	moveq	r0, #255	; 0xff
   d42cc:	2000      	movne	r0, #0
   d42ce:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d42d2:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d42d4:	3a08      	subs	r2, #8
   d42d6:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d42d8:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d42da:	f801 0c80 	strb.w	r0, [r1, #-128]
   d42de:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d42e2:	d8f7      	bhi.n	d42d4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d42e4:	f1a3 0208 	sub.w	r2, r3, #8
   d42e8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d42ec:	3201      	adds	r2, #1
   d42ee:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d42f2:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d42f6:	2b00      	cmp	r3, #0
   d42f8:	d041      	beq.n	d437e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d42fa:	4a23      	ldr	r2, [pc, #140]	; (d4388 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d42fc:	5cd2      	ldrb	r2, [r2, r3]
   d42fe:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4300:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4302:	bf0c      	ite	eq
   d4304:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4306:	4393      	bicne	r3, r2
   d4308:	7023      	strb	r3, [r4, #0]
   d430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d430e:	2a00      	cmp	r2, #0
   d4310:	db35      	blt.n	d437e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4312:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4316:	4294      	cmp	r4, r2
   d4318:	dd31      	ble.n	d437e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d431a:	2900      	cmp	r1, #0
    w += x;
   d431c:	bfbc      	itt	lt
   d431e:	18c9      	addlt	r1, r1, r3
   d4320:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4322:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4326:	bfb8      	it	lt
   d4328:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d432a:	18ce      	adds	r6, r1, r3
   d432c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d432e:	bfc4      	itt	gt
   d4330:	1a63      	subgt	r3, r4, r1
   d4332:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4334:	2b00      	cmp	r3, #0
   d4336:	dd22      	ble.n	d437e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4338:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d433a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d433e:	4810      	ldr	r0, [pc, #64]	; (d4380 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4340:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4344:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d4346:	2001      	movs	r0, #1
   d4348:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d434c:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d434e:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4350:	d109      	bne.n	d4366 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4352:	3b01      	subs	r3, #1
   d4354:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d4356:	1c5c      	adds	r4, r3, #1
   d4358:	d011      	beq.n	d437e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d435a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d435e:	4310      	orrs	r0, r2
   d4360:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4364:	e7f5      	b.n	d4352 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d4366:	43d2      	mvns	r2, r2
   d4368:	b2d2      	uxtb	r2, r2
   d436a:	3b01      	subs	r3, #1
   d436c:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d436e:	1c58      	adds	r0, r3, #1
   d4370:	d005      	beq.n	d437e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4372:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4376:	4010      	ands	r0, r2
   d4378:	f801 0c01 	strb.w	r0, [r1, #-1]
   d437c:	e7f5      	b.n	d436a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d437e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4380:	2003df40 	.word	0x2003df40
   d4384:	2003df38 	.word	0x2003df38
   d4388:	2003df30 	.word	0x2003df30

000d438c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d438c:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d438e:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4390:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d4394:	2c02      	cmp	r4, #2
   d4396:	d008      	beq.n	d43aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4398:	2c03      	cmp	r4, #3
   d439a:	d00f      	beq.n	d43bc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d439c:	2c01      	cmp	r4, #1
   d439e:	d112      	bne.n	d43c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d43a0:	8904      	ldrh	r4, [r0, #8]
   d43a2:	1ae4      	subs	r4, r4, r3
   d43a4:	1aa2      	subs	r2, r4, r2
   d43a6:	b212      	sxth	r2, r2
      break;
   d43a8:	e06d      	b.n	d4486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d43aa:	8904      	ldrh	r4, [r0, #8]
   d43ac:	3c01      	subs	r4, #1
   d43ae:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d43b0:	8944      	ldrh	r4, [r0, #10]
   d43b2:	1ae4      	subs	r4, r4, r3
   d43b4:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d43b6:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d43b8:	b212      	sxth	r2, r2
      break;
   d43ba:	e004      	b.n	d43c6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d43bc:	8944      	ldrh	r4, [r0, #10]
   d43be:	3c01      	subs	r4, #1
   d43c0:	1a61      	subs	r1, r4, r1
   d43c2:	b209      	sxth	r1, r1
      break;
   d43c4:	e05f      	b.n	d4486 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d43c6:	2900      	cmp	r1, #0
   d43c8:	db5c      	blt.n	d4484 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d43ca:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d43ce:	428c      	cmp	r4, r1
   d43d0:	f340 8091 	ble.w	d44f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d43d4:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d43d6:	bfbc      	itt	lt
   d43d8:	18d2      	addlt	r2, r2, r3
   d43da:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d43dc:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d43e0:	bfb8      	it	lt
   d43e2:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d43e4:	18d4      	adds	r4, r2, r3
   d43e6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d43e8:	bfc4      	itt	gt
   d43ea:	1a83      	subgt	r3, r0, r2
   d43ec:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d43ee:	2b00      	cmp	r3, #0
   d43f0:	f340 8081 	ble.w	d44f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d43f4:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d43f6:	4e40      	ldr	r6, [pc, #256]	; (d44f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d43f8:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d43fa:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d43fc:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4400:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4404:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4408:	d017      	beq.n	d443a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d440a:	f1c4 0408 	rsb	r4, r4, #8
   d440e:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4410:	4c3a      	ldr	r4, [pc, #232]	; (d44fc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4412:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4414:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4416:	bf3f      	itttt	cc
   d4418:	ebc2 0e00 	rsbcc	lr, r2, r0
   d441c:	24ff      	movcc	r4, #255	; 0xff
   d441e:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4422:	4027      	andcc	r7, r4
   d4424:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d4426:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4428:	bf0c      	ite	eq
   d442a:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d442c:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d442e:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4430:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4432:	d360      	bcc.n	d44f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4434:	1a10      	subs	r0, r2, r0
   d4436:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4438:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d443a:	2a07      	cmp	r2, #7
   d443c:	d917      	bls.n	d446e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d443e:	2d01      	cmp	r5, #1
   d4440:	bf0c      	ite	eq
   d4442:	24ff      	moveq	r4, #255	; 0xff
   d4444:	2400      	movne	r4, #0
   d4446:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d444a:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d444c:	3908      	subs	r1, #8
   d444e:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4450:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4452:	f800 4c80 	strb.w	r4, [r0, #-128]
   d4456:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d445a:	d8f7      	bhi.n	d444c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d445c:	f1a2 0108 	sub.w	r1, r2, #8
   d4460:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4464:	3101      	adds	r1, #1
   d4466:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d446a:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d446e:	2a00      	cmp	r2, #0
   d4470:	d041      	beq.n	d44f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4472:	4923      	ldr	r1, [pc, #140]	; (d4500 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4474:	5c89      	ldrb	r1, [r1, r2]
   d4476:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d4478:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d447a:	bf0c      	ite	eq
   d447c:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d447e:	438a      	bicne	r2, r1
   d4480:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4482:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4484:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4486:	2900      	cmp	r1, #0
   d4488:	db35      	blt.n	d44f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d448a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d448e:	428c      	cmp	r4, r1
   d4490:	dd31      	ble.n	d44f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4492:	2a00      	cmp	r2, #0
    w += x;
   d4494:	bfbc      	itt	lt
   d4496:	18d2      	addlt	r2, r2, r3
   d4498:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d449a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d449e:	bfb8      	it	lt
   d44a0:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d44a2:	18d6      	adds	r6, r2, r3
   d44a4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d44a6:	bfc4      	itt	gt
   d44a8:	1aa3      	subgt	r3, r4, r2
   d44aa:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d44ac:	2b00      	cmp	r3, #0
   d44ae:	dd22      	ble.n	d44f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d44b0:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d44b2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d44b6:	4810      	ldr	r0, [pc, #64]	; (d44f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d44b8:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d44bc:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d44be:	2201      	movs	r2, #1
   d44c0:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d44c4:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d44c6:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d44c8:	d109      	bne.n	d44de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d44ca:	1e5a      	subs	r2, r3, #1
   d44cc:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d44ce:	1c5c      	adds	r4, r3, #1
   d44d0:	d011      	beq.n	d44f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d44d2:	f810 2b01 	ldrb.w	r2, [r0], #1
   d44d6:	430a      	orrs	r2, r1
   d44d8:	f800 2c01 	strb.w	r2, [r0, #-1]
   d44dc:	e7f5      	b.n	d44ca <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d44de:	43c9      	mvns	r1, r1
   d44e0:	b2c9      	uxtb	r1, r1
   d44e2:	1e5a      	subs	r2, r3, #1
   d44e4:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d44e6:	1c5a      	adds	r2, r3, #1
   d44e8:	d005      	beq.n	d44f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d44ea:	f810 2b01 	ldrb.w	r2, [r0], #1
   d44ee:	400a      	ands	r2, r1
   d44f0:	f800 2c01 	strb.w	r2, [r0, #-1]
   d44f4:	e7f5      	b.n	d44e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d44f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d44f8:	2003df40 	.word	0x2003df40
   d44fc:	2003df38 	.word	0x2003df38
   d4500:	2003df30 	.word	0x2003df30

000d4504 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>:
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   d4504:	b410      	push	{r4}
  
  if(hwSPI) {
   d4506:	b12a      	cbz	r2, d4514 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x10>
    (void)SPI.transfer(d);
   d4508:	4619      	mov	r1, r3
   d450a:	4806      	ldr	r0, [pc, #24]	; (d4524 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x20>)
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}
   d450c:	f85d 4b04 	ldr.w	r4, [sp], #4


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
   d4510:	f000 beaa 	b.w	d5268 <_ZN8SPIClass8transferEh>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4514:	2201      	movs	r2, #1
   d4516:	b2c9      	uxtb	r1, r1
   d4518:	b2c0      	uxtb	r0, r0
  }
}
   d451a:	f85d 4b04 	ldr.w	r4, [sp], #4
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d451e:	f001 bc32 	b.w	d5d86 <shiftOut>
   d4522:	bf00      	nop
   d4524:	2003e714 	.word	0x2003e714

000d4528 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d452a:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d452c:	4606      	mov	r6, r0
   d452e:	4614      	mov	r4, r2
   d4530:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4532:	db3f      	blt.n	d45b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4534:	f000 fbac 	bl	d4c90 <_ZN12Adafruit_GFX5widthEv>
   d4538:	4285      	cmp	r5, r0
   d453a:	da3b      	bge.n	d45b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d453c:	2c00      	cmp	r4, #0
   d453e:	db39      	blt.n	d45b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4540:	4630      	mov	r0, r6
   d4542:	f000 fba8 	bl	d4c96 <_ZN12Adafruit_GFX6heightEv>
   d4546:	4284      	cmp	r4, r0
   d4548:	da34      	bge.n	d45b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d454a:	4630      	mov	r0, r6
   d454c:	f000 fb9e 	bl	d4c8c <_ZN12Adafruit_GFX11getRotationEv>
   d4550:	2802      	cmp	r0, #2
   d4552:	d127      	bne.n	d45a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4554:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4556:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4558:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d455a:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d455c:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d455e:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4560:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4562:	b204      	sxth	r4, r0
   d4564:	e006      	b.n	d4574 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4566:	2801      	cmp	r0, #1
   d4568:	d104      	bne.n	d4574 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d456a:	8933      	ldrh	r3, [r6, #8]
   d456c:	3b01      	subs	r3, #1
   d456e:	1b1b      	subs	r3, r3, r4
   d4570:	462c      	mov	r4, r5
   d4572:	b21d      	sxth	r5, r3
   d4574:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4576:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4578:	fb94 f0f0 	sdiv	r0, r4, r0
   d457c:	b200      	sxth	r0, r0
   d457e:	4b0e      	ldr	r3, [pc, #56]	; (d45b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4580:	f004 0207 	and.w	r2, r4, #7
   d4584:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4588:	d104      	bne.n	d4594 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d458a:	4097      	lsls	r7, r2
   d458c:	5c5a      	ldrb	r2, [r3, r1]
   d458e:	4317      	orrs	r7, r2
   d4590:	545f      	strb	r7, [r3, r1]
   d4592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4594:	5c58      	ldrb	r0, [r3, r1]
   d4596:	2701      	movs	r7, #1
   d4598:	fa07 f202 	lsl.w	r2, r7, r2
   d459c:	ea20 0202 	bic.w	r2, r0, r2
   d45a0:	545a      	strb	r2, [r3, r1]
   d45a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d45a4:	2803      	cmp	r0, #3
   d45a6:	d1de      	bne.n	d4566 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d45a8:	8973      	ldrh	r3, [r6, #10]
   d45aa:	3b01      	subs	r3, #1
   d45ac:	1b5b      	subs	r3, r3, r5
   d45ae:	4625      	mov	r5, r4
   d45b0:	b21c      	sxth	r4, r3
   d45b2:	e7df      	b.n	d4574 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d45b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d45b6:	bf00      	nop
   d45b8:	2003df40 	.word	0x2003df40

000d45bc <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d45bc:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d45be:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d45c0:	4604      	mov	r4, r0
   d45c2:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d45c4:	2180      	movs	r1, #128	; 0x80
   d45c6:	f000 fa77 	bl	d4ab8 <_ZN12Adafruit_GFXC1Ess>
   d45ca:	4b06      	ldr	r3, [pc, #24]	; (d45e4 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d45cc:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d45ce:	23ff      	movs	r3, #255	; 0xff
   d45d0:	7763      	strb	r3, [r4, #29]
   d45d2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d45d6:	77e3      	strb	r3, [r4, #31]
   d45d8:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d45da:	f884 5020 	strb.w	r5, [r4, #32]
}
   d45de:	4620      	mov	r0, r4
   d45e0:	bd38      	pop	{r3, r4, r5, pc}
   d45e2:	bf00      	nop
   d45e4:	000d6bbc 	.word	0x000d6bbc

000d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d45e8:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d45ea:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d45ee:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d45f0:	4604      	mov	r4, r0
   d45f2:	460d      	mov	r5, r1
  if (sid != -1)
   d45f4:	d022      	beq.n	d463c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x54>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d45f6:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d45fa:	2101      	movs	r1, #1
   d45fc:	b280      	uxth	r0, r0
   d45fe:	f001 fb92 	bl	d5d26 <digitalWrite>
    digitalWrite(dc, LOW);
   d4602:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4606:	2100      	movs	r1, #0
   d4608:	b280      	uxth	r0, r0
   d460a:	f001 fb8c 	bl	d5d26 <digitalWrite>
    digitalWrite(cs, LOW);
   d460e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4612:	2100      	movs	r1, #0
   d4614:	b280      	uxth	r0, r0
   d4616:	f001 fb86 	bl	d5d26 <digitalWrite>
    fastSPIwrite(c);
   d461a:	f994 101e 	ldrsb.w	r1, [r4, #30]
   d461e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4622:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   d4626:	462b      	mov	r3, r5
   d4628:	f7ff ff6c 	bl	d4504 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
   d462c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4630:	2101      	movs	r1, #1
   d4632:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4638:	f001 bb75 	b.w	d5d26 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d463c:	f001 fbe8 	bl	d5e10 <_Z19__fetch_global_Wirev>
   d4640:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4644:	f001 f99e 	bl	d5984 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4648:	f001 fbe2 	bl	d5e10 <_Z19__fetch_global_Wirev>
   d464c:	6803      	ldr	r3, [r0, #0]
   d464e:	2100      	movs	r1, #0
   d4650:	689b      	ldr	r3, [r3, #8]
   d4652:	4798      	blx	r3
    Wire.write(c);
   d4654:	f001 fbdc 	bl	d5e10 <_Z19__fetch_global_Wirev>
   d4658:	6803      	ldr	r3, [r0, #0]
   d465a:	4629      	mov	r1, r5
   d465c:	689b      	ldr	r3, [r3, #8]
   d465e:	4798      	blx	r3
    Wire.endTransmission();
   d4660:	f001 fbd6 	bl	d5e10 <_Z19__fetch_global_Wirev>
  }
}
   d4664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d4668:	f001 b993 	b.w	d5992 <_ZN7TwoWire15endTransmissionEv>

000d466c <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d466c:	b538      	push	{r3, r4, r5, lr}
   d466e:	4604      	mov	r4, r0
   d4670:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4672:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4674:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4678:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d467a:	3301      	adds	r3, #1
   d467c:	d033      	beq.n	d46e6 <_ZN16Adafruit_SSD13065beginEhh+0x7a>
    pinMode(dc, OUTPUT);
   d467e:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4682:	2101      	movs	r1, #1
   d4684:	b280      	uxth	r0, r0
   d4686:	f001 fb3d 	bl	d5d04 <pinMode>
    pinMode(cs, OUTPUT);
   d468a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d468e:	2101      	movs	r1, #1
   d4690:	b280      	uxth	r0, r0
   d4692:	f001 fb37 	bl	d5d04 <pinMode>
    if (!hwSPI){
   d4696:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d469a:	b95b      	cbnz	r3, d46b4 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d469c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d46a0:	2101      	movs	r1, #1
   d46a2:	b280      	uxth	r0, r0
   d46a4:	f001 fb2e 	bl	d5d04 <pinMode>
    	pinMode(sclk, OUTPUT);
   d46a8:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d46ac:	2101      	movs	r1, #1
   d46ae:	b280      	uxth	r0, r0
   d46b0:	f001 fb28 	bl	d5d04 <pinMode>
    	}
    if (hwSPI){
   d46b4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d46b8:	b1cb      	cbz	r3, d46ee <_ZN16Adafruit_SSD13065beginEhh+0x82>
        digitalWrite(cs, HIGH);
   d46ba:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d46be:	2101      	movs	r1, #1
   d46c0:	b280      	uxth	r0, r0
   d46c2:	f001 fb30 	bl	d5d26 <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
   d46c6:	2101      	movs	r1, #1
   d46c8:	484f      	ldr	r0, [pc, #316]	; (d4808 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d46ca:	f000 fd6c 	bl	d51a6 <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
   d46ce:	2110      	movs	r1, #16
   d46d0:	484d      	ldr	r0, [pc, #308]	; (d4808 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d46d2:	f000 fdb5 	bl	d5240 <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
   d46d6:	2100      	movs	r1, #0
   d46d8:	484b      	ldr	r0, [pc, #300]	; (d4808 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d46da:	f000 fd67 	bl	d51ac <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
   d46de:	484a      	ldr	r0, [pc, #296]	; (d4808 <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
   d46e0:	f000 fd5c 	bl	d519c <_ZN8SPIClass5beginEv>
   d46e4:	e003      	b.n	d46ee <_ZN16Adafruit_SSD13065beginEhh+0x82>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d46e6:	f001 fb93 	bl	d5e10 <_Z19__fetch_global_Wirev>
   d46ea:	f001 f941 	bl	d5970 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d46ee:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d46f2:	2101      	movs	r1, #1
   d46f4:	b280      	uxth	r0, r0
   d46f6:	f001 fb05 	bl	d5d04 <pinMode>
  digitalWrite(rst, HIGH);
   d46fa:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d46fe:	2101      	movs	r1, #1
   d4700:	b280      	uxth	r0, r0
   d4702:	f001 fb10 	bl	d5d26 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d4706:	2001      	movs	r0, #1
   d4708:	f000 ff1e 	bl	d5548 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d470c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4710:	2100      	movs	r1, #0
   d4712:	b280      	uxth	r0, r0
   d4714:	f001 fb07 	bl	d5d26 <digitalWrite>
  // wait 10ms
  delay(10);
   d4718:	200a      	movs	r0, #10
   d471a:	f000 ff15 	bl	d5548 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d471e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4722:	2101      	movs	r1, #1
   d4724:	b280      	uxth	r0, r0
   d4726:	f001 fafe 	bl	d5d26 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d472a:	4620      	mov	r0, r4
   d472c:	21ae      	movs	r1, #174	; 0xae
   d472e:	f7ff ff5b 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4732:	4620      	mov	r0, r4
   d4734:	21d5      	movs	r1, #213	; 0xd5
   d4736:	f7ff ff57 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d473a:	4620      	mov	r0, r4
   d473c:	2180      	movs	r1, #128	; 0x80
   d473e:	f7ff ff53 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4742:	4620      	mov	r0, r4
   d4744:	21a8      	movs	r1, #168	; 0xa8
   d4746:	f7ff ff4f 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d474a:	4620      	mov	r0, r4
   d474c:	213f      	movs	r1, #63	; 0x3f
   d474e:	f7ff ff4b 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4752:	4620      	mov	r0, r4
   d4754:	21d3      	movs	r1, #211	; 0xd3
   d4756:	f7ff ff47 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d475a:	4620      	mov	r0, r4
   d475c:	2100      	movs	r1, #0
   d475e:	f7ff ff43 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4762:	4620      	mov	r0, r4
   d4764:	2140      	movs	r1, #64	; 0x40
   d4766:	f7ff ff3f 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d476a:	218d      	movs	r1, #141	; 0x8d
   d476c:	4620      	mov	r0, r4
   d476e:	f7ff ff3b 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4772:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4774:	bf0c      	ite	eq
   d4776:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d4778:	2114      	movne	r1, #20
   d477a:	4620      	mov	r0, r4
   d477c:	f7ff ff34 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4780:	4620      	mov	r0, r4
   d4782:	2120      	movs	r1, #32
   d4784:	f7ff ff30 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4788:	4620      	mov	r0, r4
   d478a:	2100      	movs	r1, #0
   d478c:	f7ff ff2c 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4790:	4620      	mov	r0, r4
   d4792:	21a1      	movs	r1, #161	; 0xa1
   d4794:	f7ff ff28 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4798:	4620      	mov	r0, r4
   d479a:	21c8      	movs	r1, #200	; 0xc8
   d479c:	f7ff ff24 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d47a0:	4620      	mov	r0, r4
   d47a2:	21da      	movs	r1, #218	; 0xda
   d47a4:	f7ff ff20 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d47a8:	4620      	mov	r0, r4
   d47aa:	2112      	movs	r1, #18
   d47ac:	f7ff ff1c 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d47b0:	2181      	movs	r1, #129	; 0x81
   d47b2:	4620      	mov	r0, r4
   d47b4:	f7ff ff18 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d47b8:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d47ba:	bf0c      	ite	eq
   d47bc:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d47be:	21cf      	movne	r1, #207	; 0xcf
   d47c0:	4620      	mov	r0, r4
   d47c2:	f7ff ff11 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d47c6:	21d9      	movs	r1, #217	; 0xd9
   d47c8:	4620      	mov	r0, r4
   d47ca:	f7ff ff0d 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d47ce:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d47d0:	bf0c      	ite	eq
   d47d2:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d47d4:	21f1      	movne	r1, #241	; 0xf1
   d47d6:	4620      	mov	r0, r4
   d47d8:	f7ff ff06 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d47dc:	4620      	mov	r0, r4
   d47de:	21db      	movs	r1, #219	; 0xdb
   d47e0:	f7ff ff02 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d47e4:	4620      	mov	r0, r4
   d47e6:	2140      	movs	r1, #64	; 0x40
   d47e8:	f7ff fefe 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d47ec:	4620      	mov	r0, r4
   d47ee:	21a4      	movs	r1, #164	; 0xa4
   d47f0:	f7ff fefa 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d47f4:	4620      	mov	r0, r4
   d47f6:	21a6      	movs	r1, #166	; 0xa6
   d47f8:	f7ff fef6 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d47fc:	4620      	mov	r0, r4
   d47fe:	21af      	movs	r1, #175	; 0xaf
}
   d4800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4804:	f7ff bef0 	b.w	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
   d4808:	2003e714 	.word	0x2003e714

000d480c <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4810:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4812:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4814:	f7ff fee8 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4818:	2100      	movs	r1, #0
   d481a:	4620      	mov	r0, r4
   d481c:	f7ff fee4 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4820:	217f      	movs	r1, #127	; 0x7f
   d4822:	4620      	mov	r0, r4
   d4824:	f7ff fee0 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d4828:	2122      	movs	r1, #34	; 0x22
   d482a:	4620      	mov	r0, r4
   d482c:	f7ff fedc 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4830:	2100      	movs	r1, #0
   d4832:	4620      	mov	r0, r4
   d4834:	f7ff fed8 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4838:	2107      	movs	r1, #7
   d483a:	4620      	mov	r0, r4
   d483c:	f7ff fed4 	bl	d45e8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d4840:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4844:	f8df 80ac 	ldr.w	r8, [pc, #172]	; d48f4 <_ZN16Adafruit_SSD13067displayEv+0xe8>
   d4848:	3301      	adds	r3, #1
   d484a:	d02e      	beq.n	d48aa <_ZN16Adafruit_SSD13067displayEv+0x9e>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d484c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4850:	2101      	movs	r1, #1
   d4852:	b280      	uxth	r0, r0
   d4854:	f001 fa67 	bl	d5d26 <digitalWrite>
    digitalWrite(dc, HIGH);
   d4858:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d485c:	2101      	movs	r1, #1
   d485e:	b280      	uxth	r0, r0
   d4860:	f001 fa61 	bl	d5d26 <digitalWrite>
    digitalWrite(cs, LOW);
   d4864:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4868:	2100      	movs	r1, #0
   d486a:	b280      	uxth	r0, r0
   d486c:	f001 fa5b 	bl	d5d26 <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4870:	2001      	movs	r0, #1
   d4872:	f000 fa9d 	bl	d4db0 <HAL_Delay_Microseconds>
   d4876:	2500      	movs	r5, #0
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d4878:	f818 3005 	ldrb.w	r3, [r8, r5]
   d487c:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   d4880:	f994 101e 	ldrsb.w	r1, [r4, #30]
   d4884:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4888:	3501      	adds	r5, #1
   d488a:	f7ff fe3b 	bl	d4504 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d488e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4892:	d1f1      	bne.n	d4878 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d4894:	2001      	movs	r0, #1
   d4896:	f000 fa8b 	bl	d4db0 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d489a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d489e:	2101      	movs	r1, #1
   d48a0:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d48a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d48a6:	f001 ba3e 	b.w	d5d26 <digitalWrite>
   d48aa:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d48ac:	f001 fab0 	bl	d5e10 <_Z19__fetch_global_Wirev>
   d48b0:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d48b4:	f001 f866 	bl	d5984 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d48b8:	f001 faaa 	bl	d5e10 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d48bc:	6803      	ldr	r3, [r0, #0]
   d48be:	2140      	movs	r1, #64	; 0x40
   d48c0:	689b      	ldr	r3, [r3, #8]
   d48c2:	4798      	blx	r3
   d48c4:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d48c6:	f001 faa3 	bl	d5e10 <_Z19__fetch_global_Wirev>
   d48ca:	19af      	adds	r7, r5, r6
   d48cc:	6803      	ldr	r3, [r0, #0]
   d48ce:	b2bf      	uxth	r7, r7
   d48d0:	689b      	ldr	r3, [r3, #8]
   d48d2:	f818 1007 	ldrb.w	r1, [r8, r7]
   d48d6:	3601      	adds	r6, #1
   d48d8:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d48da:	2e10      	cmp	r6, #16
   d48dc:	d1f3      	bne.n	d48c6 <_ZN16Adafruit_SSD13067displayEv+0xba>
   d48de:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d48e0:	f001 fa96 	bl	d5e10 <_Z19__fetch_global_Wirev>
   d48e4:	b2ad      	uxth	r5, r5
   d48e6:	f001 f854 	bl	d5992 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d48ea:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d48ee:	d1dd      	bne.n	d48ac <_ZN16Adafruit_SSD13067displayEv+0xa0>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d48f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d48f4:	2003df40 	.word	0x2003df40

000d48f8 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d48f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d48fc:	2100      	movs	r1, #0
   d48fe:	4801      	ldr	r0, [pc, #4]	; (d4904 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4900:	f002 b90d 	b.w	d6b1e <memset>
   d4904:	2003df40 	.word	0x2003df40

000d4908 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4908:	f000 b9da 	b.w	d4cc0 <HAL_Pin_Map>

000d490c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4910:	b085      	sub	sp, #20
   d4912:	461e      	mov	r6, r3
   d4914:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4918:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d491c:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d491e:	1a9a      	subs	r2, r3, r2
   d4920:	2a00      	cmp	r2, #0
   d4922:	bfb8      	it	lt
   d4924:	4252      	neglt	r2, r2
   d4926:	9200      	str	r2, [sp, #0]
   d4928:	1a72      	subs	r2, r6, r1
   d492a:	2a00      	cmp	r2, #0
   d492c:	bfb8      	it	lt
   d492e:	4252      	neglt	r2, r2
   d4930:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4932:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4934:	9a00      	ldr	r2, [sp, #0]
   d4936:	9901      	ldr	r1, [sp, #4]
   d4938:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d493a:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d493c:	dd05      	ble.n	d494a <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d493e:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d4940:	461e      	mov	r6, r3
   d4942:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4944:	4622      	mov	r2, r4
    swap(x0, y0);
   d4946:	462c      	mov	r4, r5
   d4948:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d494a:	42b4      	cmp	r4, r6
   d494c:	dd05      	ble.n	d495a <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d494e:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4950:	461d      	mov	r5, r3
   d4952:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4954:	4622      	mov	r2, r4
   d4956:	4634      	mov	r4, r6
   d4958:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d495a:	1b5a      	subs	r2, r3, r5
   d495c:	2a00      	cmp	r2, #0
   d495e:	bfb8      	it	lt
   d4960:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4962:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4966:	429d      	cmp	r5, r3
   d4968:	bfb4      	ite	lt
   d496a:	2301      	movlt	r3, #1
   d496c:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4970:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4974:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4976:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d4978:	fa0f f788 	sxth.w	r7, r8
   d497c:	2202      	movs	r2, #2
   d497e:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4982:	42b4      	cmp	r4, r6
   d4984:	dc1f      	bgt.n	d49c6 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d4986:	9a01      	ldr	r2, [sp, #4]
   d4988:	9b00      	ldr	r3, [sp, #0]
   d498a:	4293      	cmp	r3, r2
   d498c:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d4990:	bfc8      	it	gt
   d4992:	4622      	movgt	r2, r4
   d4994:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4998:	bfc8      	it	gt
   d499a:	4629      	movgt	r1, r5
   d499c:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d499e:	bfdc      	itt	le
   d49a0:	462a      	movle	r2, r5
   d49a2:	4621      	movle	r1, r4
   d49a4:	4648      	mov	r0, r9
   d49a6:	47d8      	blx	fp
    }
    err -= dy;
   d49a8:	9b03      	ldr	r3, [sp, #12]
   d49aa:	1aff      	subs	r7, r7, r3
   d49ac:	b2bb      	uxth	r3, r7
   d49ae:	b21f      	sxth	r7, r3
    if (err < 0) {
   d49b0:	2f00      	cmp	r7, #0
   d49b2:	da05      	bge.n	d49c0 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d49b4:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d49b6:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d49ba:	4415      	add	r5, r2
   d49bc:	b22d      	sxth	r5, r5
      err += dx;
   d49be:	b23f      	sxth	r7, r7
   d49c0:	3401      	adds	r4, #1
   d49c2:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d49c4:	e7dd      	b.n	d4982 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d49c6:	b005      	add	sp, #20
   d49c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d49cc <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d49cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d49d0:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d49d4:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d49d6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d49da:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d49dc:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d49de:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d49e0:	4691      	mov	r9, r2
   d49e2:	460d      	mov	r5, r1
   d49e4:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d49e6:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d49e8:	6823      	ldr	r3, [r4, #0]
   d49ea:	9600      	str	r6, [sp, #0]
   d49ec:	f10a 32ff 	add.w	r2, sl, #4294967295
   d49f0:	444a      	add	r2, r9
   d49f2:	69df      	ldr	r7, [r3, #28]
   d49f4:	4629      	mov	r1, r5
   d49f6:	4643      	mov	r3, r8
   d49f8:	4620      	mov	r0, r4
   d49fa:	b212      	sxth	r2, r2
   d49fc:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d49fe:	6823      	ldr	r3, [r4, #0]
   d4a00:	9600      	str	r6, [sp, #0]
   d4a02:	699f      	ldr	r7, [r3, #24]
   d4a04:	464a      	mov	r2, r9
   d4a06:	4653      	mov	r3, sl
   d4a08:	4629      	mov	r1, r5
   d4a0a:	4620      	mov	r0, r4
   d4a0c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4a0e:	6823      	ldr	r3, [r4, #0]
   d4a10:	960a      	str	r6, [sp, #40]	; 0x28
   d4a12:	f108 31ff 	add.w	r1, r8, #4294967295
   d4a16:	4429      	add	r1, r5
   d4a18:	699d      	ldr	r5, [r3, #24]
   d4a1a:	464a      	mov	r2, r9
   d4a1c:	4653      	mov	r3, sl
   d4a1e:	b209      	sxth	r1, r1
   d4a20:	4620      	mov	r0, r4
   d4a22:	46ac      	mov	ip, r5
}
   d4a24:	b002      	add	sp, #8
   d4a26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d4a2a:	4760      	bx	ip

000d4a2c <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4a2e:	3b01      	subs	r3, #1
   d4a30:	4413      	add	r3, r2
   d4a32:	6804      	ldr	r4, [r0, #0]
   d4a34:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4a38:	9501      	str	r5, [sp, #4]
   d4a3a:	b21b      	sxth	r3, r3
   d4a3c:	9300      	str	r3, [sp, #0]
   d4a3e:	6964      	ldr	r4, [r4, #20]
   d4a40:	460b      	mov	r3, r1
   d4a42:	47a0      	blx	r4
}
   d4a44:	b003      	add	sp, #12
   d4a46:	bd30      	pop	{r4, r5, pc}

000d4a48 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4a4a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4a4e:	6804      	ldr	r4, [r0, #0]
   d4a50:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4a54:	3b01      	subs	r3, #1
   d4a56:	440b      	add	r3, r1
   d4a58:	6964      	ldr	r4, [r4, #20]
   d4a5a:	b21b      	sxth	r3, r3
   d4a5c:	47a0      	blx	r4
}
   d4a5e:	b003      	add	sp, #12
   d4a60:	bd30      	pop	{r4, r5, pc}

000d4a62 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4a62:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4a66:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d4a6a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4a6e:	4605      	mov	r5, r0
   d4a70:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4a72:	460c      	mov	r4, r1
   d4a74:	eb01 0a03 	add.w	sl, r1, r3
   d4a78:	4554      	cmp	r4, sl
   d4a7a:	da0b      	bge.n	d4a94 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4a7c:	682b      	ldr	r3, [r5, #0]
   d4a7e:	f8cd 9000 	str.w	r9, [sp]
   d4a82:	699e      	ldr	r6, [r3, #24]
   d4a84:	4621      	mov	r1, r4
   d4a86:	4643      	mov	r3, r8
   d4a88:	463a      	mov	r2, r7
   d4a8a:	4628      	mov	r0, r5
   d4a8c:	3401      	adds	r4, #1
   d4a8e:	47b0      	blx	r6
   d4a90:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4a92:	e7f1      	b.n	d4a78 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4a94:	b002      	add	sp, #8
   d4a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4a9a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4a9a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4a9c:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4aa0:	6804      	ldr	r4, [r0, #0]
   d4aa2:	9101      	str	r1, [sp, #4]
   d4aa4:	9200      	str	r2, [sp, #0]
   d4aa6:	2200      	movs	r2, #0
   d4aa8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4aac:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d4aae:	4611      	mov	r1, r2
   d4ab0:	47a0      	blx	r4
}
   d4ab2:	b002      	add	sp, #8
   d4ab4:	bd10      	pop	{r4, pc}

000d4ab6 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d4ab6:	4770      	bx	lr

000d4ab8 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4ab8:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4aba:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4abc:	2400      	movs	r4, #0
   d4abe:	4d08      	ldr	r5, [pc, #32]	; (d4ae0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4ac0:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4ac2:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4ac4:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d4ac6:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d4aca:	2201      	movs	r2, #1
   d4acc:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d4ace:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4ad0:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4ad2:	8204      	strh	r4, [r0, #16]
   d4ad4:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d4ad6:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d4ad8:	82c1      	strh	r1, [r0, #22]
   d4ada:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d4adc:	7682      	strb	r2, [r0, #26]
}
   d4ade:	bd30      	pop	{r4, r5, pc}
   d4ae0:	000d6bf4 	.word	0x000d6bf4

000d4ae4 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ae8:	b08f      	sub	sp, #60	; 0x3c
   d4aea:	4605      	mov	r5, r0
   d4aec:	9106      	str	r1, [sp, #24]
   d4aee:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d4af2:	9107      	str	r1, [sp, #28]
   d4af4:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4af8:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d4afa:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4afe:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4b00:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d4b04:	4281      	cmp	r1, r0
   d4b06:	dd7c      	ble.n	d4c02 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d4b08:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d4b0c:	4291      	cmp	r1, r2
   d4b0e:	dd78      	ble.n	d4c02 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d4b10:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d4b12:	fb11 0008 	smlabb	r0, r1, r8, r0
   d4b16:	2800      	cmp	r0, #0
   d4b18:	dd73      	ble.n	d4c02 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4b1a:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d4b1e:	2800      	cmp	r0, #0
   d4b20:	dd6f      	ble.n	d4c02 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4b22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4b26:	b296      	uxth	r6, r2
   d4b28:	930c      	str	r3, [sp, #48]	; 0x30
   d4b2a:	f106 0308 	add.w	r3, r6, #8
   d4b2e:	b29b      	uxth	r3, r3
   d4b30:	9109      	str	r1, [sp, #36]	; 0x24
   d4b32:	2400      	movs	r4, #0
   d4b34:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d4b36:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4b38:	bf1c      	itt	ne
   d4b3a:	4b33      	ldrne	r3, [pc, #204]	; (d4c08 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d4b3c:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4b3e:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4b40:	bf16      	itet	ne
   d4b42:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d4b44:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4b48:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4b4c:	9604      	str	r6, [sp, #16]
   d4b4e:	fa1f f388 	uxth.w	r3, r8
   d4b52:	9303      	str	r3, [sp, #12]
   d4b54:	9a03      	ldr	r2, [sp, #12]
   d4b56:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d4b5a:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4b5e:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4b62:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4b64:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4b66:	920a      	str	r2, [sp, #40]	; 0x28
   d4b68:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4b6a:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4b6e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4b70:	f019 0f01 	tst.w	r9, #1
   d4b74:	d011      	beq.n	d4b9a <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4b76:	f1b8 0f01 	cmp.w	r8, #1
   d4b7a:	682b      	ldr	r3, [r5, #0]
   d4b7c:	d103      	bne.n	d4b86 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d4b7e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4b82:	9b07      	ldr	r3, [sp, #28]
   d4b84:	e014      	b.n	d4bb0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4b86:	9a07      	ldr	r2, [sp, #28]
   d4b88:	9201      	str	r2, [sp, #4]
   d4b8a:	f8cd a000 	str.w	sl, [sp]
   d4b8e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4b92:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4b96:	4653      	mov	r3, sl
   d4b98:	e018      	b.n	d4bcc <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d4b9a:	9b07      	ldr	r3, [sp, #28]
   d4b9c:	9a08      	ldr	r2, [sp, #32]
   d4b9e:	4293      	cmp	r3, r2
   d4ba0:	d017      	beq.n	d4bd2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4ba2:	f1b8 0f01 	cmp.w	r8, #1
   d4ba6:	682b      	ldr	r3, [r5, #0]
   d4ba8:	d107      	bne.n	d4bba <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d4baa:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4bae:	4613      	mov	r3, r2
   d4bb0:	b23a      	sxth	r2, r7
   d4bb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4bb4:	4628      	mov	r0, r5
   d4bb6:	47d8      	blx	fp
   d4bb8:	e00b      	b.n	d4bd2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4bba:	9a08      	ldr	r2, [sp, #32]
   d4bbc:	9201      	str	r2, [sp, #4]
   d4bbe:	f8cd a000 	str.w	sl, [sp]
   d4bc2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4bc6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4bca:	4653      	mov	r3, sl
   d4bcc:	990a      	ldr	r1, [sp, #40]	; 0x28
   d4bce:	4628      	mov	r0, r5
   d4bd0:	47d8      	blx	fp
   d4bd2:	9b04      	ldr	r3, [sp, #16]
   d4bd4:	9a03      	ldr	r2, [sp, #12]
   d4bd6:	4413      	add	r3, r2
   d4bd8:	b29b      	uxth	r3, r3
   d4bda:	9304      	str	r3, [sp, #16]
   d4bdc:	9b05      	ldr	r3, [sp, #20]
   d4bde:	4413      	add	r3, r2
   d4be0:	b29b      	uxth	r3, r3
   d4be2:	3701      	adds	r7, #1
   d4be4:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4be8:	b2bf      	uxth	r7, r7
   d4bea:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d4bec:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4bf0:	d1be      	bne.n	d4b70 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d4bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4bf4:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d4bf6:	3401      	adds	r4, #1
   d4bf8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4bfc:	b264      	sxtb	r4, r4
   d4bfe:	9309      	str	r3, [sp, #36]	; 0x24
   d4c00:	d199      	bne.n	d4b36 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d4c02:	b00f      	add	sp, #60	; 0x3c
   d4c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c08:	000d6c24 	.word	0x000d6c24

000d4c0c <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4c0c:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d4c0e:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4c10:	b085      	sub	sp, #20
   d4c12:	4604      	mov	r4, r0
   d4c14:	460b      	mov	r3, r1

  if (c == '\n') {
   d4c16:	d104      	bne.n	d4c22 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d4c18:	7e02      	ldrb	r2, [r0, #24]
   d4c1a:	8a43      	ldrh	r3, [r0, #18]
   d4c1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4c20:	e023      	b.n	d4c6a <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d4c22:	290d      	cmp	r1, #13
   d4c24:	d024      	beq.n	d4c70 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4c26:	7e05      	ldrb	r5, [r0, #24]
   d4c28:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4c2c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d4c30:	9502      	str	r5, [sp, #8]
   d4c32:	8ac5      	ldrh	r5, [r0, #22]
   d4c34:	9501      	str	r5, [sp, #4]
   d4c36:	8a85      	ldrh	r5, [r0, #20]
   d4c38:	9500      	str	r5, [sp, #0]
   d4c3a:	f7ff ff53 	bl	d4ae4 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d4c3e:	7e22      	ldrb	r2, [r4, #24]
   d4c40:	8a23      	ldrh	r3, [r4, #16]
   d4c42:	b291      	uxth	r1, r2
   d4c44:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4c48:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4c4c:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d4c4e:	b21b      	sxth	r3, r3
   d4c50:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4c52:	b168      	cbz	r0, d4c70 <_ZN12Adafruit_GFX5writeEh+0x64>
   d4c54:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4c58:	f06f 0505 	mvn.w	r5, #5
   d4c5c:	fb05 0202 	mla	r2, r5, r2, r0
   d4c60:	4293      	cmp	r3, r2
   d4c62:	dd05      	ble.n	d4c70 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4c64:	8a63      	ldrh	r3, [r4, #18]
   d4c66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4c6a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4c6c:	2300      	movs	r3, #0
   d4c6e:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d4c70:	2001      	movs	r0, #1
   d4c72:	b005      	add	sp, #20
   d4c74:	bd30      	pop	{r4, r5, pc}

000d4c76 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d4c76:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d4c78:	8242      	strh	r2, [r0, #18]
   d4c7a:	4770      	bx	lr

000d4c7c <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d4c7c:	2900      	cmp	r1, #0
   d4c7e:	bf08      	it	eq
   d4c80:	2101      	moveq	r1, #1
   d4c82:	7601      	strb	r1, [r0, #24]
   d4c84:	4770      	bx	lr

000d4c86 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d4c86:	82c1      	strh	r1, [r0, #22]
   d4c88:	8281      	strh	r1, [r0, #20]
   d4c8a:	4770      	bx	lr

000d4c8c <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d4c8c:	7e40      	ldrb	r0, [r0, #25]
   d4c8e:	4770      	bx	lr

000d4c90 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d4c90:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4c94:	4770      	bx	lr

000d4c96 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d4c96:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d4c9a:	4770      	bx	lr

000d4c9c <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4c9c:	f000 b810 	b.w	d4cc0 <HAL_Pin_Map>

000d4ca0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <netdb_freeaddrinfo+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	689b      	ldr	r3, [r3, #8]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	00030268 	.word	0x00030268

000d4cb0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <netdb_getaddrinfo+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	68db      	ldr	r3, [r3, #12]
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	00030268 	.word	0x00030268

000d4cc0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <HAL_Pin_Map+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	681b      	ldr	r3, [r3, #0]
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	0003022c 	.word	0x0003022c

000d4cd0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <HAL_Validate_Pin_Function+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	685b      	ldr	r3, [r3, #4]
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	0003022c 	.word	0x0003022c

000d4ce0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <HAL_Pin_Mode+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	689b      	ldr	r3, [r3, #8]
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	0003022c 	.word	0x0003022c

000d4cf0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <HAL_Get_Pin_Mode+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	68db      	ldr	r3, [r3, #12]
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	0003022c 	.word	0x0003022c

000d4d00 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <HAL_GPIO_Write+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	691b      	ldr	r3, [r3, #16]
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	0003022c 	.word	0x0003022c

000d4d10 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <HAL_ADC_Read+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	0003022c 	.word	0x0003022c

000d4d20 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <HAL_SPI_Begin+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	681b      	ldr	r3, [r3, #0]
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	00030230 	.word	0x00030230

000d4d30 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <HAL_SPI_Set_Bit_Order+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	689b      	ldr	r3, [r3, #8]
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	00030230 	.word	0x00030230

000d4d40 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b02      	ldr	r3, [pc, #8]	; (d4d4c <HAL_SPI_Set_Data_Mode+0xc>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	68db      	ldr	r3, [r3, #12]
   d4d48:	9301      	str	r3, [sp, #4]
   d4d4a:	bd08      	pop	{r3, pc}
   d4d4c:	00030230 	.word	0x00030230

000d4d50 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d4d50:	b508      	push	{r3, lr}
   d4d52:	4b02      	ldr	r3, [pc, #8]	; (d4d5c <HAL_SPI_Set_Clock_Divider+0xc>)
   d4d54:	681b      	ldr	r3, [r3, #0]
   d4d56:	691b      	ldr	r3, [r3, #16]
   d4d58:	9301      	str	r3, [sp, #4]
   d4d5a:	bd08      	pop	{r3, pc}
   d4d5c:	00030230 	.word	0x00030230

000d4d60 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4d60:	b508      	push	{r3, lr}
   d4d62:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <HAL_SPI_Send_Receive_Data+0xc>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	695b      	ldr	r3, [r3, #20]
   d4d68:	9301      	str	r3, [sp, #4]
   d4d6a:	bd08      	pop	{r3, pc}
   d4d6c:	00030230 	.word	0x00030230

000d4d70 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4d70:	b508      	push	{r3, lr}
   d4d72:	4b02      	ldr	r3, [pc, #8]	; (d4d7c <HAL_SPI_Init+0xc>)
   d4d74:	681b      	ldr	r3, [r3, #0]
   d4d76:	69db      	ldr	r3, [r3, #28]
   d4d78:	9301      	str	r3, [sp, #4]
   d4d7a:	bd08      	pop	{r3, pc}
   d4d7c:	00030230 	.word	0x00030230

000d4d80 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4d80:	b508      	push	{r3, lr}
   d4d82:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <HAL_SPI_Is_Enabled+0xc>)
   d4d84:	681b      	ldr	r3, [r3, #0]
   d4d86:	6a1b      	ldr	r3, [r3, #32]
   d4d88:	9301      	str	r3, [sp, #4]
   d4d8a:	bd08      	pop	{r3, pc}
   d4d8c:	00030230 	.word	0x00030230

000d4d90 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4d90:	b508      	push	{r3, lr}
   d4d92:	4b02      	ldr	r3, [pc, #8]	; (d4d9c <HAL_SPI_Info+0xc>)
   d4d94:	681b      	ldr	r3, [r3, #0]
   d4d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d98:	9301      	str	r3, [sp, #4]
   d4d9a:	bd08      	pop	{r3, pc}
   d4d9c:	00030230 	.word	0x00030230

000d4da0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4da0:	b508      	push	{r3, lr}
   d4da2:	4b02      	ldr	r3, [pc, #8]	; (d4dac <HAL_RNG_GetRandomNumber+0xc>)
   d4da4:	681b      	ldr	r3, [r3, #0]
   d4da6:	685b      	ldr	r3, [r3, #4]
   d4da8:	9301      	str	r3, [sp, #4]
   d4daa:	bd08      	pop	{r3, pc}
   d4dac:	00030218 	.word	0x00030218

000d4db0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4db0:	b508      	push	{r3, lr}
   d4db2:	4b02      	ldr	r3, [pc, #8]	; (d4dbc <HAL_Delay_Microseconds+0xc>)
   d4db4:	681b      	ldr	r3, [r3, #0]
   d4db6:	68db      	ldr	r3, [r3, #12]
   d4db8:	9301      	str	r3, [sp, #4]
   d4dba:	bd08      	pop	{r3, pc}
   d4dbc:	00030218 	.word	0x00030218

000d4dc0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4dc0:	b508      	push	{r3, lr}
   d4dc2:	4b02      	ldr	r3, [pc, #8]	; (d4dcc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4dc4:	681b      	ldr	r3, [r3, #0]
   d4dc6:	695b      	ldr	r3, [r3, #20]
   d4dc8:	9301      	str	r3, [sp, #4]
   d4dca:	bd08      	pop	{r3, pc}
   d4dcc:	00030218 	.word	0x00030218

000d4dd0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4dd0:	b508      	push	{r3, lr}
   d4dd2:	4b02      	ldr	r3, [pc, #8]	; (d4ddc <os_thread_is_current+0xc>)
   d4dd4:	681b      	ldr	r3, [r3, #0]
   d4dd6:	689b      	ldr	r3, [r3, #8]
   d4dd8:	9301      	str	r3, [sp, #4]
   d4dda:	bd08      	pop	{r3, pc}
   d4ddc:	00030248 	.word	0x00030248

000d4de0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4de0:	b508      	push	{r3, lr}
   d4de2:	4b02      	ldr	r3, [pc, #8]	; (d4dec <os_thread_join+0xc>)
   d4de4:	681b      	ldr	r3, [r3, #0]
   d4de6:	691b      	ldr	r3, [r3, #16]
   d4de8:	9301      	str	r3, [sp, #4]
   d4dea:	bd08      	pop	{r3, pc}
   d4dec:	00030248 	.word	0x00030248

000d4df0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4df0:	b508      	push	{r3, lr}
   d4df2:	4b02      	ldr	r3, [pc, #8]	; (d4dfc <os_thread_cleanup+0xc>)
   d4df4:	681b      	ldr	r3, [r3, #0]
   d4df6:	695b      	ldr	r3, [r3, #20]
   d4df8:	9301      	str	r3, [sp, #4]
   d4dfa:	bd08      	pop	{r3, pc}
   d4dfc:	00030248 	.word	0x00030248

000d4e00 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4e00:	b508      	push	{r3, lr}
   d4e02:	4b02      	ldr	r3, [pc, #8]	; (d4e0c <os_mutex_create+0xc>)
   d4e04:	681b      	ldr	r3, [r3, #0]
   d4e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e08:	9301      	str	r3, [sp, #4]
   d4e0a:	bd08      	pop	{r3, pc}
   d4e0c:	00030248 	.word	0x00030248

000d4e10 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4e10:	b508      	push	{r3, lr}
   d4e12:	4b02      	ldr	r3, [pc, #8]	; (d4e1c <os_mutex_recursive_create+0xc>)
   d4e14:	681b      	ldr	r3, [r3, #0]
   d4e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e18:	9301      	str	r3, [sp, #4]
   d4e1a:	bd08      	pop	{r3, pc}
   d4e1c:	00030248 	.word	0x00030248

000d4e20 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4e20:	b508      	push	{r3, lr}
   d4e22:	4b02      	ldr	r3, [pc, #8]	; (d4e2c <inet_inet_ntop+0xc>)
   d4e24:	681b      	ldr	r3, [r3, #0]
   d4e26:	695b      	ldr	r3, [r3, #20]
   d4e28:	9301      	str	r3, [sp, #4]
   d4e2a:	bd08      	pop	{r3, pc}
   d4e2c:	00030264 	.word	0x00030264

000d4e30 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4e30:	b508      	push	{r3, lr}
   d4e32:	4b02      	ldr	r3, [pc, #8]	; (d4e3c <HAL_USART_Init+0xc>)
   d4e34:	681b      	ldr	r3, [r3, #0]
   d4e36:	681b      	ldr	r3, [r3, #0]
   d4e38:	9301      	str	r3, [sp, #4]
   d4e3a:	bd08      	pop	{r3, pc}
   d4e3c:	0003023c 	.word	0x0003023c

000d4e40 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4e40:	b508      	push	{r3, lr}
   d4e42:	4b02      	ldr	r3, [pc, #8]	; (d4e4c <HAL_USART_Write_Data+0xc>)
   d4e44:	681b      	ldr	r3, [r3, #0]
   d4e46:	68db      	ldr	r3, [r3, #12]
   d4e48:	9301      	str	r3, [sp, #4]
   d4e4a:	bd08      	pop	{r3, pc}
   d4e4c:	0003023c 	.word	0x0003023c

000d4e50 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4e50:	b508      	push	{r3, lr}
   d4e52:	4b02      	ldr	r3, [pc, #8]	; (d4e5c <HAL_USART_Available_Data+0xc>)
   d4e54:	681b      	ldr	r3, [r3, #0]
   d4e56:	691b      	ldr	r3, [r3, #16]
   d4e58:	9301      	str	r3, [sp, #4]
   d4e5a:	bd08      	pop	{r3, pc}
   d4e5c:	0003023c 	.word	0x0003023c

000d4e60 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4e60:	b508      	push	{r3, lr}
   d4e62:	4b02      	ldr	r3, [pc, #8]	; (d4e6c <HAL_USART_Read_Data+0xc>)
   d4e64:	681b      	ldr	r3, [r3, #0]
   d4e66:	695b      	ldr	r3, [r3, #20]
   d4e68:	9301      	str	r3, [sp, #4]
   d4e6a:	bd08      	pop	{r3, pc}
   d4e6c:	0003023c 	.word	0x0003023c

000d4e70 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4e70:	b508      	push	{r3, lr}
   d4e72:	4b02      	ldr	r3, [pc, #8]	; (d4e7c <HAL_USART_Peek_Data+0xc>)
   d4e74:	681b      	ldr	r3, [r3, #0]
   d4e76:	699b      	ldr	r3, [r3, #24]
   d4e78:	9301      	str	r3, [sp, #4]
   d4e7a:	bd08      	pop	{r3, pc}
   d4e7c:	0003023c 	.word	0x0003023c

000d4e80 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4e80:	b508      	push	{r3, lr}
   d4e82:	4b02      	ldr	r3, [pc, #8]	; (d4e8c <HAL_USART_Flush_Data+0xc>)
   d4e84:	681b      	ldr	r3, [r3, #0]
   d4e86:	69db      	ldr	r3, [r3, #28]
   d4e88:	9301      	str	r3, [sp, #4]
   d4e8a:	bd08      	pop	{r3, pc}
   d4e8c:	0003023c 	.word	0x0003023c

000d4e90 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4e90:	b508      	push	{r3, lr}
   d4e92:	4b02      	ldr	r3, [pc, #8]	; (d4e9c <HAL_USART_Is_Enabled+0xc>)
   d4e94:	681b      	ldr	r3, [r3, #0]
   d4e96:	6a1b      	ldr	r3, [r3, #32]
   d4e98:	9301      	str	r3, [sp, #4]
   d4e9a:	bd08      	pop	{r3, pc}
   d4e9c:	0003023c 	.word	0x0003023c

000d4ea0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4ea0:	b508      	push	{r3, lr}
   d4ea2:	4b02      	ldr	r3, [pc, #8]	; (d4eac <HAL_USART_Available_Data_For_Write+0xc>)
   d4ea4:	681b      	ldr	r3, [r3, #0]
   d4ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ea8:	9301      	str	r3, [sp, #4]
   d4eaa:	bd08      	pop	{r3, pc}
   d4eac:	0003023c 	.word	0x0003023c

000d4eb0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4eb0:	b508      	push	{r3, lr}
   d4eb2:	4b02      	ldr	r3, [pc, #8]	; (d4ebc <HAL_I2C_Begin+0xc>)
   d4eb4:	681b      	ldr	r3, [r3, #0]
   d4eb6:	68db      	ldr	r3, [r3, #12]
   d4eb8:	9301      	str	r3, [sp, #4]
   d4eba:	bd08      	pop	{r3, pc}
   d4ebc:	00030228 	.word	0x00030228

000d4ec0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4ec0:	b508      	push	{r3, lr}
   d4ec2:	4b02      	ldr	r3, [pc, #8]	; (d4ecc <HAL_I2C_Begin_Transmission+0xc>)
   d4ec4:	681b      	ldr	r3, [r3, #0]
   d4ec6:	699b      	ldr	r3, [r3, #24]
   d4ec8:	9301      	str	r3, [sp, #4]
   d4eca:	bd08      	pop	{r3, pc}
   d4ecc:	00030228 	.word	0x00030228

000d4ed0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4ed0:	b508      	push	{r3, lr}
   d4ed2:	4b02      	ldr	r3, [pc, #8]	; (d4edc <HAL_I2C_End_Transmission+0xc>)
   d4ed4:	681b      	ldr	r3, [r3, #0]
   d4ed6:	69db      	ldr	r3, [r3, #28]
   d4ed8:	9301      	str	r3, [sp, #4]
   d4eda:	bd08      	pop	{r3, pc}
   d4edc:	00030228 	.word	0x00030228

000d4ee0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4ee0:	b508      	push	{r3, lr}
   d4ee2:	4b02      	ldr	r3, [pc, #8]	; (d4eec <HAL_I2C_Write_Data+0xc>)
   d4ee4:	681b      	ldr	r3, [r3, #0]
   d4ee6:	6a1b      	ldr	r3, [r3, #32]
   d4ee8:	9301      	str	r3, [sp, #4]
   d4eea:	bd08      	pop	{r3, pc}
   d4eec:	00030228 	.word	0x00030228

000d4ef0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4ef0:	b508      	push	{r3, lr}
   d4ef2:	4b02      	ldr	r3, [pc, #8]	; (d4efc <HAL_I2C_Available_Data+0xc>)
   d4ef4:	681b      	ldr	r3, [r3, #0]
   d4ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ef8:	9301      	str	r3, [sp, #4]
   d4efa:	bd08      	pop	{r3, pc}
   d4efc:	00030228 	.word	0x00030228

000d4f00 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b02      	ldr	r3, [pc, #8]	; (d4f0c <HAL_I2C_Read_Data+0xc>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f08:	9301      	str	r3, [sp, #4]
   d4f0a:	bd08      	pop	{r3, pc}
   d4f0c:	00030228 	.word	0x00030228

000d4f10 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4f10:	b508      	push	{r3, lr}
   d4f12:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <HAL_I2C_Peek_Data+0xc>)
   d4f14:	681b      	ldr	r3, [r3, #0]
   d4f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f18:	9301      	str	r3, [sp, #4]
   d4f1a:	bd08      	pop	{r3, pc}
   d4f1c:	00030228 	.word	0x00030228

000d4f20 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4f20:	b508      	push	{r3, lr}
   d4f22:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <HAL_I2C_Flush_Data+0xc>)
   d4f24:	681b      	ldr	r3, [r3, #0]
   d4f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f28:	9301      	str	r3, [sp, #4]
   d4f2a:	bd08      	pop	{r3, pc}
   d4f2c:	00030228 	.word	0x00030228

000d4f30 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4f30:	b508      	push	{r3, lr}
   d4f32:	4b02      	ldr	r3, [pc, #8]	; (d4f3c <HAL_I2C_Is_Enabled+0xc>)
   d4f34:	681b      	ldr	r3, [r3, #0]
   d4f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f38:	9301      	str	r3, [sp, #4]
   d4f3a:	bd08      	pop	{r3, pc}
   d4f3c:	00030228 	.word	0x00030228

000d4f40 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <HAL_I2C_Init+0xc>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f48:	9301      	str	r3, [sp, #4]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	00030228 	.word	0x00030228

000d4f50 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <HAL_USB_USART_Init+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	681b      	ldr	r3, [r3, #0]
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	0003024c 	.word	0x0003024c

000d4f60 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <HAL_USB_USART_Begin+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	685b      	ldr	r3, [r3, #4]
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	0003024c 	.word	0x0003024c

000d4f70 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <HAL_USB_USART_Available_Data+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	691b      	ldr	r3, [r3, #16]
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	0003024c 	.word	0x0003024c

000d4f80 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	695b      	ldr	r3, [r3, #20]
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	0003024c 	.word	0x0003024c

000d4f90 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <HAL_USB_USART_Receive_Data+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	699b      	ldr	r3, [r3, #24]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	0003024c 	.word	0x0003024c

000d4fa0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <HAL_USB_USART_Send_Data+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	69db      	ldr	r3, [r3, #28]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	0003024c 	.word	0x0003024c

000d4fb0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <HAL_USB_USART_Flush_Data+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	6a1b      	ldr	r3, [r3, #32]
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	0003024c 	.word	0x0003024c

000d4fc0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b02      	ldr	r3, [pc, #8]	; (d4fcc <panic_+0xc>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fc8:	9301      	str	r3, [sp, #4]
   d4fca:	bd08      	pop	{r3, pc}
   d4fcc:	00030260 	.word	0x00030260

000d4fd0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4fd0:	b508      	push	{r3, lr}
   d4fd2:	4b02      	ldr	r3, [pc, #8]	; (d4fdc <set_system_mode+0xc>)
   d4fd4:	681b      	ldr	r3, [r3, #0]
   d4fd6:	685b      	ldr	r3, [r3, #4]
   d4fd8:	9301      	str	r3, [sp, #4]
   d4fda:	bd08      	pop	{r3, pc}
   d4fdc:	00030220 	.word	0x00030220

000d4fe0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4fe0:	b508      	push	{r3, lr}
   d4fe2:	4b02      	ldr	r3, [pc, #8]	; (d4fec <system_delay_ms+0xc>)
   d4fe4:	681b      	ldr	r3, [r3, #0]
   d4fe6:	695b      	ldr	r3, [r3, #20]
   d4fe8:	9301      	str	r3, [sp, #4]
   d4fea:	bd08      	pop	{r3, pc}
   d4fec:	00030220 	.word	0x00030220

000d4ff0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ff0:	b508      	push	{r3, lr}
   d4ff2:	4b03      	ldr	r3, [pc, #12]	; (d5000 <system_ctrl_set_app_request_handler+0x10>)
   d4ff4:	681b      	ldr	r3, [r3, #0]
   d4ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ffa:	9301      	str	r3, [sp, #4]
   d4ffc:	bd08      	pop	{r3, pc}
   d4ffe:	0000      	.short	0x0000
   d5000:	00030220 	.word	0x00030220

000d5004 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b03      	ldr	r3, [pc, #12]	; (d5014 <system_ctrl_set_result+0x10>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d500e:	9301      	str	r3, [sp, #4]
   d5010:	bd08      	pop	{r3, pc}
   d5012:	0000      	.short	0x0000
   d5014:	00030220 	.word	0x00030220

000d5018 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5018:	b508      	push	{r3, lr}
   d501a:	4b02      	ldr	r3, [pc, #8]	; (d5024 <network_connect+0xc>)
   d501c:	681b      	ldr	r3, [r3, #0]
   d501e:	685b      	ldr	r3, [r3, #4]
   d5020:	9301      	str	r3, [sp, #4]
   d5022:	bd08      	pop	{r3, pc}
   d5024:	00030240 	.word	0x00030240

000d5028 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5028:	b508      	push	{r3, lr}
   d502a:	4b02      	ldr	r3, [pc, #8]	; (d5034 <network_connecting+0xc>)
   d502c:	681b      	ldr	r3, [r3, #0]
   d502e:	689b      	ldr	r3, [r3, #8]
   d5030:	9301      	str	r3, [sp, #4]
   d5032:	bd08      	pop	{r3, pc}
   d5034:	00030240 	.word	0x00030240

000d5038 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5038:	b508      	push	{r3, lr}
   d503a:	4b02      	ldr	r3, [pc, #8]	; (d5044 <network_disconnect+0xc>)
   d503c:	681b      	ldr	r3, [r3, #0]
   d503e:	68db      	ldr	r3, [r3, #12]
   d5040:	9301      	str	r3, [sp, #4]
   d5042:	bd08      	pop	{r3, pc}
   d5044:	00030240 	.word	0x00030240

000d5048 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5048:	b508      	push	{r3, lr}
   d504a:	4b02      	ldr	r3, [pc, #8]	; (d5054 <network_ready+0xc>)
   d504c:	681b      	ldr	r3, [r3, #0]
   d504e:	691b      	ldr	r3, [r3, #16]
   d5050:	9301      	str	r3, [sp, #4]
   d5052:	bd08      	pop	{r3, pc}
   d5054:	00030240 	.word	0x00030240

000d5058 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5058:	b508      	push	{r3, lr}
   d505a:	4b02      	ldr	r3, [pc, #8]	; (d5064 <network_on+0xc>)
   d505c:	681b      	ldr	r3, [r3, #0]
   d505e:	695b      	ldr	r3, [r3, #20]
   d5060:	9301      	str	r3, [sp, #4]
   d5062:	bd08      	pop	{r3, pc}
   d5064:	00030240 	.word	0x00030240

000d5068 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5068:	b508      	push	{r3, lr}
   d506a:	4b02      	ldr	r3, [pc, #8]	; (d5074 <network_off+0xc>)
   d506c:	681b      	ldr	r3, [r3, #0]
   d506e:	699b      	ldr	r3, [r3, #24]
   d5070:	9301      	str	r3, [sp, #4]
   d5072:	bd08      	pop	{r3, pc}
   d5074:	00030240 	.word	0x00030240

000d5078 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5078:	b508      	push	{r3, lr}
   d507a:	4b02      	ldr	r3, [pc, #8]	; (d5084 <network_listen+0xc>)
   d507c:	681b      	ldr	r3, [r3, #0]
   d507e:	69db      	ldr	r3, [r3, #28]
   d5080:	9301      	str	r3, [sp, #4]
   d5082:	bd08      	pop	{r3, pc}
   d5084:	00030240 	.word	0x00030240

000d5088 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5088:	b508      	push	{r3, lr}
   d508a:	4b02      	ldr	r3, [pc, #8]	; (d5094 <network_listening+0xc>)
   d508c:	681b      	ldr	r3, [r3, #0]
   d508e:	6a1b      	ldr	r3, [r3, #32]
   d5090:	9301      	str	r3, [sp, #4]
   d5092:	bd08      	pop	{r3, pc}
   d5094:	00030240 	.word	0x00030240

000d5098 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5098:	b508      	push	{r3, lr}
   d509a:	4b02      	ldr	r3, [pc, #8]	; (d50a4 <network_set_listen_timeout+0xc>)
   d509c:	681b      	ldr	r3, [r3, #0]
   d509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50a0:	9301      	str	r3, [sp, #4]
   d50a2:	bd08      	pop	{r3, pc}
   d50a4:	00030240 	.word	0x00030240

000d50a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d50a8:	b508      	push	{r3, lr}
   d50aa:	4b02      	ldr	r3, [pc, #8]	; (d50b4 <network_get_listen_timeout+0xc>)
   d50ac:	681b      	ldr	r3, [r3, #0]
   d50ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50b0:	9301      	str	r3, [sp, #4]
   d50b2:	bd08      	pop	{r3, pc}
   d50b4:	00030240 	.word	0x00030240

000d50b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d50b8:	b508      	push	{r3, lr}
   d50ba:	4b02      	ldr	r3, [pc, #8]	; (d50c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d50bc:	681b      	ldr	r3, [r3, #0]
   d50be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d50c0:	9301      	str	r3, [sp, #4]
   d50c2:	bd08      	pop	{r3, pc}
   d50c4:	00030244 	.word	0x00030244

000d50c8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d50c8:	b508      	push	{r3, lr}
   d50ca:	4b02      	ldr	r3, [pc, #8]	; (d50d4 <malloc+0xc>)
   d50cc:	681b      	ldr	r3, [r3, #0]
   d50ce:	681b      	ldr	r3, [r3, #0]
   d50d0:	9301      	str	r3, [sp, #4]
   d50d2:	bd08      	pop	{r3, pc}
   d50d4:	0003021c 	.word	0x0003021c

000d50d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <free+0xc>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	685b      	ldr	r3, [r3, #4]
   d50e0:	9301      	str	r3, [sp, #4]
   d50e2:	bd08      	pop	{r3, pc}
   d50e4:	0003021c 	.word	0x0003021c

000d50e8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50e8:	2200      	movs	r2, #0
   d50ea:	4611      	mov	r1, r2
   d50ec:	6840      	ldr	r0, [r0, #4]
   d50ee:	f7ff bfcb 	b.w	d5088 <network_listening>

000d50f2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d50f2:	2200      	movs	r2, #0
   d50f4:	4611      	mov	r1, r2
   d50f6:	6840      	ldr	r0, [r0, #4]
   d50f8:	f7ff bfd6 	b.w	d50a8 <network_get_listen_timeout>

000d50fc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d50fc:	2200      	movs	r2, #0
   d50fe:	6840      	ldr	r0, [r0, #4]
   d5100:	f7ff bfca 	b.w	d5098 <network_set_listen_timeout>

000d5104 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5104:	2200      	movs	r2, #0
   d5106:	f081 0101 	eor.w	r1, r1, #1
   d510a:	6840      	ldr	r0, [r0, #4]
   d510c:	f7ff bfb4 	b.w	d5078 <network_listen>

000d5110 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5110:	2300      	movs	r3, #0
   d5112:	461a      	mov	r2, r3
   d5114:	4619      	mov	r1, r3
   d5116:	6840      	ldr	r0, [r0, #4]
   d5118:	f7ff bfa6 	b.w	d5068 <network_off>

000d511c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d511c:	2300      	movs	r3, #0
   d511e:	461a      	mov	r2, r3
   d5120:	4619      	mov	r1, r3
   d5122:	6840      	ldr	r0, [r0, #4]
   d5124:	f7ff bf98 	b.w	d5058 <network_on>

000d5128 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5128:	2200      	movs	r2, #0
   d512a:	4611      	mov	r1, r2
   d512c:	6840      	ldr	r0, [r0, #4]
   d512e:	f7ff bf8b 	b.w	d5048 <network_ready>

000d5132 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5132:	2200      	movs	r2, #0
   d5134:	4611      	mov	r1, r2
   d5136:	6840      	ldr	r0, [r0, #4]
   d5138:	f7ff bf76 	b.w	d5028 <network_connecting>

000d513c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d513c:	2200      	movs	r2, #0
   d513e:	2102      	movs	r1, #2
   d5140:	6840      	ldr	r0, [r0, #4]
   d5142:	f7ff bf79 	b.w	d5038 <network_disconnect>

000d5146 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5146:	2300      	movs	r3, #0
   d5148:	461a      	mov	r2, r3
   d514a:	6840      	ldr	r0, [r0, #4]
   d514c:	f7ff bf64 	b.w	d5018 <network_connect>

000d5150 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5150:	4b02      	ldr	r3, [pc, #8]	; (d515c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5152:	2203      	movs	r2, #3
   d5154:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5156:	4a02      	ldr	r2, [pc, #8]	; (d5160 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5158:	601a      	str	r2, [r3, #0]
   d515a:	4770      	bx	lr
   d515c:	2003e3d0 	.word	0x2003e3d0
   d5160:	000d7128 	.word	0x000d7128

000d5164 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5164:	4770      	bx	lr

000d5166 <_ZN8SPIClassD0Ev>:
   d5166:	b510      	push	{r4, lr}
   d5168:	4604      	mov	r4, r0
   d516a:	f7fe ff94 	bl	d4096 <_ZdlPv>
   d516e:	4620      	mov	r0, r4
   d5170:	bd10      	pop	{r4, pc}
	...

000d5174 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5174:	b570      	push	{r4, r5, r6, lr}
   d5176:	4b08      	ldr	r3, [pc, #32]	; (d5198 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5178:	6003      	str	r3, [r0, #0]
   d517a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d517c:	2500      	movs	r5, #0
   d517e:	460e      	mov	r6, r1
   d5180:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5184:	f7ff fe3c 	bl	d4e00 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5188:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d518a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d518c:	f7ff fdf0 	bl	d4d70 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5190:	60a5      	str	r5, [r4, #8]
}
   d5192:	4620      	mov	r0, r4
   d5194:	bd70      	pop	{r4, r5, r6, pc}
   d5196:	bf00      	nop
   d5198:	000d715c 	.word	0x000d715c

000d519c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d519c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d51a0:	7900      	ldrb	r0, [r0, #4]
   d51a2:	f7ff bdbd 	b.w	d4d20 <HAL_SPI_Begin>

000d51a6 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d51a6:	7900      	ldrb	r0, [r0, #4]
   d51a8:	f7ff bdc2 	b.w	d4d30 <HAL_SPI_Set_Bit_Order>

000d51ac <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
   d51ac:	7900      	ldrb	r0, [r0, #4]
   d51ae:	f7ff bdc7 	b.w	d4d40 <HAL_SPI_Set_Data_Mode>
	...

000d51b4 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d51b4:	4a05      	ldr	r2, [pc, #20]	; (d51cc <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
   d51b6:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
   d51b8:	5c99      	ldrb	r1, [r3, r2]
   d51ba:	4281      	cmp	r1, r0
   d51bc:	d002      	beq.n	d51c4 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
   d51be:	3301      	adds	r3, #1
   d51c0:	2b08      	cmp	r3, #8
   d51c2:	d1f9      	bne.n	d51b8 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
   d51c4:	1c58      	adds	r0, r3, #1
}
   d51c6:	b2c0      	uxtb	r0, r0
   d51c8:	4770      	bx	lr
   d51ca:	bf00      	nop
   d51cc:	000d7164 	.word	0x000d7164

000d51d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d51d0:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d51d2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d51d4:	6018      	str	r0, [r3, #0]
   d51d6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d51d8:	6818      	ldr	r0, [r3, #0]
   d51da:	4288      	cmp	r0, r1
   d51dc:	b2e5      	uxtb	r5, r4
   d51de:	d906      	bls.n	d51ee <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d51e0:	3401      	adds	r4, #1
   d51e2:	2c08      	cmp	r4, #8
   d51e4:	d002      	beq.n	d51ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d51e6:	0840      	lsrs	r0, r0, #1
   d51e8:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d51ea:	e7f5      	b.n	d51d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d51ec:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d51f0:	5d5b      	ldrb	r3, [r3, r5]
   d51f2:	7013      	strb	r3, [r2, #0]
   d51f4:	bd30      	pop	{r4, r5, pc}
   d51f6:	bf00      	nop
   d51f8:	000d7164 	.word	0x000d7164

000d51fc <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d51fc:	b570      	push	{r4, r5, r6, lr}
   d51fe:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
   d5200:	7906      	ldrb	r6, [r0, #4]
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
   d5202:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5206:	4604      	mov	r4, r0
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d5208:	2214      	movs	r2, #20
   d520a:	2100      	movs	r1, #0
   d520c:	a803      	add	r0, sp, #12
   d520e:	f001 fc86 	bl	d6b1e <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d5212:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d5214:	a903      	add	r1, sp, #12
   d5216:	4630      	mov	r0, r6
   d5218:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d521a:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
   d521e:	f7ff fdb7 	bl	d4d90 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
   d5222:	ab02      	add	r3, sp, #8
   d5224:	f10d 0207 	add.w	r2, sp, #7
   d5228:	4629      	mov	r1, r5
   d522a:	9804      	ldr	r0, [sp, #16]
   d522c:	f7ff ffd0 	bl	d51d0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5230:	7920      	ldrb	r0, [r4, #4]
   d5232:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5236:	f7ff fd8b 	bl	d4d50 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
   d523a:	9802      	ldr	r0, [sp, #8]
   d523c:	b008      	add	sp, #32
   d523e:	bd70      	pop	{r4, r5, r6, pc}

000d5240 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5240:	b538      	push	{r3, r4, r5, lr}
   d5242:	4604      	mov	r4, r0
   d5244:	4608      	mov	r0, r1
    if (dividerReference)
   d5246:	68a5      	ldr	r5, [r4, #8]
   d5248:	b14d      	cbz	r5, d525e <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
   d524a:	f7ff ffb3 	bl	d51b4 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d524e:	2201      	movs	r2, #1
   d5250:	fa25 f100 	lsr.w	r1, r5, r0
   d5254:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
   d5256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
   d525a:	f7ff bfcf 	b.w	d51fc <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d525e:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5264:	f7ff bd74 	b.w	d4d50 <HAL_SPI_Set_Clock_Divider>

000d5268 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5268:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d526a:	7900      	ldrb	r0, [r0, #4]
   d526c:	f7ff fd78 	bl	d4d60 <HAL_SPI_Send_Receive_Data>
}
   d5270:	b2c0      	uxtb	r0, r0
   d5272:	bd08      	pop	{r3, pc}

000d5274 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5274:	7900      	ldrb	r0, [r0, #4]
   d5276:	f7ff bd83 	b.w	d4d80 <HAL_SPI_Is_Enabled>
	...

000d527c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d527c:	4b04      	ldr	r3, [pc, #16]	; (d5290 <_GLOBAL__sub_I_System+0x14>)
   d527e:	2000      	movs	r0, #0
   d5280:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5284:	7018      	strb	r0, [r3, #0]
   d5286:	8058      	strh	r0, [r3, #2]
   d5288:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d528a:	f7ff bea1 	b.w	d4fd0 <set_system_mode>
   d528e:	bf00      	nop
   d5290:	2003e3d8 	.word	0x2003e3d8

000d5294 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5296:	4606      	mov	r6, r0
   d5298:	460d      	mov	r5, r1
   d529a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d529c:	2400      	movs	r4, #0
  while (size--) {
   d529e:	42bd      	cmp	r5, r7
   d52a0:	d00c      	beq.n	d52bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d52a2:	6833      	ldr	r3, [r6, #0]
   d52a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d52a8:	689b      	ldr	r3, [r3, #8]
   d52aa:	4630      	mov	r0, r6
   d52ac:	4798      	blx	r3
     if (chunk>=0)
   d52ae:	2800      	cmp	r0, #0
   d52b0:	db01      	blt.n	d52b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d52b2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d52b4:	e7f3      	b.n	d529e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d52b6:	2c00      	cmp	r4, #0
   d52b8:	bf08      	it	eq
   d52ba:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d52bc:	4620      	mov	r0, r4
   d52be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d52c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d52c0:	b570      	push	{r4, r5, r6, lr}
   d52c2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d52c4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d52c6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d52c8:	b149      	cbz	r1, d52de <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d52ca:	f001 fc59 	bl	d6b80 <strlen>
   d52ce:	682b      	ldr	r3, [r5, #0]
   d52d0:	4602      	mov	r2, r0
   d52d2:	4621      	mov	r1, r4
   d52d4:	4628      	mov	r0, r5
   d52d6:	68db      	ldr	r3, [r3, #12]
    }
   d52d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d52dc:	4718      	bx	r3
    }
   d52de:	bd70      	pop	{r4, r5, r6, pc}

000d52e0 <_ZN5Print5printEPKc>:
   d52e0:	b508      	push	{r3, lr}
   d52e2:	f7ff ffed 	bl	d52c0 <_ZN5Print5writeEPKc>
   d52e6:	bd08      	pop	{r3, pc}

000d52e8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d52e8:	6803      	ldr	r3, [r0, #0]
   d52ea:	689b      	ldr	r3, [r3, #8]
   d52ec:	4718      	bx	r3

000d52ee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d52ee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d52f0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d52f2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d52f4:	f7ff fff8 	bl	d52e8 <_ZN5Print5printEc>
  n += print('\n');
   d52f8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d52fa:	4604      	mov	r4, r0
  n += print('\n');
   d52fc:	4628      	mov	r0, r5
   d52fe:	f7ff fff3 	bl	d52e8 <_ZN5Print5printEc>
  return n;
}
   d5302:	4420      	add	r0, r4
   d5304:	bd38      	pop	{r3, r4, r5, pc}

000d5306 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5306:	b530      	push	{r4, r5, lr}
   d5308:	b08b      	sub	sp, #44	; 0x2c
   d530a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d530c:	2100      	movs	r1, #0
   d530e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5312:	2a01      	cmp	r2, #1
   d5314:	bf98      	it	ls
   d5316:	220a      	movls	r2, #10
   d5318:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d531c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5320:	fb05 3312 	mls	r3, r5, r2, r3
   d5324:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5328:	2b09      	cmp	r3, #9
   d532a:	bf94      	ite	ls
   d532c:	3330      	addls	r3, #48	; 0x30
   d532e:	3337      	addhi	r3, #55	; 0x37
   d5330:	b2db      	uxtb	r3, r3
   d5332:	4621      	mov	r1, r4
   d5334:	f804 3901 	strb.w	r3, [r4], #-1
   d5338:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d533a:	2d00      	cmp	r5, #0
   d533c:	d1ee      	bne.n	d531c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d533e:	f7ff ffbf 	bl	d52c0 <_ZN5Print5writeEPKc>
}
   d5342:	b00b      	add	sp, #44	; 0x2c
   d5344:	bd30      	pop	{r4, r5, pc}

000d5346 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5346:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5348:	b92a      	cbnz	r2, d5356 <_ZN5Print5printEmi+0x10>
   d534a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d534c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5350:	689b      	ldr	r3, [r3, #8]
   d5352:	b2c9      	uxtb	r1, r1
   d5354:	4718      	bx	r3
  else return printNumber(n, base);
   d5356:	b2d2      	uxtb	r2, r2
}
   d5358:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d535c:	f7ff bfd3 	b.w	d5306 <_ZN5Print11printNumberEmh>

000d5360 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5360:	f7ff bff1 	b.w	d5346 <_ZN5Print5printEmi>

000d5364 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5368:	4607      	mov	r7, r0
   d536a:	460e      	mov	r6, r1
  if (base == 0) {
   d536c:	4615      	mov	r5, r2
   d536e:	b92a      	cbnz	r2, d537c <_ZN5Print5printEli+0x18>
    return write(n);
   d5370:	6803      	ldr	r3, [r0, #0]
   d5372:	b2c9      	uxtb	r1, r1
   d5374:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d537a:	4718      	bx	r3
  } else if (base == 10) {
   d537c:	2a0a      	cmp	r2, #10
   d537e:	d102      	bne.n	d5386 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5380:	2900      	cmp	r1, #0
   d5382:	da01      	bge.n	d5388 <_ZN5Print5printEli+0x24>
   d5384:	e004      	b.n	d5390 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5386:	b2d2      	uxtb	r2, r2
  }
}
   d5388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d538c:	f7ff bfbb 	b.w	d5306 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5390:	212d      	movs	r1, #45	; 0x2d
   d5392:	f7ff ffa9 	bl	d52e8 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d5396:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5398:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d539a:	4271      	negs	r1, r6
   d539c:	4638      	mov	r0, r7
   d539e:	f7ff ffb2 	bl	d5306 <_ZN5Print11printNumberEmh>
   d53a2:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d53a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d53a8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d53a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d53ac:	ec57 6b10 	vmov	r6, r7, d0
   d53b0:	4682      	mov	sl, r0
   d53b2:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d53b4:	ee10 2a10 	vmov	r2, s0
   d53b8:	463b      	mov	r3, r7
   d53ba:	ee10 0a10 	vmov	r0, s0
   d53be:	4639      	mov	r1, r7
   d53c0:	f001 fae6 	bl	d6990 <__aeabi_dcmpun>
   d53c4:	b108      	cbz	r0, d53ca <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53c6:	4948      	ldr	r1, [pc, #288]	; (d54e8 <_ZN5Print10printFloatEdh+0x140>)
   d53c8:	e012      	b.n	d53f0 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d53ca:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d53ce:	f04f 32ff 	mov.w	r2, #4294967295
   d53d2:	4b46      	ldr	r3, [pc, #280]	; (d54ec <_ZN5Print10printFloatEdh+0x144>)
   d53d4:	4630      	mov	r0, r6
   d53d6:	4649      	mov	r1, r9
   d53d8:	f001 fada 	bl	d6990 <__aeabi_dcmpun>
   d53dc:	b968      	cbnz	r0, d53fa <_ZN5Print10printFloatEdh+0x52>
   d53de:	f04f 32ff 	mov.w	r2, #4294967295
   d53e2:	4b42      	ldr	r3, [pc, #264]	; (d54ec <_ZN5Print10printFloatEdh+0x144>)
   d53e4:	4630      	mov	r0, r6
   d53e6:	4649      	mov	r1, r9
   d53e8:	f001 fab4 	bl	d6954 <__aeabi_dcmple>
   d53ec:	b928      	cbnz	r0, d53fa <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d53ee:	4940      	ldr	r1, [pc, #256]	; (d54f0 <_ZN5Print10printFloatEdh+0x148>)
   d53f0:	4650      	mov	r0, sl
   d53f2:	f7ff ff65 	bl	d52c0 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d53f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d53fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d53fe:	4b3d      	ldr	r3, [pc, #244]	; (d54f4 <_ZN5Print10printFloatEdh+0x14c>)
   d5400:	4630      	mov	r0, r6
   d5402:	4639      	mov	r1, r7
   d5404:	f001 faba 	bl	d697c <__aeabi_dcmpgt>
   d5408:	b108      	cbz	r0, d540e <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d540a:	493b      	ldr	r1, [pc, #236]	; (d54f8 <_ZN5Print10printFloatEdh+0x150>)
   d540c:	e7f0      	b.n	d53f0 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d540e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5412:	4b3a      	ldr	r3, [pc, #232]	; (d54fc <_ZN5Print10printFloatEdh+0x154>)
   d5414:	4630      	mov	r0, r6
   d5416:	4639      	mov	r1, r7
   d5418:	f001 fa92 	bl	d6940 <__aeabi_dcmplt>
   d541c:	2800      	cmp	r0, #0
   d541e:	d1f4      	bne.n	d540a <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d5420:	2200      	movs	r2, #0
   d5422:	2300      	movs	r3, #0
   d5424:	4630      	mov	r0, r6
   d5426:	4639      	mov	r1, r7
   d5428:	f001 fa8a 	bl	d6940 <__aeabi_dcmplt>
   d542c:	b140      	cbz	r0, d5440 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d542e:	212d      	movs	r1, #45	; 0x2d
   d5430:	4650      	mov	r0, sl
   d5432:	f7ff ff59 	bl	d52e8 <_ZN5Print5printEc>
     number = -number;
   d5436:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d543a:	4604      	mov	r4, r0
     number = -number;
   d543c:	461f      	mov	r7, r3
   d543e:	e000      	b.n	d5442 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5440:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5442:	492f      	ldr	r1, [pc, #188]	; (d5500 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5444:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5448:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d544a:	fa5f f388 	uxtb.w	r3, r8
   d544e:	429d      	cmp	r5, r3
   d5450:	d906      	bls.n	d5460 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5452:	2200      	movs	r2, #0
   d5454:	4b2b      	ldr	r3, [pc, #172]	; (d5504 <_ZN5Print10printFloatEdh+0x15c>)
   d5456:	f001 f92b 	bl	d66b0 <__aeabi_ddiv>
   d545a:	f108 0801 	add.w	r8, r8, #1
   d545e:	e7f4      	b.n	d544a <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5460:	4632      	mov	r2, r6
   d5462:	463b      	mov	r3, r7
   d5464:	f000 fe48 	bl	d60f8 <__adddf3>
   d5468:	460f      	mov	r7, r1
   d546a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d546c:	f001 face 	bl	d6a0c <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5470:	220a      	movs	r2, #10
   d5472:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5474:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5476:	4650      	mov	r0, sl
   d5478:	f7ff ff45 	bl	d5306 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d547c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d547e:	b37d      	cbz	r5, d54e0 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5480:	4640      	mov	r0, r8
   d5482:	f000 ff75 	bl	d6370 <__aeabi_ui2d>
   d5486:	4602      	mov	r2, r0
   d5488:	460b      	mov	r3, r1
   d548a:	4630      	mov	r0, r6
   d548c:	4639      	mov	r1, r7
   d548e:	f000 fe31 	bl	d60f4 <__aeabi_dsub>
   d5492:	4606      	mov	r6, r0
   d5494:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5496:	4650      	mov	r0, sl
   d5498:	491b      	ldr	r1, [pc, #108]	; (d5508 <_ZN5Print10printFloatEdh+0x160>)
   d549a:	f7ff ff11 	bl	d52c0 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d549e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d54a0:	4b18      	ldr	r3, [pc, #96]	; (d5504 <_ZN5Print10printFloatEdh+0x15c>)
   d54a2:	2200      	movs	r2, #0
   d54a4:	4630      	mov	r0, r6
   d54a6:	4639      	mov	r1, r7
   d54a8:	f000 ffd8 	bl	d645c <__aeabi_dmul>
   d54ac:	460f      	mov	r7, r1
   d54ae:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d54b0:	f001 fa84 	bl	d69bc <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d54b4:	220a      	movs	r2, #10
   d54b6:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d54b8:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d54ba:	4650      	mov	r0, sl
   d54bc:	f7ff ff52 	bl	d5364 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d54c0:	4404      	add	r4, r0
    remainder -= toPrint;
   d54c2:	4640      	mov	r0, r8
   d54c4:	f000 ff64 	bl	d6390 <__aeabi_i2d>
   d54c8:	4602      	mov	r2, r0
   d54ca:	460b      	mov	r3, r1
   d54cc:	4630      	mov	r0, r6
   d54ce:	4639      	mov	r1, r7
   d54d0:	f000 fe10 	bl	d60f4 <__aeabi_dsub>
   d54d4:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d54d6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d54da:	4606      	mov	r6, r0
   d54dc:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d54de:	d1df      	bne.n	d54a0 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d54e0:	4620      	mov	r0, r4
   d54e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d54e6:	bf00      	nop
   d54e8:	000d716c 	.word	0x000d716c
   d54ec:	7fefffff 	.word	0x7fefffff
   d54f0:	000d7176 	.word	0x000d7176
   d54f4:	41efffff 	.word	0x41efffff
   d54f8:	000d7170 	.word	0x000d7170
   d54fc:	c1efffff 	.word	0xc1efffff
   d5500:	3fe00000 	.word	0x3fe00000
   d5504:	40240000 	.word	0x40240000
   d5508:	000d7174 	.word	0x000d7174

000d550c <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d550c:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d550e:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d5510:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d5512:	f7ff ff49 	bl	d53a8 <_ZN5Print10printFloatEdh>
   d5516:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d5518:	4628      	mov	r0, r5
   d551a:	f7ff fee8 	bl	d52ee <_ZN5Print7printlnEv>
  return n;
}
   d551e:	4420      	add	r0, r4
   d5520:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5524 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5524:	4b01      	ldr	r3, [pc, #4]	; (d552c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5526:	4a02      	ldr	r2, [pc, #8]	; (d5530 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5528:	601a      	str	r2, [r3, #0]
   d552a:	4770      	bx	lr
   d552c:	2003e3e0 	.word	0x2003e3e0
   d5530:	000d7230 	.word	0x000d7230

000d5534 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5534:	4b02      	ldr	r3, [pc, #8]	; (d5540 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5536:	681a      	ldr	r2, [r3, #0]
   d5538:	4b02      	ldr	r3, [pc, #8]	; (d5544 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d553a:	601a      	str	r2, [r3, #0]
   d553c:	4770      	bx	lr
   d553e:	bf00      	nop
   d5540:	2003e340 	.word	0x2003e340
   d5544:	2003e3e4 	.word	0x2003e3e4

000d5548 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5548:	2100      	movs	r1, #0
   d554a:	f7ff bd49 	b.w	d4fe0 <system_delay_ms>

000d554e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d554e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5550:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5552:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5554:	b113      	cbz	r3, d555c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5556:	2203      	movs	r2, #3
   d5558:	4601      	mov	r1, r0
   d555a:	4798      	blx	r3
    }
   d555c:	4620      	mov	r0, r4
   d555e:	bd10      	pop	{r4, pc}

000d5560 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5560:	b510      	push	{r4, lr}
   d5562:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5564:	f7ff fff3 	bl	d554e <_ZNSt14_Function_baseD1Ev>
   d5568:	4620      	mov	r0, r4
   d556a:	bd10      	pop	{r4, pc}

000d556c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d556c:	4803      	ldr	r0, [pc, #12]	; (d557c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d556e:	4a04      	ldr	r2, [pc, #16]	; (d5580 <_GLOBAL__sub_I_RGB+0x14>)
   d5570:	4904      	ldr	r1, [pc, #16]	; (d5584 <_GLOBAL__sub_I_RGB+0x18>)
   d5572:	2300      	movs	r3, #0
   d5574:	6083      	str	r3, [r0, #8]
   d5576:	f000 bc6b 	b.w	d5e50 <__aeabi_atexit>
   d557a:	bf00      	nop
   d557c:	2003e3e8 	.word	0x2003e3e8
   d5580:	2003e3a8 	.word	0x2003e3a8
   d5584:	000d5561 	.word	0x000d5561

000d5588 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5588:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d558a:	4b0c      	ldr	r3, [pc, #48]	; (d55bc <serialEventRun+0x34>)
   d558c:	b133      	cbz	r3, d559c <serialEventRun+0x14>
   d558e:	f000 f921 	bl	d57d4 <_Z16_fetch_usbserialv>
   d5592:	6803      	ldr	r3, [r0, #0]
   d5594:	691b      	ldr	r3, [r3, #16]
   d5596:	4798      	blx	r3
   d5598:	2800      	cmp	r0, #0
   d559a:	dc09      	bgt.n	d55b0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d559c:	4b08      	ldr	r3, [pc, #32]	; (d55c0 <serialEventRun+0x38>)
   d559e:	b163      	cbz	r3, d55ba <serialEventRun+0x32>
   d55a0:	f000 f982 	bl	d58a8 <_Z22__fetch_global_Serial1v>
   d55a4:	6803      	ldr	r3, [r0, #0]
   d55a6:	691b      	ldr	r3, [r3, #16]
   d55a8:	4798      	blx	r3
   d55aa:	2800      	cmp	r0, #0
   d55ac:	dc03      	bgt.n	d55b6 <serialEventRun+0x2e>
   d55ae:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d55b0:	f3af 8000 	nop.w
   d55b4:	e7f2      	b.n	d559c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d55b6:	f3af 8000 	nop.w
   d55ba:	bd08      	pop	{r3, pc}
	...

000d55c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d55c4:	b508      	push	{r3, lr}
	serialEventRun();
   d55c6:	f7ff ffdf 	bl	d5588 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d55ca:	f7ff fbf9 	bl	d4dc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d55ce:	4b01      	ldr	r3, [pc, #4]	; (d55d4 <_post_loop+0x10>)
   d55d0:	6018      	str	r0, [r3, #0]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	2003e734 	.word	0x2003e734

000d55d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d55d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d55da:	2300      	movs	r3, #0
   d55dc:	9300      	str	r3, [sp, #0]
   d55de:	461a      	mov	r2, r3
   d55e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d55e4:	f7ff fd0e 	bl	d5004 <system_ctrl_set_result>
}
   d55e8:	b003      	add	sp, #12
   d55ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d55f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d55f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d55f2:	8843      	ldrh	r3, [r0, #2]
   d55f4:	2b0a      	cmp	r3, #10
   d55f6:	d008      	beq.n	d560a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d55f8:	2b50      	cmp	r3, #80	; 0x50
   d55fa:	d109      	bne.n	d5610 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d55fc:	4b09      	ldr	r3, [pc, #36]	; (d5624 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d55fe:	681b      	ldr	r3, [r3, #0]
   d5600:	b13b      	cbz	r3, d5612 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5602:	b003      	add	sp, #12
   d5604:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5608:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d560a:	f7ff ffe5 	bl	d55d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d560e:	e006      	b.n	d561e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5610:	2300      	movs	r3, #0
   d5612:	9300      	str	r3, [sp, #0]
   d5614:	461a      	mov	r2, r3
   d5616:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d561a:	f7ff fcf3 	bl	d5004 <system_ctrl_set_result>
        break;
    }
}
   d561e:	b003      	add	sp, #12
   d5620:	f85d fb04 	ldr.w	pc, [sp], #4
   d5624:	2003e3f8 	.word	0x2003e3f8

000d5628 <module_user_init_hook>:

void module_user_init_hook()
{
   d5628:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d562a:	f7ff fbb9 	bl	d4da0 <HAL_RNG_GetRandomNumber>
   d562e:	4604      	mov	r4, r0
    srand(seed);
   d5630:	f001 fa7e 	bl	d6b30 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5634:	4b07      	ldr	r3, [pc, #28]	; (d5654 <module_user_init_hook+0x2c>)
   d5636:	b113      	cbz	r3, d563e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5638:	4620      	mov	r0, r4
   d563a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d563e:	2100      	movs	r1, #0
   d5640:	4804      	ldr	r0, [pc, #16]	; (d5654 <module_user_init_hook+0x2c>)
   d5642:	f7ff fd39 	bl	d50b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5646:	2100      	movs	r1, #0
   d5648:	4803      	ldr	r0, [pc, #12]	; (d5658 <module_user_init_hook+0x30>)
}
   d564a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d564e:	f7ff bccf 	b.w	d4ff0 <system_ctrl_set_app_request_handler>
   d5652:	bf00      	nop
   d5654:	00000000 	.word	0x00000000
   d5658:	000d55f1 	.word	0x000d55f1

000d565c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d565c:	4770      	bx	lr

000d565e <_ZN9IPAddressD0Ev>:
   d565e:	b510      	push	{r4, lr}
   d5660:	4604      	mov	r4, r0
   d5662:	f7fe fd18 	bl	d4096 <_ZdlPv>
   d5666:	4620      	mov	r0, r4
   d5668:	bd10      	pop	{r4, pc}

000d566a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d566a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d566c:	7d03      	ldrb	r3, [r0, #20]
   d566e:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5670:	b08d      	sub	sp, #52	; 0x34
   d5672:	460e      	mov	r6, r1
   d5674:	f100 0704 	add.w	r7, r0, #4
   d5678:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d567c:	d002      	beq.n	d5684 <_ZNK9IPAddress7printToER5Print+0x1a>
   d567e:	f100 0508 	add.w	r5, r0, #8
   d5682:	e018      	b.n	d56b6 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5684:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5686:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5688:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d568c:	232f      	movs	r3, #47	; 0x2f
   d568e:	462a      	mov	r2, r5
   d5690:	200a      	movs	r0, #10
   d5692:	f7ff fbc5 	bl	d4e20 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5696:	4628      	mov	r0, r5
   d5698:	f001 fa72 	bl	d6b80 <strlen>
   d569c:	6833      	ldr	r3, [r6, #0]
   d569e:	4602      	mov	r2, r0
   d56a0:	68db      	ldr	r3, [r3, #12]
   d56a2:	4629      	mov	r1, r5
   d56a4:	4630      	mov	r0, r6
   d56a6:	4798      	blx	r3
   d56a8:	e00f      	b.n	d56ca <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d56aa:	b124      	cbz	r4, d56b6 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d56ac:	212e      	movs	r1, #46	; 0x2e
   d56ae:	4630      	mov	r0, r6
   d56b0:	f7ff fe1a 	bl	d52e8 <_ZN5Print5printEc>
   d56b4:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d56b6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d56ba:	220a      	movs	r2, #10
   d56bc:	4630      	mov	r0, r6
   d56be:	f7ff fe4f 	bl	d5360 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56c2:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56c4:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56c6:	d1f0      	bne.n	d56aa <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56c8:	4620      	mov	r0, r4
    }
    return n;
}
   d56ca:	b00d      	add	sp, #52	; 0x34
   d56cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d56d0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d56d0:	b510      	push	{r4, lr}
   d56d2:	4b05      	ldr	r3, [pc, #20]	; (d56e8 <_ZN9IPAddressC1Ev+0x18>)
   d56d4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d56d6:	2211      	movs	r2, #17
   d56d8:	f840 3b04 	str.w	r3, [r0], #4
   d56dc:	2100      	movs	r1, #0
   d56de:	f001 fa1e 	bl	d6b1e <memset>
{
    clear();
}
   d56e2:	4620      	mov	r0, r4
   d56e4:	bd10      	pop	{r4, pc}
   d56e6:	bf00      	nop
   d56e8:	000d728c 	.word	0x000d728c

000d56ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d56ec:	4603      	mov	r3, r0
   d56ee:	4a07      	ldr	r2, [pc, #28]	; (d570c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d56f0:	b510      	push	{r4, lr}
   d56f2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d56f6:	f101 0210 	add.w	r2, r1, #16
   d56fa:	f851 4b04 	ldr.w	r4, [r1], #4
   d56fe:	f843 4b04 	str.w	r4, [r3], #4
   d5702:	4291      	cmp	r1, r2
   d5704:	d1f9      	bne.n	d56fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5706:	780a      	ldrb	r2, [r1, #0]
   d5708:	701a      	strb	r2, [r3, #0]
}
   d570a:	bd10      	pop	{r4, pc}
   d570c:	000d728c 	.word	0x000d728c

000d5710 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5710:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5712:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5716:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d571a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d571e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5722:	2304      	movs	r3, #4
   d5724:	6041      	str	r1, [r0, #4]
   d5726:	7503      	strb	r3, [r0, #20]
   d5728:	bd10      	pop	{r4, pc}

000d572a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d572a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d572c:	780d      	ldrb	r5, [r1, #0]
   d572e:	788b      	ldrb	r3, [r1, #2]
   d5730:	784a      	ldrb	r2, [r1, #1]
   d5732:	78c9      	ldrb	r1, [r1, #3]
   d5734:	9100      	str	r1, [sp, #0]
   d5736:	4629      	mov	r1, r5
   d5738:	f7ff ffea 	bl	d5710 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d573c:	b003      	add	sp, #12
   d573e:	bd30      	pop	{r4, r5, pc}

000d5740 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5740:	7441      	strb	r1, [r0, #17]
   d5742:	4770      	bx	lr

000d5744 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5744:	4770      	bx	lr

000d5746 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5746:	2100      	movs	r1, #0
   d5748:	7c00      	ldrb	r0, [r0, #16]
   d574a:	f7ff bc21 	b.w	d4f90 <HAL_USB_USART_Receive_Data>

000d574e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d574e:	2101      	movs	r1, #1
   d5750:	7c00      	ldrb	r0, [r0, #16]
   d5752:	f7ff bc1d 	b.w	d4f90 <HAL_USB_USART_Receive_Data>

000d5756 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5756:	7c00      	ldrb	r0, [r0, #16]
   d5758:	f7ff bc12 	b.w	d4f80 <HAL_USB_USART_Available_Data_For_Write>

000d575c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d575c:	7c00      	ldrb	r0, [r0, #16]
   d575e:	f7ff bc07 	b.w	d4f70 <HAL_USB_USART_Available_Data>

000d5762 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5762:	b538      	push	{r3, r4, r5, lr}
   d5764:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5766:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5768:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d576a:	f7ff fc09 	bl	d4f80 <HAL_USB_USART_Available_Data_For_Write>
   d576e:	2800      	cmp	r0, #0
   d5770:	dc01      	bgt.n	d5776 <_ZN9USBSerial5writeEh+0x14>
   d5772:	7c60      	ldrb	r0, [r4, #17]
   d5774:	b120      	cbz	r0, d5780 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5776:	4629      	mov	r1, r5
   d5778:	7c20      	ldrb	r0, [r4, #16]
   d577a:	f7ff fc11 	bl	d4fa0 <HAL_USB_USART_Send_Data>
    return 1;
   d577e:	2001      	movs	r0, #1
  }
  return 0;
}
   d5780:	bd38      	pop	{r3, r4, r5, pc}

000d5782 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5782:	7c00      	ldrb	r0, [r0, #16]
   d5784:	f7ff bc14 	b.w	d4fb0 <HAL_USB_USART_Flush_Data>

000d5788 <_ZN9USBSerialD0Ev>:
   d5788:	b510      	push	{r4, lr}
   d578a:	4604      	mov	r4, r0
   d578c:	f7fe fc83 	bl	d4096 <_ZdlPv>
   d5790:	4620      	mov	r0, r4
   d5792:	bd10      	pop	{r4, pc}

000d5794 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5794:	b510      	push	{r4, lr}
   d5796:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5798:	2300      	movs	r3, #0
   d579a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d579c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57a0:	60a3      	str	r3, [r4, #8]
   d57a2:	4b05      	ldr	r3, [pc, #20]	; (d57b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d57a4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d57a6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d57a8:	4608      	mov	r0, r1
{
  _serial = serial;
   d57aa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d57ac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d57ae:	4611      	mov	r1, r2
   d57b0:	f7ff fbce 	bl	d4f50 <HAL_USB_USART_Init>
}
   d57b4:	4620      	mov	r0, r4
   d57b6:	bd10      	pop	{r4, pc}
   d57b8:	000d72a0 	.word	0x000d72a0

000d57bc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d57bc:	2200      	movs	r2, #0
   d57be:	7c00      	ldrb	r0, [r0, #16]
   d57c0:	f7ff bbce 	b.w	d4f60 <HAL_USB_USART_Begin>

000d57c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d57c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d57c6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d57c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d57ca:	2100      	movs	r1, #0
   d57cc:	f001 f9a7 	bl	d6b1e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d57d0:	4620      	mov	r0, r4
   d57d2:	bd10      	pop	{r4, pc}

000d57d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d57d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d57d6:	4d0e      	ldr	r5, [pc, #56]	; (d5810 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d57d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d57da:	a801      	add	r0, sp, #4
   d57dc:	f7ff fff2 	bl	d57c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d57e0:	6829      	ldr	r1, [r5, #0]
   d57e2:	f011 0401 	ands.w	r4, r1, #1
   d57e6:	d110      	bne.n	d580a <_Z16_fetch_usbserialv+0x36>
   d57e8:	4628      	mov	r0, r5
   d57ea:	f7fe fc63 	bl	d40b4 <__cxa_guard_acquire>
   d57ee:	b160      	cbz	r0, d580a <_Z16_fetch_usbserialv+0x36>
   d57f0:	aa01      	add	r2, sp, #4
   d57f2:	4621      	mov	r1, r4
   d57f4:	4807      	ldr	r0, [pc, #28]	; (d5814 <_Z16_fetch_usbserialv+0x40>)
   d57f6:	f7ff ffcd 	bl	d5794 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d57fa:	4628      	mov	r0, r5
   d57fc:	f7fe fc5f 	bl	d40be <__cxa_guard_release>
   d5800:	4a05      	ldr	r2, [pc, #20]	; (d5818 <_Z16_fetch_usbserialv+0x44>)
   d5802:	4906      	ldr	r1, [pc, #24]	; (d581c <_Z16_fetch_usbserialv+0x48>)
   d5804:	4803      	ldr	r0, [pc, #12]	; (d5814 <_Z16_fetch_usbserialv+0x40>)
   d5806:	f000 fb23 	bl	d5e50 <__aeabi_atexit>
	return _usbserial;
}
   d580a:	4802      	ldr	r0, [pc, #8]	; (d5814 <_Z16_fetch_usbserialv+0x40>)
   d580c:	b007      	add	sp, #28
   d580e:	bd30      	pop	{r4, r5, pc}
   d5810:	2003e3fc 	.word	0x2003e3fc
   d5814:	2003e400 	.word	0x2003e400
   d5818:	2003e3a8 	.word	0x2003e3a8
   d581c:	000d5745 	.word	0x000d5745

000d5820 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5820:	4770      	bx	lr

000d5822 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5822:	7441      	strb	r1, [r0, #17]
   d5824:	4770      	bx	lr

000d5826 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5826:	7c00      	ldrb	r0, [r0, #16]
   d5828:	f7ff bb3a 	b.w	d4ea0 <HAL_USART_Available_Data_For_Write>

000d582c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d582c:	7c00      	ldrb	r0, [r0, #16]
   d582e:	f7ff bb0f 	b.w	d4e50 <HAL_USART_Available_Data>

000d5832 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5832:	7c00      	ldrb	r0, [r0, #16]
   d5834:	f7ff bb1c 	b.w	d4e70 <HAL_USART_Peek_Data>

000d5838 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5838:	7c00      	ldrb	r0, [r0, #16]
   d583a:	f7ff bb11 	b.w	d4e60 <HAL_USART_Read_Data>

000d583e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d583e:	7c00      	ldrb	r0, [r0, #16]
   d5840:	f7ff bb1e 	b.w	d4e80 <HAL_USART_Flush_Data>

000d5844 <_ZN11USARTSerialD0Ev>:
   d5844:	b510      	push	{r4, lr}
   d5846:	4604      	mov	r4, r0
   d5848:	f7fe fc25 	bl	d4096 <_ZdlPv>
   d584c:	4620      	mov	r0, r4
   d584e:	bd10      	pop	{r4, pc}

000d5850 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5850:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5852:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5854:	4604      	mov	r4, r0
   d5856:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5858:	b925      	cbnz	r5, d5864 <_ZN11USARTSerial5writeEh+0x14>
   d585a:	7c00      	ldrb	r0, [r0, #16]
   d585c:	f7ff fb20 	bl	d4ea0 <HAL_USART_Available_Data_For_Write>
   d5860:	2800      	cmp	r0, #0
   d5862:	dd05      	ble.n	d5870 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5864:	4631      	mov	r1, r6
   d5866:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d586c:	f7ff bae8 	b.w	d4e40 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5870:	4628      	mov	r0, r5
   d5872:	bd70      	pop	{r4, r5, r6, pc}

000d5874 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5874:	b510      	push	{r4, lr}
   d5876:	4604      	mov	r4, r0
   d5878:	4608      	mov	r0, r1
   d587a:	4611      	mov	r1, r2
   d587c:	2200      	movs	r2, #0
   d587e:	6062      	str	r2, [r4, #4]
   d5880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5884:	60a2      	str	r2, [r4, #8]
   d5886:	4a05      	ldr	r2, [pc, #20]	; (d589c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5888:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d588a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d588c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d588e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5890:	461a      	mov	r2, r3
   d5892:	f7ff facd 	bl	d4e30 <HAL_USART_Init>
}
   d5896:	4620      	mov	r0, r4
   d5898:	bd10      	pop	{r4, pc}
   d589a:	bf00      	nop
   d589c:	000d72d0 	.word	0x000d72d0

000d58a0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d58a0:	7c00      	ldrb	r0, [r0, #16]
   d58a2:	f7ff baf5 	b.w	d4e90 <HAL_USART_Is_Enabled>
	...

000d58a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d58a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d58aa:	4d0c      	ldr	r5, [pc, #48]	; (d58dc <_Z22__fetch_global_Serial1v+0x34>)
   d58ac:	6829      	ldr	r1, [r5, #0]
   d58ae:	f011 0401 	ands.w	r4, r1, #1
   d58b2:	d111      	bne.n	d58d8 <_Z22__fetch_global_Serial1v+0x30>
   d58b4:	4628      	mov	r0, r5
   d58b6:	f7fe fbfd 	bl	d40b4 <__cxa_guard_acquire>
   d58ba:	b168      	cbz	r0, d58d8 <_Z22__fetch_global_Serial1v+0x30>
   d58bc:	4a08      	ldr	r2, [pc, #32]	; (d58e0 <_Z22__fetch_global_Serial1v+0x38>)
   d58be:	4b09      	ldr	r3, [pc, #36]	; (d58e4 <_Z22__fetch_global_Serial1v+0x3c>)
   d58c0:	4809      	ldr	r0, [pc, #36]	; (d58e8 <_Z22__fetch_global_Serial1v+0x40>)
   d58c2:	4621      	mov	r1, r4
   d58c4:	f7ff ffd6 	bl	d5874 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d58c8:	4628      	mov	r0, r5
   d58ca:	f7fe fbf8 	bl	d40be <__cxa_guard_release>
   d58ce:	4a07      	ldr	r2, [pc, #28]	; (d58ec <_Z22__fetch_global_Serial1v+0x44>)
   d58d0:	4907      	ldr	r1, [pc, #28]	; (d58f0 <_Z22__fetch_global_Serial1v+0x48>)
   d58d2:	4805      	ldr	r0, [pc, #20]	; (d58e8 <_Z22__fetch_global_Serial1v+0x40>)
   d58d4:	f000 fabc 	bl	d5e50 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d58d8:	4803      	ldr	r0, [pc, #12]	; (d58e8 <_Z22__fetch_global_Serial1v+0x40>)
   d58da:	bd38      	pop	{r3, r4, r5, pc}
   d58dc:	2003e4ac 	.word	0x2003e4ac
   d58e0:	2003e4b0 	.word	0x2003e4b0
   d58e4:	2003e428 	.word	0x2003e428
   d58e8:	2003e414 	.word	0x2003e414
   d58ec:	2003e3a8 	.word	0x2003e3a8
   d58f0:	000d5821 	.word	0x000d5821

000d58f4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d58f4:	4770      	bx	lr

000d58f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d58f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58f8:	4606      	mov	r6, r0
   d58fa:	4615      	mov	r5, r2
   d58fc:	460c      	mov	r4, r1
   d58fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5900:	42bc      	cmp	r4, r7
   d5902:	d006      	beq.n	d5912 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5904:	6833      	ldr	r3, [r6, #0]
   d5906:	f814 1b01 	ldrb.w	r1, [r4], #1
   d590a:	689b      	ldr	r3, [r3, #8]
   d590c:	4630      	mov	r0, r6
   d590e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5910:	e7f6      	b.n	d5900 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5912:	4628      	mov	r0, r5
   d5914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5916 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5916:	2200      	movs	r2, #0
   d5918:	7c00      	ldrb	r0, [r0, #16]
   d591a:	f7ff bae1 	b.w	d4ee0 <HAL_I2C_Write_Data>

000d591e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d591e:	2100      	movs	r1, #0
   d5920:	7c00      	ldrb	r0, [r0, #16]
   d5922:	f7ff bae5 	b.w	d4ef0 <HAL_I2C_Available_Data>

000d5926 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5926:	2100      	movs	r1, #0
   d5928:	7c00      	ldrb	r0, [r0, #16]
   d592a:	f7ff bae9 	b.w	d4f00 <HAL_I2C_Read_Data>

000d592e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d592e:	2100      	movs	r1, #0
   d5930:	7c00      	ldrb	r0, [r0, #16]
   d5932:	f7ff baed 	b.w	d4f10 <HAL_I2C_Peek_Data>

000d5936 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5936:	2100      	movs	r1, #0
   d5938:	7c00      	ldrb	r0, [r0, #16]
   d593a:	f7ff baf1 	b.w	d4f20 <HAL_I2C_Flush_Data>

000d593e <_ZN7TwoWireD0Ev>:
   d593e:	b510      	push	{r4, lr}
   d5940:	4604      	mov	r4, r0
   d5942:	f7fe fba8 	bl	d4096 <_ZdlPv>
   d5946:	4620      	mov	r0, r4
   d5948:	bd10      	pop	{r4, pc}
	...

000d594c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d594c:	b510      	push	{r4, lr}
   d594e:	4604      	mov	r4, r0
   d5950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5954:	4608      	mov	r0, r1
   d5956:	60a3      	str	r3, [r4, #8]
   d5958:	2100      	movs	r1, #0
   d595a:	4b04      	ldr	r3, [pc, #16]	; (d596c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d595c:	7420      	strb	r0, [r4, #16]
   d595e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5960:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5962:	f7ff faed 	bl	d4f40 <HAL_I2C_Init>

}
   d5966:	4620      	mov	r0, r4
   d5968:	bd10      	pop	{r4, pc}
   d596a:	bf00      	nop
   d596c:	000d7300 	.word	0x000d7300

000d5970 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5970:	2300      	movs	r3, #0
   d5972:	461a      	mov	r2, r3
   d5974:	4619      	mov	r1, r3
   d5976:	7c00      	ldrb	r0, [r0, #16]
   d5978:	f7ff ba9a 	b.w	d4eb0 <HAL_I2C_Begin>

000d597c <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d597c:	2200      	movs	r2, #0
   d597e:	7c00      	ldrb	r0, [r0, #16]
   d5980:	f7ff ba9e 	b.w	d4ec0 <HAL_I2C_Begin_Transmission>

000d5984 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5984:	b2c9      	uxtb	r1, r1
   d5986:	f7ff bff9 	b.w	d597c <_ZN7TwoWire17beginTransmissionEh>

000d598a <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d598a:	2200      	movs	r2, #0
   d598c:	7c00      	ldrb	r0, [r0, #16]
   d598e:	f7ff ba9f 	b.w	d4ed0 <HAL_I2C_End_Transmission>

000d5992 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5992:	2101      	movs	r1, #1
   d5994:	f7ff bff9 	b.w	d598a <_ZN7TwoWire15endTransmissionEh>

000d5998 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5998:	2100      	movs	r1, #0
   d599a:	7c00      	ldrb	r0, [r0, #16]
   d599c:	f7ff bac8 	b.w	d4f30 <HAL_I2C_Is_Enabled>

000d59a0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59a0:	2200      	movs	r2, #0
   d59a2:	4611      	mov	r1, r2
   d59a4:	6840      	ldr	r0, [r0, #4]
   d59a6:	f7ff bb6f 	b.w	d5088 <network_listening>

000d59aa <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d59aa:	2200      	movs	r2, #0
   d59ac:	4611      	mov	r1, r2
   d59ae:	6840      	ldr	r0, [r0, #4]
   d59b0:	f7ff bb7a 	b.w	d50a8 <network_get_listen_timeout>

000d59b4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d59b4:	2200      	movs	r2, #0
   d59b6:	6840      	ldr	r0, [r0, #4]
   d59b8:	f7ff bb6e 	b.w	d5098 <network_set_listen_timeout>

000d59bc <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d59bc:	2200      	movs	r2, #0
   d59be:	f081 0101 	eor.w	r1, r1, #1
   d59c2:	6840      	ldr	r0, [r0, #4]
   d59c4:	f7ff bb58 	b.w	d5078 <network_listen>

000d59c8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d59c8:	2300      	movs	r3, #0
   d59ca:	461a      	mov	r2, r3
   d59cc:	4619      	mov	r1, r3
   d59ce:	6840      	ldr	r0, [r0, #4]
   d59d0:	f7ff bb4a 	b.w	d5068 <network_off>

000d59d4 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d59d4:	2300      	movs	r3, #0
   d59d6:	461a      	mov	r2, r3
   d59d8:	4619      	mov	r1, r3
   d59da:	6840      	ldr	r0, [r0, #4]
   d59dc:	f7ff bb3c 	b.w	d5058 <network_on>

000d59e0 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d59e0:	2200      	movs	r2, #0
   d59e2:	4611      	mov	r1, r2
   d59e4:	6840      	ldr	r0, [r0, #4]
   d59e6:	f7ff bb2f 	b.w	d5048 <network_ready>

000d59ea <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d59ea:	2200      	movs	r2, #0
   d59ec:	4611      	mov	r1, r2
   d59ee:	6840      	ldr	r0, [r0, #4]
   d59f0:	f7ff bb1a 	b.w	d5028 <network_connecting>

000d59f4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59f4:	2200      	movs	r2, #0
   d59f6:	2102      	movs	r1, #2
   d59f8:	6840      	ldr	r0, [r0, #4]
   d59fa:	f7ff bb1d 	b.w	d5038 <network_disconnect>

000d59fe <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d59fe:	2300      	movs	r3, #0
   d5a00:	461a      	mov	r2, r3
   d5a02:	6840      	ldr	r0, [r0, #4]
   d5a04:	f7ff bb08 	b.w	d5018 <network_connect>

000d5a08 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5a08:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a0a:	4605      	mov	r5, r0
   d5a0c:	b178      	cbz	r0, d5a2e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a0e:	6804      	ldr	r4, [r0, #0]
   d5a10:	b144      	cbz	r4, d5a24 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    ~_Function_base()
    {
      if (_M_manager)
   d5a12:	68a3      	ldr	r3, [r4, #8]
   d5a14:	b11b      	cbz	r3, d5a1e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a16:	2203      	movs	r2, #3
   d5a18:	4621      	mov	r1, r4
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a1e:	4620      	mov	r0, r4
   d5a20:	f7fe fb39 	bl	d4096 <_ZdlPv>
   d5a24:	4628      	mov	r0, r5
      }
   d5a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a2a:	f7fe bb34 	b.w	d4096 <_ZdlPv>
   d5a2e:	bd38      	pop	{r3, r4, r5, pc}

000d5a30 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5a30:	b110      	cbz	r0, d5a38 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5a32:	6803      	ldr	r3, [r0, #0]
   d5a34:	685b      	ldr	r3, [r3, #4]
   d5a36:	4718      	bx	r3
   d5a38:	4770      	bx	lr

000d5a3a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5a3a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a3c:	6803      	ldr	r3, [r0, #0]
   d5a3e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5a40:	b1bb      	cbz	r3, d5a72 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5a42:	6858      	ldr	r0, [r3, #4]
   d5a44:	f7ff f9c4 	bl	d4dd0 <os_thread_is_current>
   d5a48:	b978      	cbnz	r0, d5a6a <_ZN6ThreadD1Ev+0x30>
   d5a4a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5a4c:	7c5a      	ldrb	r2, [r3, #17]
   d5a4e:	b912      	cbnz	r2, d5a56 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5a50:	6858      	ldr	r0, [r3, #4]
   d5a52:	f7ff f9c5 	bl	d4de0 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5a56:	6823      	ldr	r3, [r4, #0]
   d5a58:	6858      	ldr	r0, [r3, #4]
   d5a5a:	f7ff f9c9 	bl	d4df0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a5e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a60:	2300      	movs	r3, #0
   d5a62:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5a64:	b128      	cbz	r0, d5a72 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5a66:	f7ff ffcf 	bl	d5a08 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a6a:	6820      	ldr	r0, [r4, #0]
   d5a6c:	b108      	cbz	r0, d5a72 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5a6e:	f7ff ffcb 	bl	d5a08 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5a72:	4620      	mov	r0, r4
   d5a74:	bd10      	pop	{r4, pc}
	...

000d5a78 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5a78:	b538      	push	{r3, r4, r5, lr}
   d5a7a:	4b0b      	ldr	r3, [pc, #44]	; (d5aa8 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5a7c:	6003      	str	r3, [r0, #0]
   d5a7e:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a80:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5a84:	b108      	cbz	r0, d5a8a <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5a86:	f7fe fb08 	bl	d409a <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a8a:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5a8e:	b12d      	cbz	r5, d5a9c <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a90:	4628      	mov	r0, r5
   d5a92:	f7ff ffd2 	bl	d5a3a <_ZN6ThreadD1Ev>
   d5a96:	4628      	mov	r0, r5
   d5a98:	f7fe fafd 	bl	d4096 <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a9c:	68a0      	ldr	r0, [r4, #8]
   d5a9e:	b108      	cbz	r0, d5aa4 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d5aa0:	f7ff ffc6 	bl	d5a30 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5aa4:	4620      	mov	r0, r4
   d5aa6:	bd38      	pop	{r3, r4, r5, pc}
   d5aa8:	000d7328 	.word	0x000d7328

000d5aac <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5aac:	b538      	push	{r3, r4, r5, lr}
   d5aae:	4c0d      	ldr	r4, [pc, #52]	; (d5ae4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5ab0:	4b0d      	ldr	r3, [pc, #52]	; (d5ae8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5ab2:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5ab4:	2500      	movs	r5, #0
   d5ab6:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5ab8:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5abc:	6063      	str	r3, [r4, #4]
   d5abe:	60a5      	str	r5, [r4, #8]
   d5ac0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5ac4:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5ac8:	f7ff f9a2 	bl	d4e10 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5acc:	4b07      	ldr	r3, [pc, #28]	; (d5aec <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5ace:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5ad2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5ad4:	4620      	mov	r0, r4
   d5ad6:	4a06      	ldr	r2, [pc, #24]	; (d5af0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5ad8:	4906      	ldr	r1, [pc, #24]	; (d5af4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5ade:	f000 b9b7 	b.w	d5e50 <__aeabi_atexit>
   d5ae2:	bf00      	nop
   d5ae4:	2003e534 	.word	0x2003e534
   d5ae8:	000d7390 	.word	0x000d7390
   d5aec:	000d7328 	.word	0x000d7328
   d5af0:	2003e3a8 	.word	0x2003e3a8
   d5af4:	000d5a79 	.word	0x000d5a79

000d5af8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5af8:	2200      	movs	r2, #0
   d5afa:	4611      	mov	r1, r2
   d5afc:	6840      	ldr	r0, [r0, #4]
   d5afe:	f7ff baa3 	b.w	d5048 <network_ready>

000d5b02 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5b02:	2200      	movs	r2, #0
   d5b04:	4611      	mov	r1, r2
   d5b06:	6840      	ldr	r0, [r0, #4]
   d5b08:	f7ff babe 	b.w	d5088 <network_listening>

000d5b0c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5b0c:	2200      	movs	r2, #0
   d5b0e:	4611      	mov	r1, r2
   d5b10:	6840      	ldr	r0, [r0, #4]
   d5b12:	f7ff bac9 	b.w	d50a8 <network_get_listen_timeout>

000d5b16 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5b16:	2200      	movs	r2, #0
   d5b18:	6840      	ldr	r0, [r0, #4]
   d5b1a:	f7ff babd 	b.w	d5098 <network_set_listen_timeout>

000d5b1e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5b1e:	2200      	movs	r2, #0
   d5b20:	f081 0101 	eor.w	r1, r1, #1
   d5b24:	6840      	ldr	r0, [r0, #4]
   d5b26:	f7ff baa7 	b.w	d5078 <network_listen>

000d5b2a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5b2a:	2300      	movs	r3, #0
   d5b2c:	461a      	mov	r2, r3
   d5b2e:	4619      	mov	r1, r3
   d5b30:	6840      	ldr	r0, [r0, #4]
   d5b32:	f7ff ba99 	b.w	d5068 <network_off>

000d5b36 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5b36:	2300      	movs	r3, #0
   d5b38:	461a      	mov	r2, r3
   d5b3a:	4619      	mov	r1, r3
   d5b3c:	6840      	ldr	r0, [r0, #4]
   d5b3e:	f7ff ba8b 	b.w	d5058 <network_on>

000d5b42 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5b42:	2200      	movs	r2, #0
   d5b44:	4611      	mov	r1, r2
   d5b46:	6840      	ldr	r0, [r0, #4]
   d5b48:	f7ff ba6e 	b.w	d5028 <network_connecting>

000d5b4c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b4c:	2200      	movs	r2, #0
   d5b4e:	2102      	movs	r1, #2
   d5b50:	6840      	ldr	r0, [r0, #4]
   d5b52:	f7ff ba71 	b.w	d5038 <network_disconnect>

000d5b56 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5b56:	2300      	movs	r3, #0
   d5b58:	461a      	mov	r2, r3
   d5b5a:	6840      	ldr	r0, [r0, #4]
   d5b5c:	f7ff ba5c 	b.w	d5018 <network_connect>

000d5b60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5b60:	4b02      	ldr	r3, [pc, #8]	; (d5b6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5b62:	2204      	movs	r2, #4
   d5b64:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5b66:	4a02      	ldr	r2, [pc, #8]	; (d5b70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5b68:	601a      	str	r2, [r3, #0]
   d5b6a:	4770      	bx	lr
   d5b6c:	2003e704 	.word	0x2003e704
   d5b70:	000d735c 	.word	0x000d735c

000d5b74 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5b74:	2300      	movs	r3, #0
   d5b76:	461a      	mov	r2, r3
   d5b78:	6840      	ldr	r0, [r0, #4]
   d5b7a:	f7ff ba4d 	b.w	d5018 <network_connect>

000d5b7e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5b7e:	2200      	movs	r2, #0
   d5b80:	2102      	movs	r1, #2
   d5b82:	6840      	ldr	r0, [r0, #4]
   d5b84:	f7ff ba58 	b.w	d5038 <network_disconnect>

000d5b88 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5b88:	2200      	movs	r2, #0
   d5b8a:	4611      	mov	r1, r2
   d5b8c:	6840      	ldr	r0, [r0, #4]
   d5b8e:	f7ff ba4b 	b.w	d5028 <network_connecting>

000d5b92 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5b92:	2200      	movs	r2, #0
   d5b94:	4611      	mov	r1, r2
   d5b96:	6840      	ldr	r0, [r0, #4]
   d5b98:	f7ff ba56 	b.w	d5048 <network_ready>

000d5b9c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5b9c:	2300      	movs	r3, #0
   d5b9e:	461a      	mov	r2, r3
   d5ba0:	4619      	mov	r1, r3
   d5ba2:	6840      	ldr	r0, [r0, #4]
   d5ba4:	f7ff ba58 	b.w	d5058 <network_on>

000d5ba8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5ba8:	2300      	movs	r3, #0
   d5baa:	461a      	mov	r2, r3
   d5bac:	4619      	mov	r1, r3
   d5bae:	6840      	ldr	r0, [r0, #4]
   d5bb0:	f7ff ba5a 	b.w	d5068 <network_off>

000d5bb4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5bb4:	2200      	movs	r2, #0
   d5bb6:	f081 0101 	eor.w	r1, r1, #1
   d5bba:	6840      	ldr	r0, [r0, #4]
   d5bbc:	f7ff ba5c 	b.w	d5078 <network_listen>

000d5bc0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5bc0:	2200      	movs	r2, #0
   d5bc2:	6840      	ldr	r0, [r0, #4]
   d5bc4:	f7ff ba68 	b.w	d5098 <network_set_listen_timeout>

000d5bc8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5bc8:	2200      	movs	r2, #0
   d5bca:	4611      	mov	r1, r2
   d5bcc:	6840      	ldr	r0, [r0, #4]
   d5bce:	f7ff ba6b 	b.w	d50a8 <network_get_listen_timeout>

000d5bd2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5bd2:	2200      	movs	r2, #0
   d5bd4:	4611      	mov	r1, r2
   d5bd6:	6840      	ldr	r0, [r0, #4]
   d5bd8:	f7ff ba56 	b.w	d5088 <network_listening>

000d5bdc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5be0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5be2:	b095      	sub	sp, #84	; 0x54
   d5be4:	4616      	mov	r6, r2
   d5be6:	460d      	mov	r5, r1
   d5be8:	4607      	mov	r7, r0
    IPAddress addr;
   d5bea:	f7ff fd71 	bl	d56d0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5bee:	4621      	mov	r1, r4
   d5bf0:	2220      	movs	r2, #32
   d5bf2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5bf4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5bf6:	f000 ff92 	bl	d6b1e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5bfa:	2340      	movs	r3, #64	; 0x40
   d5bfc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5bfe:	4621      	mov	r1, r4
   d5c00:	466b      	mov	r3, sp
   d5c02:	aa0c      	add	r2, sp, #48	; 0x30
   d5c04:	4630      	mov	r0, r6
   d5c06:	f7ff f853 	bl	d4cb0 <netdb_getaddrinfo>
    if (!r) {
   d5c0a:	4604      	mov	r4, r0
   d5c0c:	2800      	cmp	r0, #0
   d5c0e:	d144      	bne.n	d5c9a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c10:	4602      	mov	r2, r0
   d5c12:	2101      	movs	r1, #1
   d5c14:	6868      	ldr	r0, [r5, #4]
   d5c16:	f7ff fa17 	bl	d5048 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c1a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c1c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c1e:	4622      	mov	r2, r4
   d5c20:	6868      	ldr	r0, [r5, #4]
   d5c22:	f7ff fa11 	bl	d5048 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c26:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c28:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5c2a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c2c:	2e00      	cmp	r6, #0
   d5c2e:	d034      	beq.n	d5c9a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5c30:	2900      	cmp	r1, #0
   d5c32:	d132      	bne.n	d5c9a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5c34:	6873      	ldr	r3, [r6, #4]
   d5c36:	2b02      	cmp	r3, #2
   d5c38:	d002      	beq.n	d5c40 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5c3a:	2b0a      	cmp	r3, #10
   d5c3c:	d009      	beq.n	d5c52 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5c3e:	e02a      	b.n	d5c96 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5c40:	f1b8 0f00 	cmp.w	r8, #0
   d5c44:	d027      	beq.n	d5c96 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5c46:	6971      	ldr	r1, [r6, #20]
   d5c48:	4638      	mov	r0, r7
   d5c4a:	3104      	adds	r1, #4
   d5c4c:	f7ff fd6d 	bl	d572a <_ZN9IPAddressaSEPKh>
   d5c50:	e020      	b.n	d5c94 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5c52:	f1b9 0f00 	cmp.w	r9, #0
   d5c56:	d01e      	beq.n	d5c96 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5c58:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5c5a:	2211      	movs	r2, #17
   d5c5c:	a801      	add	r0, sp, #4
   d5c5e:	f000 ff5e 	bl	d6b1e <memset>
                    a.v = 6;
   d5c62:	2306      	movs	r3, #6
   d5c64:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5c68:	ad01      	add	r5, sp, #4
   d5c6a:	f104 0308 	add.w	r3, r4, #8
   d5c6e:	3418      	adds	r4, #24
   d5c70:	6818      	ldr	r0, [r3, #0]
   d5c72:	6859      	ldr	r1, [r3, #4]
   d5c74:	462a      	mov	r2, r5
   d5c76:	c203      	stmia	r2!, {r0, r1}
   d5c78:	3308      	adds	r3, #8
   d5c7a:	42a3      	cmp	r3, r4
   d5c7c:	4615      	mov	r5, r2
   d5c7e:	d1f7      	bne.n	d5c70 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5c80:	a901      	add	r1, sp, #4
   d5c82:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5c84:	ad07      	add	r5, sp, #28
   d5c86:	f7ff fd31 	bl	d56ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c8c:	1d3c      	adds	r4, r7, #4
   d5c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c90:	682b      	ldr	r3, [r5, #0]
   d5c92:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5c94:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c96:	69f6      	ldr	r6, [r6, #28]
   d5c98:	e7c8      	b.n	d5c2c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5c9a:	9800      	ldr	r0, [sp, #0]
   d5c9c:	f7ff f800 	bl	d4ca0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5ca0:	4638      	mov	r0, r7
   d5ca2:	b015      	add	sp, #84	; 0x54
   d5ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ca8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ca8:	4b02      	ldr	r3, [pc, #8]	; (d5cb4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5caa:	4a03      	ldr	r2, [pc, #12]	; (d5cb8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5cac:	601a      	str	r2, [r3, #0]
   d5cae:	2200      	movs	r2, #0
   d5cb0:	605a      	str	r2, [r3, #4]
   d5cb2:	4770      	bx	lr
   d5cb4:	2003e70c 	.word	0x2003e70c
   d5cb8:	000d7390 	.word	0x000d7390

000d5cbc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5cbc:	b510      	push	{r4, lr}
   d5cbe:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5cc0:	480f      	ldr	r0, [pc, #60]	; (d5d00 <pinAvailable+0x44>)
   d5cc2:	f7ff fad7 	bl	d5274 <_ZN8SPIClass9isEnabledEv>
   d5cc6:	b128      	cbz	r0, d5cd4 <pinAvailable+0x18>
   d5cc8:	f1a4 030b 	sub.w	r3, r4, #11
   d5ccc:	2b02      	cmp	r3, #2
   d5cce:	d801      	bhi.n	d5cd4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5cd0:	2000      	movs	r0, #0
   d5cd2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5cd4:	f000 f89c 	bl	d5e10 <_Z19__fetch_global_Wirev>
   d5cd8:	f7ff fe5e 	bl	d5998 <_ZN7TwoWire9isEnabledEv>
   d5cdc:	b108      	cbz	r0, d5ce2 <pinAvailable+0x26>
   d5cde:	2c01      	cmp	r4, #1
   d5ce0:	d9f6      	bls.n	d5cd0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5ce2:	f7ff fde1 	bl	d58a8 <_Z22__fetch_global_Serial1v>
   d5ce6:	f7ff fddb 	bl	d58a0 <_ZN11USARTSerial9isEnabledEv>
   d5cea:	b118      	cbz	r0, d5cf4 <pinAvailable+0x38>
   d5cec:	f1a4 0309 	sub.w	r3, r4, #9
   d5cf0:	2b01      	cmp	r3, #1
   d5cf2:	d9ed      	bls.n	d5cd0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5cf4:	2c23      	cmp	r4, #35	; 0x23
   d5cf6:	bf8c      	ite	hi
   d5cf8:	2000      	movhi	r0, #0
   d5cfa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5cfc:	bd10      	pop	{r4, pc}
   d5cfe:	bf00      	nop
   d5d00:	2003e714 	.word	0x2003e714

000d5d04 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5d04:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5d06:	b538      	push	{r3, r4, r5, lr}
   d5d08:	4604      	mov	r4, r0
   d5d0a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5d0c:	d80a      	bhi.n	d5d24 <pinMode+0x20>
   d5d0e:	29ff      	cmp	r1, #255	; 0xff
   d5d10:	d008      	beq.n	d5d24 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5d12:	f7ff ffd3 	bl	d5cbc <pinAvailable>
   d5d16:	b128      	cbz	r0, d5d24 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5d18:	4629      	mov	r1, r5
   d5d1a:	4620      	mov	r0, r4
}
   d5d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5d20:	f7fe bfde 	b.w	d4ce0 <HAL_Pin_Mode>
   d5d24:	bd38      	pop	{r3, r4, r5, pc}

000d5d26 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5d26:	b538      	push	{r3, r4, r5, lr}
   d5d28:	4604      	mov	r4, r0
   d5d2a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5d2c:	f7fe ffe0 	bl	d4cf0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5d30:	28ff      	cmp	r0, #255	; 0xff
   d5d32:	d010      	beq.n	d5d56 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5d34:	2806      	cmp	r0, #6
   d5d36:	d804      	bhi.n	d5d42 <digitalWrite+0x1c>
   d5d38:	234d      	movs	r3, #77	; 0x4d
   d5d3a:	fa23 f000 	lsr.w	r0, r3, r0
   d5d3e:	07c3      	lsls	r3, r0, #31
   d5d40:	d409      	bmi.n	d5d56 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5d42:	4620      	mov	r0, r4
   d5d44:	f7ff ffba 	bl	d5cbc <pinAvailable>
   d5d48:	b128      	cbz	r0, d5d56 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5d4a:	4629      	mov	r1, r5
   d5d4c:	4620      	mov	r0, r4
}
   d5d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5d52:	f7fe bfd5 	b.w	d4d00 <HAL_GPIO_Write>
   d5d56:	bd38      	pop	{r3, r4, r5, pc}

000d5d58 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d5d58:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d5d5a:	b510      	push	{r4, lr}
   d5d5c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d5d5e:	bf9c      	itt	ls
   d5d60:	340e      	addls	r4, #14
   d5d62:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5d64:	4620      	mov	r0, r4
   d5d66:	f7ff ffa9 	bl	d5cbc <pinAvailable>
   d5d6a:	b150      	cbz	r0, d5d82 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d5d6c:	2103      	movs	r1, #3
   d5d6e:	4620      	mov	r0, r4
   d5d70:	f7fe ffae 	bl	d4cd0 <HAL_Validate_Pin_Function>
   d5d74:	2803      	cmp	r0, #3
   d5d76:	d104      	bne.n	d5d82 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5d78:	4620      	mov	r0, r4
}
   d5d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d5d7e:	f7fe bfc7 	b.w	d4d10 <HAL_ADC_Read>
}
   d5d82:	2000      	movs	r0, #0
   d5d84:	bd10      	pop	{r4, pc}

000d5d86 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d5d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d8a:	4690      	mov	r8, r2
   d5d8c:	461e      	mov	r6, r3
   d5d8e:	2407      	movs	r4, #7
   d5d90:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d5d92:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d5d94:	f1b8 0f00 	cmp.w	r8, #0
   d5d98:	d104      	bne.n	d5da4 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d5d9a:	f1c4 0107 	rsb	r1, r4, #7
   d5d9e:	fa46 f101 	asr.w	r1, r6, r1
   d5da2:	e001      	b.n	d5da8 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d5da4:	fa46 f104 	asr.w	r1, r6, r4
   d5da8:	f001 0101 	and.w	r1, r1, #1
   d5dac:	4638      	mov	r0, r7
   d5dae:	f7ff ffba 	bl	d5d26 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d5db2:	2101      	movs	r1, #1
   d5db4:	4628      	mov	r0, r5
   d5db6:	f7ff ffb6 	bl	d5d26 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d5dba:	2100      	movs	r1, #0
   d5dbc:	4628      	mov	r0, r5
   d5dbe:	f7ff ffb2 	bl	d5d26 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d5dc2:	f114 34ff 	adds.w	r4, r4, #4294967295
   d5dc6:	d2e5      	bcs.n	d5d94 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d5dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5dcc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5dcc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5dce:	4c0c      	ldr	r4, [pc, #48]	; (d5e00 <_GLOBAL__sub_I_SPI+0x34>)
   d5dd0:	4e0c      	ldr	r6, [pc, #48]	; (d5e04 <_GLOBAL__sub_I_SPI+0x38>)
   d5dd2:	4d0d      	ldr	r5, [pc, #52]	; (d5e08 <_GLOBAL__sub_I_SPI+0x3c>)
   d5dd4:	2100      	movs	r1, #0
   d5dd6:	4620      	mov	r0, r4
   d5dd8:	f7ff f9cc 	bl	d5174 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5ddc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5dde:	4c0b      	ldr	r4, [pc, #44]	; (d5e0c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5de0:	4632      	mov	r2, r6
   d5de2:	4629      	mov	r1, r5
   d5de4:	f000 f834 	bl	d5e50 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5de8:	2101      	movs	r1, #1
   d5dea:	4620      	mov	r0, r4
   d5dec:	f7ff f9c2 	bl	d5174 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5df0:	4632      	mov	r2, r6
   d5df2:	4629      	mov	r1, r5
   d5df4:	4620      	mov	r0, r4
   d5df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5dfa:	f000 b829 	b.w	d5e50 <__aeabi_atexit>
   d5dfe:	bf00      	nop
   d5e00:	2003e714 	.word	0x2003e714
   d5e04:	2003e3a8 	.word	0x2003e3a8
   d5e08:	000d5165 	.word	0x000d5165
   d5e0c:	2003e724 	.word	0x2003e724

000d5e10 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5e10:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5e12:	4d0b      	ldr	r5, [pc, #44]	; (d5e40 <_Z19__fetch_global_Wirev+0x30>)
   d5e14:	6829      	ldr	r1, [r5, #0]
   d5e16:	f011 0401 	ands.w	r4, r1, #1
   d5e1a:	d10f      	bne.n	d5e3c <_Z19__fetch_global_Wirev+0x2c>
   d5e1c:	4628      	mov	r0, r5
   d5e1e:	f7fe f949 	bl	d40b4 <__cxa_guard_acquire>
   d5e22:	b158      	cbz	r0, d5e3c <_Z19__fetch_global_Wirev+0x2c>
   d5e24:	4621      	mov	r1, r4
   d5e26:	4807      	ldr	r0, [pc, #28]	; (d5e44 <_Z19__fetch_global_Wirev+0x34>)
   d5e28:	f7ff fd90 	bl	d594c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5e2c:	4628      	mov	r0, r5
   d5e2e:	f7fe f946 	bl	d40be <__cxa_guard_release>
   d5e32:	4a05      	ldr	r2, [pc, #20]	; (d5e48 <_Z19__fetch_global_Wirev+0x38>)
   d5e34:	4905      	ldr	r1, [pc, #20]	; (d5e4c <_Z19__fetch_global_Wirev+0x3c>)
   d5e36:	4803      	ldr	r0, [pc, #12]	; (d5e44 <_Z19__fetch_global_Wirev+0x34>)
   d5e38:	f000 f80a 	bl	d5e50 <__aeabi_atexit>
	return wire;
}
   d5e3c:	4801      	ldr	r0, [pc, #4]	; (d5e44 <_Z19__fetch_global_Wirev+0x34>)
   d5e3e:	bd38      	pop	{r3, r4, r5, pc}
   d5e40:	2003e738 	.word	0x2003e738
   d5e44:	2003e73c 	.word	0x2003e73c
   d5e48:	2003e3a8 	.word	0x2003e3a8
   d5e4c:	000d58f5 	.word	0x000d58f5

000d5e50 <__aeabi_atexit>:
   d5e50:	460b      	mov	r3, r1
   d5e52:	4601      	mov	r1, r0
   d5e54:	4618      	mov	r0, r3
   d5e56:	f000 be49 	b.w	d6aec <__cxa_atexit>
	...

000d5e5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5e5c:	4b18      	ldr	r3, [pc, #96]	; (d5ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5e5e:	681a      	ldr	r2, [r3, #0]
   d5e60:	07d1      	lsls	r1, r2, #31
   d5e62:	bf5c      	itt	pl
   d5e64:	2201      	movpl	r2, #1
   d5e66:	601a      	strpl	r2, [r3, #0]
   d5e68:	4b16      	ldr	r3, [pc, #88]	; (d5ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5e6a:	681a      	ldr	r2, [r3, #0]
   d5e6c:	07d2      	lsls	r2, r2, #31
   d5e6e:	bf5c      	itt	pl
   d5e70:	2201      	movpl	r2, #1
   d5e72:	601a      	strpl	r2, [r3, #0]
   d5e74:	4b14      	ldr	r3, [pc, #80]	; (d5ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5e76:	681a      	ldr	r2, [r3, #0]
   d5e78:	07d0      	lsls	r0, r2, #31
   d5e7a:	bf5c      	itt	pl
   d5e7c:	2201      	movpl	r2, #1
   d5e7e:	601a      	strpl	r2, [r3, #0]
   d5e80:	4b12      	ldr	r3, [pc, #72]	; (d5ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5e82:	681a      	ldr	r2, [r3, #0]
   d5e84:	07d1      	lsls	r1, r2, #31
   d5e86:	bf5c      	itt	pl
   d5e88:	2201      	movpl	r2, #1
   d5e8a:	601a      	strpl	r2, [r3, #0]
   d5e8c:	4b10      	ldr	r3, [pc, #64]	; (d5ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5e8e:	681a      	ldr	r2, [r3, #0]
   d5e90:	07d2      	lsls	r2, r2, #31
   d5e92:	bf5c      	itt	pl
   d5e94:	2201      	movpl	r2, #1
   d5e96:	601a      	strpl	r2, [r3, #0]
   d5e98:	4b0e      	ldr	r3, [pc, #56]	; (d5ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5e9a:	681a      	ldr	r2, [r3, #0]
   d5e9c:	07d0      	lsls	r0, r2, #31
   d5e9e:	bf5c      	itt	pl
   d5ea0:	2201      	movpl	r2, #1
   d5ea2:	601a      	strpl	r2, [r3, #0]
   d5ea4:	4b0c      	ldr	r3, [pc, #48]	; (d5ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5ea6:	681a      	ldr	r2, [r3, #0]
   d5ea8:	07d1      	lsls	r1, r2, #31
   d5eaa:	bf5c      	itt	pl
   d5eac:	2201      	movpl	r2, #1
   d5eae:	601a      	strpl	r2, [r3, #0]
   d5eb0:	4b0a      	ldr	r3, [pc, #40]	; (d5edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5eb2:	681a      	ldr	r2, [r3, #0]
   d5eb4:	07d2      	lsls	r2, r2, #31
   d5eb6:	bf5c      	itt	pl
   d5eb8:	2201      	movpl	r2, #1
   d5eba:	601a      	strpl	r2, [r3, #0]
   d5ebc:	4770      	bx	lr
   d5ebe:	bf00      	nop
   d5ec0:	2003e76c 	.word	0x2003e76c
   d5ec4:	2003e768 	.word	0x2003e768
   d5ec8:	2003e764 	.word	0x2003e764
   d5ecc:	2003e760 	.word	0x2003e760
   d5ed0:	2003e75c 	.word	0x2003e75c
   d5ed4:	2003e758 	.word	0x2003e758
   d5ed8:	2003e754 	.word	0x2003e754
   d5edc:	2003e750 	.word	0x2003e750

000d5ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5ee0:	4b24      	ldr	r3, [pc, #144]	; (d5f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5ee2:	681a      	ldr	r2, [r3, #0]
   d5ee4:	07d0      	lsls	r0, r2, #31
   d5ee6:	bf5c      	itt	pl
   d5ee8:	2201      	movpl	r2, #1
   d5eea:	601a      	strpl	r2, [r3, #0]
   d5eec:	4b22      	ldr	r3, [pc, #136]	; (d5f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5eee:	681a      	ldr	r2, [r3, #0]
   d5ef0:	07d1      	lsls	r1, r2, #31
   d5ef2:	bf5c      	itt	pl
   d5ef4:	2201      	movpl	r2, #1
   d5ef6:	601a      	strpl	r2, [r3, #0]
   d5ef8:	4b20      	ldr	r3, [pc, #128]	; (d5f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5efa:	681a      	ldr	r2, [r3, #0]
   d5efc:	07d2      	lsls	r2, r2, #31
   d5efe:	bf5c      	itt	pl
   d5f00:	2201      	movpl	r2, #1
   d5f02:	601a      	strpl	r2, [r3, #0]
   d5f04:	4b1e      	ldr	r3, [pc, #120]	; (d5f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5f06:	681a      	ldr	r2, [r3, #0]
   d5f08:	07d0      	lsls	r0, r2, #31
   d5f0a:	bf5c      	itt	pl
   d5f0c:	2201      	movpl	r2, #1
   d5f0e:	601a      	strpl	r2, [r3, #0]
   d5f10:	4b1c      	ldr	r3, [pc, #112]	; (d5f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5f12:	681a      	ldr	r2, [r3, #0]
   d5f14:	07d1      	lsls	r1, r2, #31
   d5f16:	bf5c      	itt	pl
   d5f18:	2201      	movpl	r2, #1
   d5f1a:	601a      	strpl	r2, [r3, #0]
   d5f1c:	4b1a      	ldr	r3, [pc, #104]	; (d5f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5f1e:	681a      	ldr	r2, [r3, #0]
   d5f20:	07d2      	lsls	r2, r2, #31
   d5f22:	bf5c      	itt	pl
   d5f24:	2201      	movpl	r2, #1
   d5f26:	601a      	strpl	r2, [r3, #0]
   d5f28:	4b18      	ldr	r3, [pc, #96]	; (d5f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5f2a:	681a      	ldr	r2, [r3, #0]
   d5f2c:	07d0      	lsls	r0, r2, #31
   d5f2e:	bf5c      	itt	pl
   d5f30:	2201      	movpl	r2, #1
   d5f32:	601a      	strpl	r2, [r3, #0]
   d5f34:	4b16      	ldr	r3, [pc, #88]	; (d5f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5f36:	681a      	ldr	r2, [r3, #0]
   d5f38:	07d1      	lsls	r1, r2, #31
   d5f3a:	bf5c      	itt	pl
   d5f3c:	2201      	movpl	r2, #1
   d5f3e:	601a      	strpl	r2, [r3, #0]
   d5f40:	4b14      	ldr	r3, [pc, #80]	; (d5f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5f42:	681a      	ldr	r2, [r3, #0]
   d5f44:	07d2      	lsls	r2, r2, #31
   d5f46:	bf5c      	itt	pl
   d5f48:	2201      	movpl	r2, #1
   d5f4a:	601a      	strpl	r2, [r3, #0]
   d5f4c:	4b12      	ldr	r3, [pc, #72]	; (d5f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5f4e:	681a      	ldr	r2, [r3, #0]
   d5f50:	07d0      	lsls	r0, r2, #31
   d5f52:	bf5c      	itt	pl
   d5f54:	2201      	movpl	r2, #1
   d5f56:	601a      	strpl	r2, [r3, #0]
   d5f58:	4b10      	ldr	r3, [pc, #64]	; (d5f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5f5a:	681a      	ldr	r2, [r3, #0]
   d5f5c:	07d1      	lsls	r1, r2, #31
   d5f5e:	bf5c      	itt	pl
   d5f60:	2201      	movpl	r2, #1
   d5f62:	601a      	strpl	r2, [r3, #0]
   d5f64:	4b0e      	ldr	r3, [pc, #56]	; (d5fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5f66:	681a      	ldr	r2, [r3, #0]
   d5f68:	07d2      	lsls	r2, r2, #31
   d5f6a:	bf5c      	itt	pl
   d5f6c:	2201      	movpl	r2, #1
   d5f6e:	601a      	strpl	r2, [r3, #0]
   d5f70:	4770      	bx	lr
   d5f72:	bf00      	nop
   d5f74:	2003e79c 	.word	0x2003e79c
   d5f78:	2003e798 	.word	0x2003e798
   d5f7c:	2003e794 	.word	0x2003e794
   d5f80:	2003e790 	.word	0x2003e790
   d5f84:	2003e78c 	.word	0x2003e78c
   d5f88:	2003e788 	.word	0x2003e788
   d5f8c:	2003e784 	.word	0x2003e784
   d5f90:	2003e780 	.word	0x2003e780
   d5f94:	2003e77c 	.word	0x2003e77c
   d5f98:	2003e778 	.word	0x2003e778
   d5f9c:	2003e774 	.word	0x2003e774
   d5fa0:	2003e770 	.word	0x2003e770

000d5fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5fa4:	4b24      	ldr	r3, [pc, #144]	; (d6038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5fa6:	681a      	ldr	r2, [r3, #0]
   d5fa8:	07d0      	lsls	r0, r2, #31
   d5faa:	bf5c      	itt	pl
   d5fac:	2201      	movpl	r2, #1
   d5fae:	601a      	strpl	r2, [r3, #0]
   d5fb0:	4b22      	ldr	r3, [pc, #136]	; (d603c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5fb2:	681a      	ldr	r2, [r3, #0]
   d5fb4:	07d1      	lsls	r1, r2, #31
   d5fb6:	bf5c      	itt	pl
   d5fb8:	2201      	movpl	r2, #1
   d5fba:	601a      	strpl	r2, [r3, #0]
   d5fbc:	4b20      	ldr	r3, [pc, #128]	; (d6040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5fbe:	681a      	ldr	r2, [r3, #0]
   d5fc0:	07d2      	lsls	r2, r2, #31
   d5fc2:	bf5c      	itt	pl
   d5fc4:	2201      	movpl	r2, #1
   d5fc6:	601a      	strpl	r2, [r3, #0]
   d5fc8:	4b1e      	ldr	r3, [pc, #120]	; (d6044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5fca:	681a      	ldr	r2, [r3, #0]
   d5fcc:	07d0      	lsls	r0, r2, #31
   d5fce:	bf5c      	itt	pl
   d5fd0:	2201      	movpl	r2, #1
   d5fd2:	601a      	strpl	r2, [r3, #0]
   d5fd4:	4b1c      	ldr	r3, [pc, #112]	; (d6048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5fd6:	681a      	ldr	r2, [r3, #0]
   d5fd8:	07d1      	lsls	r1, r2, #31
   d5fda:	bf5c      	itt	pl
   d5fdc:	2201      	movpl	r2, #1
   d5fde:	601a      	strpl	r2, [r3, #0]
   d5fe0:	4b1a      	ldr	r3, [pc, #104]	; (d604c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5fe2:	681a      	ldr	r2, [r3, #0]
   d5fe4:	07d2      	lsls	r2, r2, #31
   d5fe6:	bf5c      	itt	pl
   d5fe8:	2201      	movpl	r2, #1
   d5fea:	601a      	strpl	r2, [r3, #0]
   d5fec:	4b18      	ldr	r3, [pc, #96]	; (d6050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5fee:	681a      	ldr	r2, [r3, #0]
   d5ff0:	07d0      	lsls	r0, r2, #31
   d5ff2:	bf5c      	itt	pl
   d5ff4:	2201      	movpl	r2, #1
   d5ff6:	601a      	strpl	r2, [r3, #0]
   d5ff8:	4b16      	ldr	r3, [pc, #88]	; (d6054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5ffa:	681a      	ldr	r2, [r3, #0]
   d5ffc:	07d1      	lsls	r1, r2, #31
   d5ffe:	bf5c      	itt	pl
   d6000:	2201      	movpl	r2, #1
   d6002:	601a      	strpl	r2, [r3, #0]
   d6004:	4b14      	ldr	r3, [pc, #80]	; (d6058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	07d2      	lsls	r2, r2, #31
   d600a:	bf5c      	itt	pl
   d600c:	2201      	movpl	r2, #1
   d600e:	601a      	strpl	r2, [r3, #0]
   d6010:	4b12      	ldr	r3, [pc, #72]	; (d605c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	07d0      	lsls	r0, r2, #31
   d6016:	bf5c      	itt	pl
   d6018:	2201      	movpl	r2, #1
   d601a:	601a      	strpl	r2, [r3, #0]
   d601c:	4b10      	ldr	r3, [pc, #64]	; (d6060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d601e:	681a      	ldr	r2, [r3, #0]
   d6020:	07d1      	lsls	r1, r2, #31
   d6022:	bf5c      	itt	pl
   d6024:	2201      	movpl	r2, #1
   d6026:	601a      	strpl	r2, [r3, #0]
   d6028:	4b0e      	ldr	r3, [pc, #56]	; (d6064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d602a:	681a      	ldr	r2, [r3, #0]
   d602c:	07d2      	lsls	r2, r2, #31
   d602e:	bf5c      	itt	pl
   d6030:	2201      	movpl	r2, #1
   d6032:	601a      	strpl	r2, [r3, #0]
   d6034:	4770      	bx	lr
   d6036:	bf00      	nop
   d6038:	2003e7cc 	.word	0x2003e7cc
   d603c:	2003e7c8 	.word	0x2003e7c8
   d6040:	2003e7c4 	.word	0x2003e7c4
   d6044:	2003e7c0 	.word	0x2003e7c0
   d6048:	2003e7bc 	.word	0x2003e7bc
   d604c:	2003e7b8 	.word	0x2003e7b8
   d6050:	2003e7b4 	.word	0x2003e7b4
   d6054:	2003e7b0 	.word	0x2003e7b0
   d6058:	2003e7ac 	.word	0x2003e7ac
   d605c:	2003e7a8 	.word	0x2003e7a8
   d6060:	2003e7a4 	.word	0x2003e7a4
   d6064:	2003e7a0 	.word	0x2003e7a0

000d6068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6068:	4b18      	ldr	r3, [pc, #96]	; (d60cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d606a:	681a      	ldr	r2, [r3, #0]
   d606c:	07d1      	lsls	r1, r2, #31
   d606e:	bf5c      	itt	pl
   d6070:	2201      	movpl	r2, #1
   d6072:	601a      	strpl	r2, [r3, #0]
   d6074:	4b16      	ldr	r3, [pc, #88]	; (d60d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6076:	681a      	ldr	r2, [r3, #0]
   d6078:	07d2      	lsls	r2, r2, #31
   d607a:	bf5c      	itt	pl
   d607c:	2201      	movpl	r2, #1
   d607e:	601a      	strpl	r2, [r3, #0]
   d6080:	4b14      	ldr	r3, [pc, #80]	; (d60d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6082:	681a      	ldr	r2, [r3, #0]
   d6084:	07d0      	lsls	r0, r2, #31
   d6086:	bf5c      	itt	pl
   d6088:	2201      	movpl	r2, #1
   d608a:	601a      	strpl	r2, [r3, #0]
   d608c:	4b12      	ldr	r3, [pc, #72]	; (d60d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d608e:	681a      	ldr	r2, [r3, #0]
   d6090:	07d1      	lsls	r1, r2, #31
   d6092:	bf5c      	itt	pl
   d6094:	2201      	movpl	r2, #1
   d6096:	601a      	strpl	r2, [r3, #0]
   d6098:	4b10      	ldr	r3, [pc, #64]	; (d60dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d609a:	681a      	ldr	r2, [r3, #0]
   d609c:	07d2      	lsls	r2, r2, #31
   d609e:	bf5c      	itt	pl
   d60a0:	2201      	movpl	r2, #1
   d60a2:	601a      	strpl	r2, [r3, #0]
   d60a4:	4b0e      	ldr	r3, [pc, #56]	; (d60e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d60a6:	681a      	ldr	r2, [r3, #0]
   d60a8:	07d0      	lsls	r0, r2, #31
   d60aa:	bf5c      	itt	pl
   d60ac:	2201      	movpl	r2, #1
   d60ae:	601a      	strpl	r2, [r3, #0]
   d60b0:	4b0c      	ldr	r3, [pc, #48]	; (d60e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d60b2:	681a      	ldr	r2, [r3, #0]
   d60b4:	07d1      	lsls	r1, r2, #31
   d60b6:	bf5c      	itt	pl
   d60b8:	2201      	movpl	r2, #1
   d60ba:	601a      	strpl	r2, [r3, #0]
   d60bc:	4b0a      	ldr	r3, [pc, #40]	; (d60e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d60be:	681a      	ldr	r2, [r3, #0]
   d60c0:	07d2      	lsls	r2, r2, #31
   d60c2:	bf5c      	itt	pl
   d60c4:	2201      	movpl	r2, #1
   d60c6:	601a      	strpl	r2, [r3, #0]
   d60c8:	4770      	bx	lr
   d60ca:	bf00      	nop
   d60cc:	2003e7ec 	.word	0x2003e7ec
   d60d0:	2003e7e8 	.word	0x2003e7e8
   d60d4:	2003e7e4 	.word	0x2003e7e4
   d60d8:	2003e7e0 	.word	0x2003e7e0
   d60dc:	2003e7dc 	.word	0x2003e7dc
   d60e0:	2003e7d8 	.word	0x2003e7d8
   d60e4:	2003e7d4 	.word	0x2003e7d4
   d60e8:	2003e7d0 	.word	0x2003e7d0

000d60ec <__aeabi_drsub>:
   d60ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d60f0:	e002      	b.n	d60f8 <__adddf3>
   d60f2:	bf00      	nop

000d60f4 <__aeabi_dsub>:
   d60f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d60f8 <__adddf3>:
   d60f8:	b530      	push	{r4, r5, lr}
   d60fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d60fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6102:	ea94 0f05 	teq	r4, r5
   d6106:	bf08      	it	eq
   d6108:	ea90 0f02 	teqeq	r0, r2
   d610c:	bf1f      	itttt	ne
   d610e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6112:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6116:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d611a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d611e:	f000 80e2 	beq.w	d62e6 <__adddf3+0x1ee>
   d6122:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6126:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d612a:	bfb8      	it	lt
   d612c:	426d      	neglt	r5, r5
   d612e:	dd0c      	ble.n	d614a <__adddf3+0x52>
   d6130:	442c      	add	r4, r5
   d6132:	ea80 0202 	eor.w	r2, r0, r2
   d6136:	ea81 0303 	eor.w	r3, r1, r3
   d613a:	ea82 0000 	eor.w	r0, r2, r0
   d613e:	ea83 0101 	eor.w	r1, r3, r1
   d6142:	ea80 0202 	eor.w	r2, r0, r2
   d6146:	ea81 0303 	eor.w	r3, r1, r3
   d614a:	2d36      	cmp	r5, #54	; 0x36
   d614c:	bf88      	it	hi
   d614e:	bd30      	pophi	{r4, r5, pc}
   d6150:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6154:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6158:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d615c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6160:	d002      	beq.n	d6168 <__adddf3+0x70>
   d6162:	4240      	negs	r0, r0
   d6164:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6168:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d616c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6170:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6174:	d002      	beq.n	d617c <__adddf3+0x84>
   d6176:	4252      	negs	r2, r2
   d6178:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d617c:	ea94 0f05 	teq	r4, r5
   d6180:	f000 80a7 	beq.w	d62d2 <__adddf3+0x1da>
   d6184:	f1a4 0401 	sub.w	r4, r4, #1
   d6188:	f1d5 0e20 	rsbs	lr, r5, #32
   d618c:	db0d      	blt.n	d61aa <__adddf3+0xb2>
   d618e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6192:	fa22 f205 	lsr.w	r2, r2, r5
   d6196:	1880      	adds	r0, r0, r2
   d6198:	f141 0100 	adc.w	r1, r1, #0
   d619c:	fa03 f20e 	lsl.w	r2, r3, lr
   d61a0:	1880      	adds	r0, r0, r2
   d61a2:	fa43 f305 	asr.w	r3, r3, r5
   d61a6:	4159      	adcs	r1, r3
   d61a8:	e00e      	b.n	d61c8 <__adddf3+0xd0>
   d61aa:	f1a5 0520 	sub.w	r5, r5, #32
   d61ae:	f10e 0e20 	add.w	lr, lr, #32
   d61b2:	2a01      	cmp	r2, #1
   d61b4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d61b8:	bf28      	it	cs
   d61ba:	f04c 0c02 	orrcs.w	ip, ip, #2
   d61be:	fa43 f305 	asr.w	r3, r3, r5
   d61c2:	18c0      	adds	r0, r0, r3
   d61c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d61c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d61cc:	d507      	bpl.n	d61de <__adddf3+0xe6>
   d61ce:	f04f 0e00 	mov.w	lr, #0
   d61d2:	f1dc 0c00 	rsbs	ip, ip, #0
   d61d6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d61da:	eb6e 0101 	sbc.w	r1, lr, r1
   d61de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d61e2:	d31b      	bcc.n	d621c <__adddf3+0x124>
   d61e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d61e8:	d30c      	bcc.n	d6204 <__adddf3+0x10c>
   d61ea:	0849      	lsrs	r1, r1, #1
   d61ec:	ea5f 0030 	movs.w	r0, r0, rrx
   d61f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d61f4:	f104 0401 	add.w	r4, r4, #1
   d61f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d61fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6200:	f080 809a 	bcs.w	d6338 <__adddf3+0x240>
   d6204:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6208:	bf08      	it	eq
   d620a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d620e:	f150 0000 	adcs.w	r0, r0, #0
   d6212:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6216:	ea41 0105 	orr.w	r1, r1, r5
   d621a:	bd30      	pop	{r4, r5, pc}
   d621c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6220:	4140      	adcs	r0, r0
   d6222:	eb41 0101 	adc.w	r1, r1, r1
   d6226:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d622a:	f1a4 0401 	sub.w	r4, r4, #1
   d622e:	d1e9      	bne.n	d6204 <__adddf3+0x10c>
   d6230:	f091 0f00 	teq	r1, #0
   d6234:	bf04      	itt	eq
   d6236:	4601      	moveq	r1, r0
   d6238:	2000      	moveq	r0, #0
   d623a:	fab1 f381 	clz	r3, r1
   d623e:	bf08      	it	eq
   d6240:	3320      	addeq	r3, #32
   d6242:	f1a3 030b 	sub.w	r3, r3, #11
   d6246:	f1b3 0220 	subs.w	r2, r3, #32
   d624a:	da0c      	bge.n	d6266 <__adddf3+0x16e>
   d624c:	320c      	adds	r2, #12
   d624e:	dd08      	ble.n	d6262 <__adddf3+0x16a>
   d6250:	f102 0c14 	add.w	ip, r2, #20
   d6254:	f1c2 020c 	rsb	r2, r2, #12
   d6258:	fa01 f00c 	lsl.w	r0, r1, ip
   d625c:	fa21 f102 	lsr.w	r1, r1, r2
   d6260:	e00c      	b.n	d627c <__adddf3+0x184>
   d6262:	f102 0214 	add.w	r2, r2, #20
   d6266:	bfd8      	it	le
   d6268:	f1c2 0c20 	rsble	ip, r2, #32
   d626c:	fa01 f102 	lsl.w	r1, r1, r2
   d6270:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6274:	bfdc      	itt	le
   d6276:	ea41 010c 	orrle.w	r1, r1, ip
   d627a:	4090      	lslle	r0, r2
   d627c:	1ae4      	subs	r4, r4, r3
   d627e:	bfa2      	ittt	ge
   d6280:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6284:	4329      	orrge	r1, r5
   d6286:	bd30      	popge	{r4, r5, pc}
   d6288:	ea6f 0404 	mvn.w	r4, r4
   d628c:	3c1f      	subs	r4, #31
   d628e:	da1c      	bge.n	d62ca <__adddf3+0x1d2>
   d6290:	340c      	adds	r4, #12
   d6292:	dc0e      	bgt.n	d62b2 <__adddf3+0x1ba>
   d6294:	f104 0414 	add.w	r4, r4, #20
   d6298:	f1c4 0220 	rsb	r2, r4, #32
   d629c:	fa20 f004 	lsr.w	r0, r0, r4
   d62a0:	fa01 f302 	lsl.w	r3, r1, r2
   d62a4:	ea40 0003 	orr.w	r0, r0, r3
   d62a8:	fa21 f304 	lsr.w	r3, r1, r4
   d62ac:	ea45 0103 	orr.w	r1, r5, r3
   d62b0:	bd30      	pop	{r4, r5, pc}
   d62b2:	f1c4 040c 	rsb	r4, r4, #12
   d62b6:	f1c4 0220 	rsb	r2, r4, #32
   d62ba:	fa20 f002 	lsr.w	r0, r0, r2
   d62be:	fa01 f304 	lsl.w	r3, r1, r4
   d62c2:	ea40 0003 	orr.w	r0, r0, r3
   d62c6:	4629      	mov	r1, r5
   d62c8:	bd30      	pop	{r4, r5, pc}
   d62ca:	fa21 f004 	lsr.w	r0, r1, r4
   d62ce:	4629      	mov	r1, r5
   d62d0:	bd30      	pop	{r4, r5, pc}
   d62d2:	f094 0f00 	teq	r4, #0
   d62d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d62da:	bf06      	itte	eq
   d62dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d62e0:	3401      	addeq	r4, #1
   d62e2:	3d01      	subne	r5, #1
   d62e4:	e74e      	b.n	d6184 <__adddf3+0x8c>
   d62e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d62ea:	bf18      	it	ne
   d62ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d62f0:	d029      	beq.n	d6346 <__adddf3+0x24e>
   d62f2:	ea94 0f05 	teq	r4, r5
   d62f6:	bf08      	it	eq
   d62f8:	ea90 0f02 	teqeq	r0, r2
   d62fc:	d005      	beq.n	d630a <__adddf3+0x212>
   d62fe:	ea54 0c00 	orrs.w	ip, r4, r0
   d6302:	bf04      	itt	eq
   d6304:	4619      	moveq	r1, r3
   d6306:	4610      	moveq	r0, r2
   d6308:	bd30      	pop	{r4, r5, pc}
   d630a:	ea91 0f03 	teq	r1, r3
   d630e:	bf1e      	ittt	ne
   d6310:	2100      	movne	r1, #0
   d6312:	2000      	movne	r0, #0
   d6314:	bd30      	popne	{r4, r5, pc}
   d6316:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d631a:	d105      	bne.n	d6328 <__adddf3+0x230>
   d631c:	0040      	lsls	r0, r0, #1
   d631e:	4149      	adcs	r1, r1
   d6320:	bf28      	it	cs
   d6322:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6326:	bd30      	pop	{r4, r5, pc}
   d6328:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d632c:	bf3c      	itt	cc
   d632e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6332:	bd30      	popcc	{r4, r5, pc}
   d6334:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6338:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d633c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6340:	f04f 0000 	mov.w	r0, #0
   d6344:	bd30      	pop	{r4, r5, pc}
   d6346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d634a:	bf1a      	itte	ne
   d634c:	4619      	movne	r1, r3
   d634e:	4610      	movne	r0, r2
   d6350:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6354:	bf1c      	itt	ne
   d6356:	460b      	movne	r3, r1
   d6358:	4602      	movne	r2, r0
   d635a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d635e:	bf06      	itte	eq
   d6360:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6364:	ea91 0f03 	teqeq	r1, r3
   d6368:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d636c:	bd30      	pop	{r4, r5, pc}
   d636e:	bf00      	nop

000d6370 <__aeabi_ui2d>:
   d6370:	f090 0f00 	teq	r0, #0
   d6374:	bf04      	itt	eq
   d6376:	2100      	moveq	r1, #0
   d6378:	4770      	bxeq	lr
   d637a:	b530      	push	{r4, r5, lr}
   d637c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6380:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6384:	f04f 0500 	mov.w	r5, #0
   d6388:	f04f 0100 	mov.w	r1, #0
   d638c:	e750      	b.n	d6230 <__adddf3+0x138>
   d638e:	bf00      	nop

000d6390 <__aeabi_i2d>:
   d6390:	f090 0f00 	teq	r0, #0
   d6394:	bf04      	itt	eq
   d6396:	2100      	moveq	r1, #0
   d6398:	4770      	bxeq	lr
   d639a:	b530      	push	{r4, r5, lr}
   d639c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d63a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d63a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d63a8:	bf48      	it	mi
   d63aa:	4240      	negmi	r0, r0
   d63ac:	f04f 0100 	mov.w	r1, #0
   d63b0:	e73e      	b.n	d6230 <__adddf3+0x138>
   d63b2:	bf00      	nop

000d63b4 <__aeabi_f2d>:
   d63b4:	0042      	lsls	r2, r0, #1
   d63b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d63ba:	ea4f 0131 	mov.w	r1, r1, rrx
   d63be:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d63c2:	bf1f      	itttt	ne
   d63c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d63c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d63cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d63d0:	4770      	bxne	lr
   d63d2:	f092 0f00 	teq	r2, #0
   d63d6:	bf14      	ite	ne
   d63d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d63dc:	4770      	bxeq	lr
   d63de:	b530      	push	{r4, r5, lr}
   d63e0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d63e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d63e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d63ec:	e720      	b.n	d6230 <__adddf3+0x138>
   d63ee:	bf00      	nop

000d63f0 <__aeabi_ul2d>:
   d63f0:	ea50 0201 	orrs.w	r2, r0, r1
   d63f4:	bf08      	it	eq
   d63f6:	4770      	bxeq	lr
   d63f8:	b530      	push	{r4, r5, lr}
   d63fa:	f04f 0500 	mov.w	r5, #0
   d63fe:	e00a      	b.n	d6416 <__aeabi_l2d+0x16>

000d6400 <__aeabi_l2d>:
   d6400:	ea50 0201 	orrs.w	r2, r0, r1
   d6404:	bf08      	it	eq
   d6406:	4770      	bxeq	lr
   d6408:	b530      	push	{r4, r5, lr}
   d640a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d640e:	d502      	bpl.n	d6416 <__aeabi_l2d+0x16>
   d6410:	4240      	negs	r0, r0
   d6412:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6416:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d641a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d641e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6422:	f43f aedc 	beq.w	d61de <__adddf3+0xe6>
   d6426:	f04f 0203 	mov.w	r2, #3
   d642a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d642e:	bf18      	it	ne
   d6430:	3203      	addne	r2, #3
   d6432:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6436:	bf18      	it	ne
   d6438:	3203      	addne	r2, #3
   d643a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d643e:	f1c2 0320 	rsb	r3, r2, #32
   d6442:	fa00 fc03 	lsl.w	ip, r0, r3
   d6446:	fa20 f002 	lsr.w	r0, r0, r2
   d644a:	fa01 fe03 	lsl.w	lr, r1, r3
   d644e:	ea40 000e 	orr.w	r0, r0, lr
   d6452:	fa21 f102 	lsr.w	r1, r1, r2
   d6456:	4414      	add	r4, r2
   d6458:	e6c1      	b.n	d61de <__adddf3+0xe6>
   d645a:	bf00      	nop

000d645c <__aeabi_dmul>:
   d645c:	b570      	push	{r4, r5, r6, lr}
   d645e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6462:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6466:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d646a:	bf1d      	ittte	ne
   d646c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6470:	ea94 0f0c 	teqne	r4, ip
   d6474:	ea95 0f0c 	teqne	r5, ip
   d6478:	f000 f8de 	bleq	d6638 <__aeabi_dmul+0x1dc>
   d647c:	442c      	add	r4, r5
   d647e:	ea81 0603 	eor.w	r6, r1, r3
   d6482:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6486:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d648a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d648e:	bf18      	it	ne
   d6490:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6494:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6498:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d649c:	d038      	beq.n	d6510 <__aeabi_dmul+0xb4>
   d649e:	fba0 ce02 	umull	ip, lr, r0, r2
   d64a2:	f04f 0500 	mov.w	r5, #0
   d64a6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d64aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d64ae:	fbe0 e503 	umlal	lr, r5, r0, r3
   d64b2:	f04f 0600 	mov.w	r6, #0
   d64b6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d64ba:	f09c 0f00 	teq	ip, #0
   d64be:	bf18      	it	ne
   d64c0:	f04e 0e01 	orrne.w	lr, lr, #1
   d64c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d64c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d64cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d64d0:	d204      	bcs.n	d64dc <__aeabi_dmul+0x80>
   d64d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d64d6:	416d      	adcs	r5, r5
   d64d8:	eb46 0606 	adc.w	r6, r6, r6
   d64dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d64e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d64e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d64e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d64ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d64f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d64f4:	bf88      	it	hi
   d64f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d64fa:	d81e      	bhi.n	d653a <__aeabi_dmul+0xde>
   d64fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6500:	bf08      	it	eq
   d6502:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6506:	f150 0000 	adcs.w	r0, r0, #0
   d650a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d650e:	bd70      	pop	{r4, r5, r6, pc}
   d6510:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6514:	ea46 0101 	orr.w	r1, r6, r1
   d6518:	ea40 0002 	orr.w	r0, r0, r2
   d651c:	ea81 0103 	eor.w	r1, r1, r3
   d6520:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6524:	bfc2      	ittt	gt
   d6526:	ebd4 050c 	rsbsgt	r5, r4, ip
   d652a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d652e:	bd70      	popgt	{r4, r5, r6, pc}
   d6530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6534:	f04f 0e00 	mov.w	lr, #0
   d6538:	3c01      	subs	r4, #1
   d653a:	f300 80ab 	bgt.w	d6694 <__aeabi_dmul+0x238>
   d653e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6542:	bfde      	ittt	le
   d6544:	2000      	movle	r0, #0
   d6546:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d654a:	bd70      	pople	{r4, r5, r6, pc}
   d654c:	f1c4 0400 	rsb	r4, r4, #0
   d6550:	3c20      	subs	r4, #32
   d6552:	da35      	bge.n	d65c0 <__aeabi_dmul+0x164>
   d6554:	340c      	adds	r4, #12
   d6556:	dc1b      	bgt.n	d6590 <__aeabi_dmul+0x134>
   d6558:	f104 0414 	add.w	r4, r4, #20
   d655c:	f1c4 0520 	rsb	r5, r4, #32
   d6560:	fa00 f305 	lsl.w	r3, r0, r5
   d6564:	fa20 f004 	lsr.w	r0, r0, r4
   d6568:	fa01 f205 	lsl.w	r2, r1, r5
   d656c:	ea40 0002 	orr.w	r0, r0, r2
   d6570:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6578:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d657c:	fa21 f604 	lsr.w	r6, r1, r4
   d6580:	eb42 0106 	adc.w	r1, r2, r6
   d6584:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6588:	bf08      	it	eq
   d658a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d658e:	bd70      	pop	{r4, r5, r6, pc}
   d6590:	f1c4 040c 	rsb	r4, r4, #12
   d6594:	f1c4 0520 	rsb	r5, r4, #32
   d6598:	fa00 f304 	lsl.w	r3, r0, r4
   d659c:	fa20 f005 	lsr.w	r0, r0, r5
   d65a0:	fa01 f204 	lsl.w	r2, r1, r4
   d65a4:	ea40 0002 	orr.w	r0, r0, r2
   d65a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d65ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d65b0:	f141 0100 	adc.w	r1, r1, #0
   d65b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d65b8:	bf08      	it	eq
   d65ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d65be:	bd70      	pop	{r4, r5, r6, pc}
   d65c0:	f1c4 0520 	rsb	r5, r4, #32
   d65c4:	fa00 f205 	lsl.w	r2, r0, r5
   d65c8:	ea4e 0e02 	orr.w	lr, lr, r2
   d65cc:	fa20 f304 	lsr.w	r3, r0, r4
   d65d0:	fa01 f205 	lsl.w	r2, r1, r5
   d65d4:	ea43 0302 	orr.w	r3, r3, r2
   d65d8:	fa21 f004 	lsr.w	r0, r1, r4
   d65dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d65e0:	fa21 f204 	lsr.w	r2, r1, r4
   d65e4:	ea20 0002 	bic.w	r0, r0, r2
   d65e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d65ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d65f0:	bf08      	it	eq
   d65f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d65f6:	bd70      	pop	{r4, r5, r6, pc}
   d65f8:	f094 0f00 	teq	r4, #0
   d65fc:	d10f      	bne.n	d661e <__aeabi_dmul+0x1c2>
   d65fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6602:	0040      	lsls	r0, r0, #1
   d6604:	eb41 0101 	adc.w	r1, r1, r1
   d6608:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d660c:	bf08      	it	eq
   d660e:	3c01      	subeq	r4, #1
   d6610:	d0f7      	beq.n	d6602 <__aeabi_dmul+0x1a6>
   d6612:	ea41 0106 	orr.w	r1, r1, r6
   d6616:	f095 0f00 	teq	r5, #0
   d661a:	bf18      	it	ne
   d661c:	4770      	bxne	lr
   d661e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6622:	0052      	lsls	r2, r2, #1
   d6624:	eb43 0303 	adc.w	r3, r3, r3
   d6628:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d662c:	bf08      	it	eq
   d662e:	3d01      	subeq	r5, #1
   d6630:	d0f7      	beq.n	d6622 <__aeabi_dmul+0x1c6>
   d6632:	ea43 0306 	orr.w	r3, r3, r6
   d6636:	4770      	bx	lr
   d6638:	ea94 0f0c 	teq	r4, ip
   d663c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6640:	bf18      	it	ne
   d6642:	ea95 0f0c 	teqne	r5, ip
   d6646:	d00c      	beq.n	d6662 <__aeabi_dmul+0x206>
   d6648:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d664c:	bf18      	it	ne
   d664e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6652:	d1d1      	bne.n	d65f8 <__aeabi_dmul+0x19c>
   d6654:	ea81 0103 	eor.w	r1, r1, r3
   d6658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d665c:	f04f 0000 	mov.w	r0, #0
   d6660:	bd70      	pop	{r4, r5, r6, pc}
   d6662:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6666:	bf06      	itte	eq
   d6668:	4610      	moveq	r0, r2
   d666a:	4619      	moveq	r1, r3
   d666c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6670:	d019      	beq.n	d66a6 <__aeabi_dmul+0x24a>
   d6672:	ea94 0f0c 	teq	r4, ip
   d6676:	d102      	bne.n	d667e <__aeabi_dmul+0x222>
   d6678:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d667c:	d113      	bne.n	d66a6 <__aeabi_dmul+0x24a>
   d667e:	ea95 0f0c 	teq	r5, ip
   d6682:	d105      	bne.n	d6690 <__aeabi_dmul+0x234>
   d6684:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6688:	bf1c      	itt	ne
   d668a:	4610      	movne	r0, r2
   d668c:	4619      	movne	r1, r3
   d668e:	d10a      	bne.n	d66a6 <__aeabi_dmul+0x24a>
   d6690:	ea81 0103 	eor.w	r1, r1, r3
   d6694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6698:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d669c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d66a0:	f04f 0000 	mov.w	r0, #0
   d66a4:	bd70      	pop	{r4, r5, r6, pc}
   d66a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d66aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d66ae:	bd70      	pop	{r4, r5, r6, pc}

000d66b0 <__aeabi_ddiv>:
   d66b0:	b570      	push	{r4, r5, r6, lr}
   d66b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d66b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d66ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d66be:	bf1d      	ittte	ne
   d66c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d66c4:	ea94 0f0c 	teqne	r4, ip
   d66c8:	ea95 0f0c 	teqne	r5, ip
   d66cc:	f000 f8a7 	bleq	d681e <__aeabi_ddiv+0x16e>
   d66d0:	eba4 0405 	sub.w	r4, r4, r5
   d66d4:	ea81 0e03 	eor.w	lr, r1, r3
   d66d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d66dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d66e0:	f000 8088 	beq.w	d67f4 <__aeabi_ddiv+0x144>
   d66e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d66e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d66ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d66f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d66f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d66f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d66fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6700:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6704:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6708:	429d      	cmp	r5, r3
   d670a:	bf08      	it	eq
   d670c:	4296      	cmpeq	r6, r2
   d670e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6712:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6716:	d202      	bcs.n	d671e <__aeabi_ddiv+0x6e>
   d6718:	085b      	lsrs	r3, r3, #1
   d671a:	ea4f 0232 	mov.w	r2, r2, rrx
   d671e:	1ab6      	subs	r6, r6, r2
   d6720:	eb65 0503 	sbc.w	r5, r5, r3
   d6724:	085b      	lsrs	r3, r3, #1
   d6726:	ea4f 0232 	mov.w	r2, r2, rrx
   d672a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d672e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6732:	ebb6 0e02 	subs.w	lr, r6, r2
   d6736:	eb75 0e03 	sbcs.w	lr, r5, r3
   d673a:	bf22      	ittt	cs
   d673c:	1ab6      	subcs	r6, r6, r2
   d673e:	4675      	movcs	r5, lr
   d6740:	ea40 000c 	orrcs.w	r0, r0, ip
   d6744:	085b      	lsrs	r3, r3, #1
   d6746:	ea4f 0232 	mov.w	r2, r2, rrx
   d674a:	ebb6 0e02 	subs.w	lr, r6, r2
   d674e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6752:	bf22      	ittt	cs
   d6754:	1ab6      	subcs	r6, r6, r2
   d6756:	4675      	movcs	r5, lr
   d6758:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d675c:	085b      	lsrs	r3, r3, #1
   d675e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6762:	ebb6 0e02 	subs.w	lr, r6, r2
   d6766:	eb75 0e03 	sbcs.w	lr, r5, r3
   d676a:	bf22      	ittt	cs
   d676c:	1ab6      	subcs	r6, r6, r2
   d676e:	4675      	movcs	r5, lr
   d6770:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6774:	085b      	lsrs	r3, r3, #1
   d6776:	ea4f 0232 	mov.w	r2, r2, rrx
   d677a:	ebb6 0e02 	subs.w	lr, r6, r2
   d677e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6782:	bf22      	ittt	cs
   d6784:	1ab6      	subcs	r6, r6, r2
   d6786:	4675      	movcs	r5, lr
   d6788:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d678c:	ea55 0e06 	orrs.w	lr, r5, r6
   d6790:	d018      	beq.n	d67c4 <__aeabi_ddiv+0x114>
   d6792:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6796:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d679a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d679e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d67a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d67a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d67aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d67ae:	d1c0      	bne.n	d6732 <__aeabi_ddiv+0x82>
   d67b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d67b4:	d10b      	bne.n	d67ce <__aeabi_ddiv+0x11e>
   d67b6:	ea41 0100 	orr.w	r1, r1, r0
   d67ba:	f04f 0000 	mov.w	r0, #0
   d67be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d67c2:	e7b6      	b.n	d6732 <__aeabi_ddiv+0x82>
   d67c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d67c8:	bf04      	itt	eq
   d67ca:	4301      	orreq	r1, r0
   d67cc:	2000      	moveq	r0, #0
   d67ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d67d2:	bf88      	it	hi
   d67d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d67d8:	f63f aeaf 	bhi.w	d653a <__aeabi_dmul+0xde>
   d67dc:	ebb5 0c03 	subs.w	ip, r5, r3
   d67e0:	bf04      	itt	eq
   d67e2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d67e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d67ea:	f150 0000 	adcs.w	r0, r0, #0
   d67ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d67f2:	bd70      	pop	{r4, r5, r6, pc}
   d67f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d67f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d67fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6800:	bfc2      	ittt	gt
   d6802:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6806:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d680a:	bd70      	popgt	{r4, r5, r6, pc}
   d680c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6810:	f04f 0e00 	mov.w	lr, #0
   d6814:	3c01      	subs	r4, #1
   d6816:	e690      	b.n	d653a <__aeabi_dmul+0xde>
   d6818:	ea45 0e06 	orr.w	lr, r5, r6
   d681c:	e68d      	b.n	d653a <__aeabi_dmul+0xde>
   d681e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6822:	ea94 0f0c 	teq	r4, ip
   d6826:	bf08      	it	eq
   d6828:	ea95 0f0c 	teqeq	r5, ip
   d682c:	f43f af3b 	beq.w	d66a6 <__aeabi_dmul+0x24a>
   d6830:	ea94 0f0c 	teq	r4, ip
   d6834:	d10a      	bne.n	d684c <__aeabi_ddiv+0x19c>
   d6836:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d683a:	f47f af34 	bne.w	d66a6 <__aeabi_dmul+0x24a>
   d683e:	ea95 0f0c 	teq	r5, ip
   d6842:	f47f af25 	bne.w	d6690 <__aeabi_dmul+0x234>
   d6846:	4610      	mov	r0, r2
   d6848:	4619      	mov	r1, r3
   d684a:	e72c      	b.n	d66a6 <__aeabi_dmul+0x24a>
   d684c:	ea95 0f0c 	teq	r5, ip
   d6850:	d106      	bne.n	d6860 <__aeabi_ddiv+0x1b0>
   d6852:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6856:	f43f aefd 	beq.w	d6654 <__aeabi_dmul+0x1f8>
   d685a:	4610      	mov	r0, r2
   d685c:	4619      	mov	r1, r3
   d685e:	e722      	b.n	d66a6 <__aeabi_dmul+0x24a>
   d6860:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6864:	bf18      	it	ne
   d6866:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d686a:	f47f aec5 	bne.w	d65f8 <__aeabi_dmul+0x19c>
   d686e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d6872:	f47f af0d 	bne.w	d6690 <__aeabi_dmul+0x234>
   d6876:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d687a:	f47f aeeb 	bne.w	d6654 <__aeabi_dmul+0x1f8>
   d687e:	e712      	b.n	d66a6 <__aeabi_dmul+0x24a>

000d6880 <__gedf2>:
   d6880:	f04f 3cff 	mov.w	ip, #4294967295
   d6884:	e006      	b.n	d6894 <__cmpdf2+0x4>
   d6886:	bf00      	nop

000d6888 <__ledf2>:
   d6888:	f04f 0c01 	mov.w	ip, #1
   d688c:	e002      	b.n	d6894 <__cmpdf2+0x4>
   d688e:	bf00      	nop

000d6890 <__cmpdf2>:
   d6890:	f04f 0c01 	mov.w	ip, #1
   d6894:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6898:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d689c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d68a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d68a4:	bf18      	it	ne
   d68a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d68aa:	d01b      	beq.n	d68e4 <__cmpdf2+0x54>
   d68ac:	b001      	add	sp, #4
   d68ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d68b2:	bf0c      	ite	eq
   d68b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d68b8:	ea91 0f03 	teqne	r1, r3
   d68bc:	bf02      	ittt	eq
   d68be:	ea90 0f02 	teqeq	r0, r2
   d68c2:	2000      	moveq	r0, #0
   d68c4:	4770      	bxeq	lr
   d68c6:	f110 0f00 	cmn.w	r0, #0
   d68ca:	ea91 0f03 	teq	r1, r3
   d68ce:	bf58      	it	pl
   d68d0:	4299      	cmppl	r1, r3
   d68d2:	bf08      	it	eq
   d68d4:	4290      	cmpeq	r0, r2
   d68d6:	bf2c      	ite	cs
   d68d8:	17d8      	asrcs	r0, r3, #31
   d68da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d68de:	f040 0001 	orr.w	r0, r0, #1
   d68e2:	4770      	bx	lr
   d68e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d68e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d68ec:	d102      	bne.n	d68f4 <__cmpdf2+0x64>
   d68ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d68f2:	d107      	bne.n	d6904 <__cmpdf2+0x74>
   d68f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d68f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d68fc:	d1d6      	bne.n	d68ac <__cmpdf2+0x1c>
   d68fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6902:	d0d3      	beq.n	d68ac <__cmpdf2+0x1c>
   d6904:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6908:	4770      	bx	lr
   d690a:	bf00      	nop

000d690c <__aeabi_cdrcmple>:
   d690c:	4684      	mov	ip, r0
   d690e:	4610      	mov	r0, r2
   d6910:	4662      	mov	r2, ip
   d6912:	468c      	mov	ip, r1
   d6914:	4619      	mov	r1, r3
   d6916:	4663      	mov	r3, ip
   d6918:	e000      	b.n	d691c <__aeabi_cdcmpeq>
   d691a:	bf00      	nop

000d691c <__aeabi_cdcmpeq>:
   d691c:	b501      	push	{r0, lr}
   d691e:	f7ff ffb7 	bl	d6890 <__cmpdf2>
   d6922:	2800      	cmp	r0, #0
   d6924:	bf48      	it	mi
   d6926:	f110 0f00 	cmnmi.w	r0, #0
   d692a:	bd01      	pop	{r0, pc}

000d692c <__aeabi_dcmpeq>:
   d692c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6930:	f7ff fff4 	bl	d691c <__aeabi_cdcmpeq>
   d6934:	bf0c      	ite	eq
   d6936:	2001      	moveq	r0, #1
   d6938:	2000      	movne	r0, #0
   d693a:	f85d fb08 	ldr.w	pc, [sp], #8
   d693e:	bf00      	nop

000d6940 <__aeabi_dcmplt>:
   d6940:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6944:	f7ff ffea 	bl	d691c <__aeabi_cdcmpeq>
   d6948:	bf34      	ite	cc
   d694a:	2001      	movcc	r0, #1
   d694c:	2000      	movcs	r0, #0
   d694e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6952:	bf00      	nop

000d6954 <__aeabi_dcmple>:
   d6954:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6958:	f7ff ffe0 	bl	d691c <__aeabi_cdcmpeq>
   d695c:	bf94      	ite	ls
   d695e:	2001      	movls	r0, #1
   d6960:	2000      	movhi	r0, #0
   d6962:	f85d fb08 	ldr.w	pc, [sp], #8
   d6966:	bf00      	nop

000d6968 <__aeabi_dcmpge>:
   d6968:	f84d ed08 	str.w	lr, [sp, #-8]!
   d696c:	f7ff ffce 	bl	d690c <__aeabi_cdrcmple>
   d6970:	bf94      	ite	ls
   d6972:	2001      	movls	r0, #1
   d6974:	2000      	movhi	r0, #0
   d6976:	f85d fb08 	ldr.w	pc, [sp], #8
   d697a:	bf00      	nop

000d697c <__aeabi_dcmpgt>:
   d697c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6980:	f7ff ffc4 	bl	d690c <__aeabi_cdrcmple>
   d6984:	bf34      	ite	cc
   d6986:	2001      	movcc	r0, #1
   d6988:	2000      	movcs	r0, #0
   d698a:	f85d fb08 	ldr.w	pc, [sp], #8
   d698e:	bf00      	nop

000d6990 <__aeabi_dcmpun>:
   d6990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6998:	d102      	bne.n	d69a0 <__aeabi_dcmpun+0x10>
   d699a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d699e:	d10a      	bne.n	d69b6 <__aeabi_dcmpun+0x26>
   d69a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d69a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d69a8:	d102      	bne.n	d69b0 <__aeabi_dcmpun+0x20>
   d69aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d69ae:	d102      	bne.n	d69b6 <__aeabi_dcmpun+0x26>
   d69b0:	f04f 0000 	mov.w	r0, #0
   d69b4:	4770      	bx	lr
   d69b6:	f04f 0001 	mov.w	r0, #1
   d69ba:	4770      	bx	lr

000d69bc <__aeabi_d2iz>:
   d69bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d69c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d69c4:	d215      	bcs.n	d69f2 <__aeabi_d2iz+0x36>
   d69c6:	d511      	bpl.n	d69ec <__aeabi_d2iz+0x30>
   d69c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d69cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d69d0:	d912      	bls.n	d69f8 <__aeabi_d2iz+0x3c>
   d69d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d69d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d69da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d69de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d69e2:	fa23 f002 	lsr.w	r0, r3, r2
   d69e6:	bf18      	it	ne
   d69e8:	4240      	negne	r0, r0
   d69ea:	4770      	bx	lr
   d69ec:	f04f 0000 	mov.w	r0, #0
   d69f0:	4770      	bx	lr
   d69f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d69f6:	d105      	bne.n	d6a04 <__aeabi_d2iz+0x48>
   d69f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d69fc:	bf08      	it	eq
   d69fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6a02:	4770      	bx	lr
   d6a04:	f04f 0000 	mov.w	r0, #0
   d6a08:	4770      	bx	lr
   d6a0a:	bf00      	nop

000d6a0c <__aeabi_d2uiz>:
   d6a0c:	004a      	lsls	r2, r1, #1
   d6a0e:	d211      	bcs.n	d6a34 <__aeabi_d2uiz+0x28>
   d6a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6a14:	d211      	bcs.n	d6a3a <__aeabi_d2uiz+0x2e>
   d6a16:	d50d      	bpl.n	d6a34 <__aeabi_d2uiz+0x28>
   d6a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d6a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6a20:	d40e      	bmi.n	d6a40 <__aeabi_d2uiz+0x34>
   d6a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6a2e:	fa23 f002 	lsr.w	r0, r3, r2
   d6a32:	4770      	bx	lr
   d6a34:	f04f 0000 	mov.w	r0, #0
   d6a38:	4770      	bx	lr
   d6a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6a3e:	d102      	bne.n	d6a46 <__aeabi_d2uiz+0x3a>
   d6a40:	f04f 30ff 	mov.w	r0, #4294967295
   d6a44:	4770      	bx	lr
   d6a46:	f04f 0000 	mov.w	r0, #0
   d6a4a:	4770      	bx	lr

000d6a4c <__aeabi_d2f>:
   d6a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6a54:	bf24      	itt	cs
   d6a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6a5e:	d90d      	bls.n	d6a7c <__aeabi_d2f+0x30>
   d6a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6a74:	bf08      	it	eq
   d6a76:	f020 0001 	biceq.w	r0, r0, #1
   d6a7a:	4770      	bx	lr
   d6a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6a80:	d121      	bne.n	d6ac6 <__aeabi_d2f+0x7a>
   d6a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6a86:	bfbc      	itt	lt
   d6a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6a8c:	4770      	bxlt	lr
   d6a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6a96:	f1c2 0218 	rsb	r2, r2, #24
   d6a9a:	f1c2 0c20 	rsb	ip, r2, #32
   d6a9e:	fa10 f30c 	lsls.w	r3, r0, ip
   d6aa2:	fa20 f002 	lsr.w	r0, r0, r2
   d6aa6:	bf18      	it	ne
   d6aa8:	f040 0001 	orrne.w	r0, r0, #1
   d6aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6ab8:	ea40 000c 	orr.w	r0, r0, ip
   d6abc:	fa23 f302 	lsr.w	r3, r3, r2
   d6ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6ac4:	e7cc      	b.n	d6a60 <__aeabi_d2f+0x14>
   d6ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6aca:	d107      	bne.n	d6adc <__aeabi_d2f+0x90>
   d6acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6ad0:	bf1e      	ittt	ne
   d6ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6ada:	4770      	bxne	lr
   d6adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6ae8:	4770      	bx	lr
   d6aea:	bf00      	nop

000d6aec <__cxa_atexit>:
   d6aec:	b510      	push	{r4, lr}
   d6aee:	4c05      	ldr	r4, [pc, #20]	; (d6b04 <__cxa_atexit+0x18>)
   d6af0:	4613      	mov	r3, r2
   d6af2:	b12c      	cbz	r4, d6b00 <__cxa_atexit+0x14>
   d6af4:	460a      	mov	r2, r1
   d6af6:	4601      	mov	r1, r0
   d6af8:	2002      	movs	r0, #2
   d6afa:	f3af 8000 	nop.w
   d6afe:	bd10      	pop	{r4, pc}
   d6b00:	4620      	mov	r0, r4
   d6b02:	bd10      	pop	{r4, pc}
   d6b04:	00000000 	.word	0x00000000

000d6b08 <memcpy>:
   d6b08:	b510      	push	{r4, lr}
   d6b0a:	1e43      	subs	r3, r0, #1
   d6b0c:	440a      	add	r2, r1
   d6b0e:	4291      	cmp	r1, r2
   d6b10:	d004      	beq.n	d6b1c <memcpy+0x14>
   d6b12:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6b16:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6b1a:	e7f8      	b.n	d6b0e <memcpy+0x6>
   d6b1c:	bd10      	pop	{r4, pc}

000d6b1e <memset>:
   d6b1e:	4402      	add	r2, r0
   d6b20:	4603      	mov	r3, r0
   d6b22:	4293      	cmp	r3, r2
   d6b24:	d002      	beq.n	d6b2c <memset+0xe>
   d6b26:	f803 1b01 	strb.w	r1, [r3], #1
   d6b2a:	e7fa      	b.n	d6b22 <memset+0x4>
   d6b2c:	4770      	bx	lr
	...

000d6b30 <srand>:
   d6b30:	b538      	push	{r3, r4, r5, lr}
   d6b32:	4b12      	ldr	r3, [pc, #72]	; (d6b7c <srand+0x4c>)
   d6b34:	681c      	ldr	r4, [r3, #0]
   d6b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6b38:	4605      	mov	r5, r0
   d6b3a:	b9d3      	cbnz	r3, d6b72 <srand+0x42>
   d6b3c:	2018      	movs	r0, #24
   d6b3e:	f7fe fac3 	bl	d50c8 <malloc>
   d6b42:	f243 330e 	movw	r3, #13070	; 0x330e
   d6b46:	63a0      	str	r0, [r4, #56]	; 0x38
   d6b48:	8003      	strh	r3, [r0, #0]
   d6b4a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6b4e:	8043      	strh	r3, [r0, #2]
   d6b50:	f241 2334 	movw	r3, #4660	; 0x1234
   d6b54:	8083      	strh	r3, [r0, #4]
   d6b56:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6b5a:	80c3      	strh	r3, [r0, #6]
   d6b5c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6b60:	8103      	strh	r3, [r0, #8]
   d6b62:	2305      	movs	r3, #5
   d6b64:	8143      	strh	r3, [r0, #10]
   d6b66:	230b      	movs	r3, #11
   d6b68:	8183      	strh	r3, [r0, #12]
   d6b6a:	2201      	movs	r2, #1
   d6b6c:	2300      	movs	r3, #0
   d6b6e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6b74:	2200      	movs	r2, #0
   d6b76:	611d      	str	r5, [r3, #16]
   d6b78:	615a      	str	r2, [r3, #20]
   d6b7a:	bd38      	pop	{r3, r4, r5, pc}
   d6b7c:	2003e3a4 	.word	0x2003e3a4

000d6b80 <strlen>:
   d6b80:	4603      	mov	r3, r0
   d6b82:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6b86:	2a00      	cmp	r2, #0
   d6b88:	d1fb      	bne.n	d6b82 <strlen+0x2>
   d6b8a:	1a18      	subs	r0, r3, r0
   d6b8c:	3801      	subs	r0, #1
   d6b8e:	4770      	bx	lr

000d6b90 <dynalib_user>:
   d6b90:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6ba0:	0000 0000 6854 6d6f 7365 6863 6f6f 646c     ....Thomeschoold
   d6bb0:	7665 0000                                   ev..

000d6bb4 <_ZTV16Adafruit_SSD1306>:
	...
   d6bbc:	40c5 000d 41e1 000d 4c0d 000d 5295 000d     .@...A...L...R..
   d6bcc:	4529 000d 490d 000d 438d 000d 4219 000d     )E...I...C...B..
   d6bdc:	49cd 000d 4a63 000d 4a9b 000d 4ab7 000d     .I..cJ...J...J..

000d6bec <_ZTV12Adafruit_GFX>:
	...
   d6bfc:	4c0d 000d 5295 000d 40a1 000d 490d 000d     .L...R...@...I..
   d6c0c:	4a2d 000d 4a49 000d 49cd 000d 4a63 000d     -J..IJ...I..cJ..
   d6c1c:	4a9b 000d 4ab7 000d                         .J...J..

000d6c24 <_ZL4font>:
   d6c24:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d6c34:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d6c44:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d6c54:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d6c64:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d6c74:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d6c84:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d6c94:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d6ca4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d6cb4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d6cc4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d6cd4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d6ce4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d6cf4:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d6d04:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d6d14:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d6d24:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d6d34:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d6d44:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d6d54:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d6d64:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d6d74:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d6d84:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d6d94:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d6da4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d6db4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d6dc4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d6dd4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d6de4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d6df4:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d6e04:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d6e14:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d6e24:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d6e34:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d6e44:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d6e54:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d6e64:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d6e74:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d6e84:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d6e94:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d6ea4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d6eb4:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d6ec4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d6ed4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d6ee4:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d6ef4:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d6f04:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d6f14:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d6f24:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d6f34:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d6f44:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d6f54:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d6f64:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d6f74:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d6f84:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d6f94:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d6fa4:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d6fb4:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d6fc4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d6fd4:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d6fe4:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d6ff4:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d7004:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d7014:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d7024:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d7034:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d7044:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d7054:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d7064:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d7074:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d7084:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d7094:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d70a4:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d70b4:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d70c4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d70d4:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d70e4:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d70f4:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d7104:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d7114:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d7120 <_ZTVN5spark13EthernetClassE>:
	...
   d7128:	5147 000d 513d 000d 5133 000d 5129 000d     GQ..=Q..3Q..)Q..
   d7138:	511d 000d 5111 000d 5105 000d 50fd 000d     .Q...Q...Q...P..
   d7148:	50f3 000d 50e9 000d 5bdd 000d               .P...P...[..

000d7154 <_ZTV8SPIClass>:
	...
   d715c:	5165 000d 5167 000d                         eQ..gQ..

000d7164 <_ZL14clock_divisors>:
   d7164:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
   d7174:	002e 6e69 0066 6e6c 6600 006e 6f63 6564     ..inf.ln.fn.code
   d7184:	6400 7465 6961 006c 0a0d 2500 3130 7530     .detail....%010u
   d7194:	0020 205d 2500 0064 202c 2800 3a29 0020      .] .%d., .(): .
   d71a4:	5b20 6300 646f 2065 203d 2500 0069 6564      [.code = .%i.de
   d71b4:	6174 6c69 2073 203d 6200 7561 0064 6553     tails = .baud.Se
   d71c4:	6972 6c61 5300 7265 6169 316c 7400 7079     rial.Serial1.typ
   d71d4:	0065 6170 6172 006d 6d63 0064 6469 6800     e.param.cmd.id.h
   d71e4:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   d71f4:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   d7204:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   d7214:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   d7224:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   d7234:	6f6e 656e 7400 6172 6563 6900 666e 006f     none.trace.info.
   d7244:	6177 6e72 6500 7272 726f 7000 6e61 6369     warn.error.panic
   d7254:	6100 6c6c 5a00 2500 302b 6433 253a 3230     .all.Z.%+03d:%02
   d7264:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
   d7274:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000d7284 <_ZTV9IPAddress>:
	...
   d728c:	566b 000d 565d 000d 565f 000d               kV..]V.._V..

000d7298 <_ZTV9USBSerial>:
	...
   d72a0:	5745 000d 5789 000d 5763 000d 5295 000d     EW...W..cW...R..
   d72b0:	575d 000d 5747 000d 574f 000d 5783 000d     ]W..GW..OW...W..
   d72c0:	5757 000d 5741 000d                         WW..AW..

000d72c8 <_ZTV11USARTSerial>:
	...
   d72d0:	5821 000d 5845 000d 5851 000d 5295 000d     !X..EX..QX...R..
   d72e0:	582d 000d 5839 000d 5833 000d 583f 000d     -X..9X..3X..?X..
   d72f0:	5823 000d 5827 000d                         #X..'X..

000d72f8 <_ZTV7TwoWire>:
	...
   d7300:	58f5 000d 593f 000d 5917 000d 58f7 000d     .X..?Y...Y...X..
   d7310:	591f 000d 5927 000d 592f 000d 5937 000d     .Y..'Y../Y..7Y..

000d7320 <_ZTVN5spark9MeshClassE>:
	...
   d7328:	59ff 000d 59f5 000d 59eb 000d 59e1 000d     .Y...Y...Y...Y..
   d7338:	59d5 000d 59c9 000d 59bd 000d 59b5 000d     .Y...Y...Y...Y..
   d7348:	59ab 000d 59a1 000d 5bdd 000d               .Y...Y...[..

000d7354 <_ZTVN5spark9WiFiClassE>:
	...
   d735c:	5b57 000d 5b4d 000d 5b43 000d 5af9 000d     W[..M[..C[...Z..
   d736c:	5b37 000d 5b2b 000d 5b1f 000d 5b17 000d     7[..+[...[...[..
   d737c:	5b0d 000d 5b03 000d 5bdd 000d               .[...[...[..

000d7388 <_ZTVN5spark12NetworkClassE>:
	...
   d7390:	5b75 000d 5b7f 000d 5b89 000d 5b93 000d     u[...[...[...[..
   d73a0:	5b9d 000d 5ba9 000d 5bb5 000d 5bc1 000d     .[...[...[...[..
   d73b0:	5bc9 000d 5bd3 000d 5bdd 000d               .[...[...[..

000d73bc <__sf_fake_stdin>:
	...

000d73dc <__sf_fake_stdout>:
	...

000d73fc <__sf_fake_stderr>:
	...
   d741c:	0043                                        C.

000d741e <link_const_variable_data_end>:
	...

000d7420 <link_constructors_location>:
   d7420:	000d41ed 	.word	0x000d41ed
   d7424:	000d4909 	.word	0x000d4909
   d7428:	000d4c9d 	.word	0x000d4c9d
   d742c:	000d5151 	.word	0x000d5151
   d7430:	000d527d 	.word	0x000d527d
   d7434:	000d5525 	.word	0x000d5525
   d7438:	000d5535 	.word	0x000d5535
   d743c:	000d556d 	.word	0x000d556d
   d7440:	000d5aad 	.word	0x000d5aad
   d7444:	000d5b61 	.word	0x000d5b61
   d7448:	000d5ca9 	.word	0x000d5ca9
   d744c:	000d5dcd 	.word	0x000d5dcd
   d7450:	000d5e5d 	.word	0x000d5e5d
   d7454:	000d5ee1 	.word	0x000d5ee1
   d7458:	000d5fa5 	.word	0x000d5fa5
   d745c:	000d6069 	.word	0x000d6069
